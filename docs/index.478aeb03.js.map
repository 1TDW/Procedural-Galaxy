{"mappings":"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","sources":["<anon>","src/main.cjs","node_modules/jscam/index.cjs","src/renderer/renderer.cjs","src/renderer/glsl/vert.glsl","src/renderer/glsl/frag.glsl","src/renderer/glsl/bg-vert.glsl","src/renderer/glsl/bg-frag.glsl","src/renderer/mesh.cjs","node_modules/twgl.js/dist/5.x/twgl-full.module.js","src/util/util.cjs","src/star-data/data.cjs","src/star-data/star-grid.cjs","node_modules/fast-random/index.js","src/util/stat.cjs","src/util/timer.cjs"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $80a75ef059e5aa8e$exports = {};\n$80a75ef059e5aa8e$exports = class {\n    constructor(target, opts){\n        this.target = target;\n        this.x = 0;\n        this.y = 0;\n        this.z = 1;\n        this.down = false;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.startX = 0;\n        this.startY = 0;\n        this.movedX = 0;\n        this.movedY = 0;\n        this.active = false;\n        this.button = 0;\n        this.minZ = 0;\n        this.maxZ = Infinity;\n        if (typeof opts === \"object\") {\n            if (opts.hasOwnProperty(\"button\")) {\n                if (typeof opts.button === \"number\" && opts.button >= 0) this.button = opts.button;\n                else throw new TypeError(\"Button property must be a number and above or equal to 0\");\n            }\n            if (opts.hasOwnProperty(\"minZ\")) {\n                if (typeof opts.minZ === \"number\" && opts.minZ >= 0) this.minZ = opts.minZ;\n                else throw new TypeError(\"minZ property must be a number and above or equal to 0\");\n            }\n            if (opts.hasOwnProperty(\"maxZ\")) {\n                if (typeof opts.maxZ === \"number\" && opts.maxZ >= this.minZ) this.maxZ = opts.maxZ;\n                else throw new TypeError(`MaxZ property must be a number and above or equal to minZ (= ${this.minZ})`);\n            }\n        }\n        this.onMouseDown = (e)=>{\n            if (e.button === this.button) {\n                this.down = true;\n                this.startX = e.clientX;\n                this.startY = e.clientY;\n                this.offsetX = this.x;\n                this.offsetY = this.y;\n            }\n        };\n        this.onMouseMove = (e)=>{\n            if (this.down) {\n                e.preventDefault();\n                this.x = this.offsetX + (this.startX - e.clientX) * this.z;\n                this.y = this.offsetY + (this.startY - e.clientY) * this.z;\n            }\n        };\n        this.onMouseUp = (e)=>{\n            if (this.down && e.button === this.button) {\n                e.preventDefault();\n                this.down = false;\n            }\n        };\n        this.onScroll = (e)=>{\n            let oldX = (e.clientX - innerWidth / 2) * this.z;\n            let oldY = (e.clientY - innerHeight / 2) * this.z;\n            let z = e.deltaY / 1250 * this.z;\n            this.z = Math.min(Math.max(this.z + z, this.minZ), this.maxZ);\n            let newX = (e.clientX - innerWidth / 2) * this.z;\n            let newY = (e.clientY - innerHeight / 2) * this.z;\n            this.x += oldX - newX;\n            this.y += oldY - newY;\n        };\n        if (this.button === 2) this.onContextMenu = (e)=>{\n            e.preventDefault();\n        };\n        this.begin();\n    }\n    begin() {\n        this.active = true;\n        this.target.addEventListener(\"mousedown\", this.onMouseDown);\n        this.target.addEventListener(\"contextmenu\", this.onContextMenu);\n        this.target.addEventListener(\"wheel\", this.onScroll);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        window.addEventListener(\"mouseup\", this.onMouseUp);\n    }\n    end() {\n        this.active = false;\n        this.target.removeEventListener(\"mousedown\", this.onMouseDown);\n        this.target.removeEventListener(\"contextmenu\", this.onContextMenu);\n        this.target.removeEventListener(\"wheel\", this.onScroll);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n        window.removeEventListener(\"mouseup\", this.onMouseUp);\n    }\n    coordToScreenSpace(x, y) {\n        const { x: x2, y: y2 } = $80a75ef059e5aa8e$var$destruct(x, y);\n        return {\n            x: (x2 - this.x) / this.z + innerWidth / 2,\n            y: (y2 - this.y) / this.z + innerHeight / 2\n        };\n    }\n    coordToClipSpace(x, y) {\n        return this.screenSpaceToClipSpace(this.coordToScreenSpace($80a75ef059e5aa8e$var$destruct(x, y)));\n    }\n    screenSpaceToCoord(x, y) {\n        const { x: x2, y: y2 } = $80a75ef059e5aa8e$var$destruct(x, y);\n        return {\n            x: (x2 - innerWidth / 2) * this.z + this.x,\n            y: (y2 - innerHeight / 2) * this.z + this.y\n        };\n    }\n    screenSpaceToClipSpace(x, y) {\n        const { x: x2, y: y2 } = $80a75ef059e5aa8e$var$destruct(x, y);\n        return {\n            x: x2 / innerWidth * 2 - 1,\n            y: y2 / innerHeight * 2 - 1\n        };\n    }\n    clipSpaceToCoord(x, y) {\n        return this.screenSpaceToCoord(this.clipSpaceToScreenSpace($80a75ef059e5aa8e$var$destruct(x, y)));\n    }\n    clipSpaceToScreenSpace(x, y) {\n        const { x: x2, y: y2 } = $80a75ef059e5aa8e$var$destruct(x, y);\n        return {\n            x: (x2 + 1) / 2 * innerWidth,\n            y: (y2 + 1) / 2 * innerHeight\n        };\n    }\n};\nfunction $80a75ef059e5aa8e$var$destruct(x, y) {\n    if (typeof x === \"object\") return x;\n    return {\n        x: x,\n        y: y\n    };\n}\n\n\nvar $a1e98a181f2c075d$exports = {};\nvar $a24fb1ef4a1781b4$exports = {};\n$a24fb1ef4a1781b4$exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute vec2 points;\\nattribute vec2 position;\\nattribute float size;\\n\\nuniform vec2 resolution;\\nuniform vec3 camera;\\n\\nvarying float mass;\\nvarying vec2 fragPos;\\n\\nvoid main() {\\n    vec2 transform = points * size + position;\\n\\n    vec2 cameraSpace = (transform - camera.xy) / camera.z;\\n\\n    vec2 clipSpace = cameraSpace / resolution;\\n\\n    vec2 screenSpace = clipSpace * vec2(2.0, -2.0);\\n\\n    mass = size / 128.0;\\n\\n    fragPos = transform;\\n\\n    gl_Position = vec4(screenSpace, 0.0, 1.0);\\n}\";\n\n\nvar $4b46d1b7227c6e88$exports = {};\n$4b46d1b7227c6e88$exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform float shaderType;\\n\\nvarying float mass;\\nvarying vec2 fragPos;\\n\\nfloat rand(vec2 co) {\\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvec3 getColorOf(float mass) {\\n    vec3 color = vec3(1.0, 1.0, 1.0); \\n\\n    vec3 red = vec3(1.0, 0.5, 0.2);\\n    vec3 yellow = vec3(1.0, 1.0, 0.6);\\n    vec3 white = vec3(1.0, 1.0, 1.0);\\n    vec3 blue = vec3(0.5, 0.7, 1.0);\\n\\n    float RED_LIM = 0.05;\\n    float YELLOW_LIM = 0.075;\\n    float WHITE_LIM = 0.2;\\n    float BLUE_LIM = 0.4;\\n\\n    if (mass <= RED_LIM) {\\n        color = red;\\n    } else if (mass <= YELLOW_LIM) {\\n        color = mix(red, yellow, (mass - RED_LIM) / (YELLOW_LIM - RED_LIM));\\n    } else if (mass <= WHITE_LIM) {\\n        color = mix(yellow, white, (mass - YELLOW_LIM) / (WHITE_LIM - YELLOW_LIM));\\n    } else if (mass <= BLUE_LIM) {\\n        color = mix(white, blue, (mass - WHITE_LIM) / (BLUE_LIM - WHITE_LIM));\\n    } else {\\n        color = blue;\\n    }\\n\\n    //color += vec3((rand(fragPos) - 0.5) / 4.0);\\n\\n    return color;\\n}\\n \\nvoid main() {\\n    vec3 color = vec3(0.0, 0.0, 0.0);\\n\\n    if (shaderType == 1.0) {\\n        color = getColorOf(mass);\\n    } else if (shaderType == 2.0) {\\n        color = vec3(1.0, 1.0, 1.0);\\n    } else if (shaderType == 3.0) {\\n        color = vec3(fragPos.x / 999999.0, 1.0 - fragPos.x / 999999.0, 0.5 + fragPos.y / 999999.0);\\n    }\\n\\n    gl_FragColor = vec4(color, 1.0);\\n}\";\n\n\nvar $c89e750638e63481$exports = {};\n$c89e750638e63481$exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\n\\nuniform vec2 resolution;\\nuniform vec3 camera;\\n\\nvarying vec2 fragPos;\\n\\nvoid main() {\\n    vec2 cameraSpace = (position - camera.xy) / camera.z;\\n\\n    vec2 clipSpace = cameraSpace / resolution;\\n\\n    vec2 screenSpace = clipSpace * vec2(2.0, -2.0);\\n\\n    fragPos = position;\\n\\n    gl_Position = vec4(screenSpace, 0.0, 1.0);\\n}\";\n\n\nvar $ed69c28b53996f4b$exports = {};\n$ed69c28b53996f4b$exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform float shaderType;\\nuniform float lod;\\n\\nvarying vec2 fragPos;\\n\\nfloat round(float n) {\\n    return floor(n + 0.5);\\n}\\n\\nvec2 round(vec2 n) {\\n    return vec2(round(n.x), round(n.y));\\n}\\n\\nfloat rand(vec2 co) {\\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvec3 getColorOf(float mass) {\\n    vec3 color = vec3(1.0, 1.0, 1.0); \\n\\n    vec3 red = vec3(1.0, 0.5, 0.2);\\n    vec3 yellow = vec3(1.0, 1.0, 0.6);\\n    vec3 white = vec3(1.0, 1.0, 1.0);\\n    vec3 blue = vec3(0.5, 0.7, 1.0);\\n\\n    float RED_LIM = 0.05;\\n    float YELLOW_LIM = 0.075;\\n    float WHITE_LIM = 0.2;\\n    float BLUE_LIM = 0.4;\\n\\n    if (mass <= RED_LIM) {\\n        color = red;\\n    } else if (mass <= YELLOW_LIM) {\\n        color = mix(red, yellow, (mass - RED_LIM) / (YELLOW_LIM - RED_LIM));\\n    } else if (mass <= WHITE_LIM) {\\n        color = mix(yellow, white, (mass - YELLOW_LIM) / (WHITE_LIM - YELLOW_LIM));\\n    } else if (mass <= BLUE_LIM) {\\n        color = mix(white, blue, (mass - WHITE_LIM) / (BLUE_LIM - WHITE_LIM));\\n    } else {\\n        color = blue;\\n    }\\n\\n    return color;\\n}\\n\\nvoid main() {\\n    vec2 seed = mod(round(fragPos), 1000.0);\\n\\n    float value = (rand(seed) + rand(seed.yx)) / 2.0;\\n\\n    float brightness = pow(value, 5.0 - lod / 2.0);\\n\\n    float LOD_MIN = 0.75;\\n    float LOD_MAX = 2.0;\\n\\n    if (lod < LOD_MIN) {\\n        brightness = 0.0;\\n    }\\n\\n    if (lod >= LOD_MIN && lod < LOD_MAX) {\\n        brightness = mix(0.0, brightness, (lod - LOD_MIN) / (LOD_MAX - LOD_MIN));\\n    }\\n\\n    if (brightness < 0.5) {\\n        brightness /= 1.5;\\n    }\\n\\n    if (brightness > 0.9 && lod >= 3.0) {\\n        brightness = brightness * 2.0;\\n    }\\n\\n    vec3 color = vec3(0.0, 0.0, 0.0);\\n\\n    if (shaderType == 1.0) {\\n        color = getColorOf(brightness / 4.0) * brightness / 4.0;\\n    } else if (shaderType == 2.0) {\\n        color = vec3(brightness / 4.0);\\n    } else if (shaderType == 3.0) {\\n        color = vec3(fragPos.x / 999999.0, 1.0 - fragPos.x / 999999.0, 0.5 + fragPos.y / 999999.0);\\n        color *= brightness / 4.0;\\n    }\\n \\n    gl_FragColor = vec4(color, 1.0);\\n}\";\n\n\nvar $381ef7b8281eb407$exports = {};\nclass $381ef7b8281eb407$var$Mesh {\n    constructor(points = []){\n        this.points = points;\n    }\n    push(...data) {\n        this.points.push(...data);\n    }\n}\n$381ef7b8281eb407$var$Mesh.from = function(points) {\n    return new $381ef7b8281eb407$var$Mesh(points);\n};\n$381ef7b8281eb407$var$Mesh.circleWithSides = function(sides) {\n    const mesh = new $381ef7b8281eb407$var$Mesh();\n    // Generate array of sin - cos pairs\n    for(let i = 0; i < sides; ++i){\n        const theta = i / sides * 2 * Math.PI;\n        const x = Math.sin(theta);\n        const y = Math.cos(theta);\n        const theta2 = (i + 1) / sides * 2 * Math.PI;\n        const x2 = Math.sin(theta2);\n        const y2 = Math.cos(theta2);\n        mesh.push(x, y, x2, y2, 0, 0);\n    }\n    return mesh;\n};\n$381ef7b8281eb407$exports = $381ef7b8281eb407$var$Mesh;\n\n\n/* @license twgl.js 5.5.4 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */ /*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ /**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */ let $065afaecc735fbee$var$VecType = Float32Array;\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */ /**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$setDefaultType$1(ctor) {\n    const oldType = $065afaecc735fbee$var$VecType;\n    $065afaecc735fbee$var$VecType = ctor;\n    return oldType;\n}\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$create$1(x, y, z) {\n    const dst = new $065afaecc735fbee$var$VecType(3);\n    if (x) dst[0] = x;\n    if (y) dst[1] = y;\n    if (z) dst[2] = z;\n    return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$add(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    dst[2] = a[2] + b[2];\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$subtract(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    dst[2] = a[2] - b[2];\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$lerp(a, b, t, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    dst[2] = a[2] + t * (b[2] - a[2]);\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$lerpV(a, b, t, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = a[0] + t[0] * (b[0] - a[0]);\n    dst[1] = a[1] + t[1] * (b[1] - a[1]);\n    dst[2] = a[2] + t[2] * (b[2] - a[2]);\n    return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$max(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = Math.max(a[0], b[0]);\n    dst[1] = Math.max(a[1], b[1]);\n    dst[2] = Math.max(a[2], b[2]);\n    return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$min(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = Math.min(a[0], b[0]);\n    dst[1] = Math.min(a[1], b[1]);\n    dst[2] = Math.min(a[2], b[2]);\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$mulScalar(v, k, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    dst[2] = v[2] * k;\n    return dst;\n}\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$divScalar(v, k, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    dst[2] = v[2] / k;\n    return dst;\n}\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$cross(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    const t1 = a[2] * b[0] - a[0] * b[2];\n    const t2 = a[0] * b[1] - a[1] * b[0];\n    dst[0] = a[1] * b[2] - a[2] * b[1];\n    dst[1] = t1;\n    dst[2] = t2;\n    return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$length$1(v) {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$lengthSq(v) {\n    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$distance(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$distanceSq(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    return dx * dx + dy * dy + dz * dz;\n}\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$normalize(a, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n    const len = Math.sqrt(lenSq);\n    if (len > 0.00001) {\n        dst[0] = a[0] / len;\n        dst[1] = a[1] / len;\n        dst[2] = a[2] / len;\n    } else {\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n    }\n    return dst;\n}\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$negate$1(v, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = -v[0];\n    dst[1] = -v[1];\n    dst[2] = -v[2];\n    return dst;\n}\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$copy$1(v, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = v[0];\n    dst[1] = v[1];\n    dst[2] = v[2];\n    return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$multiply$1(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = a[0] * b[0];\n    dst[1] = a[1] * b[1];\n    dst[2] = a[2] * b[2];\n    return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */ function $065afaecc735fbee$var$divide(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$VecType(3);\n    dst[0] = a[0] / b[0];\n    dst[1] = a[1] / b[1];\n    dst[2] = a[2] / b[2];\n    return dst;\n}\nvar $065afaecc735fbee$export$815b03eba529a08e = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    add: $065afaecc735fbee$var$add,\n    copy: $065afaecc735fbee$var$copy$1,\n    create: $065afaecc735fbee$var$create$1,\n    cross: $065afaecc735fbee$var$cross,\n    distance: $065afaecc735fbee$var$distance,\n    distanceSq: $065afaecc735fbee$var$distanceSq,\n    divide: $065afaecc735fbee$var$divide,\n    divScalar: $065afaecc735fbee$var$divScalar,\n    dot: $065afaecc735fbee$var$dot,\n    lerp: $065afaecc735fbee$var$lerp,\n    lerpV: $065afaecc735fbee$var$lerpV,\n    length: $065afaecc735fbee$var$length$1,\n    lengthSq: $065afaecc735fbee$var$lengthSq,\n    max: $065afaecc735fbee$var$max,\n    min: $065afaecc735fbee$var$min,\n    mulScalar: $065afaecc735fbee$var$mulScalar,\n    multiply: $065afaecc735fbee$var$multiply$1,\n    negate: $065afaecc735fbee$var$negate$1,\n    normalize: $065afaecc735fbee$var$normalize,\n    setDefaultType: $065afaecc735fbee$var$setDefaultType$1,\n    subtract: $065afaecc735fbee$var$subtract\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ /**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */ let $065afaecc735fbee$var$MatType = Float32Array;\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */ /**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$setDefaultType(ctor) {\n    const oldType = $065afaecc735fbee$var$MatType;\n    $065afaecc735fbee$var$MatType = ctor;\n    return oldType;\n}\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$negate(m, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    dst[0] = -m[0];\n    dst[1] = -m[1];\n    dst[2] = -m[2];\n    dst[3] = -m[3];\n    dst[4] = -m[4];\n    dst[5] = -m[5];\n    dst[6] = -m[6];\n    dst[7] = -m[7];\n    dst[8] = -m[8];\n    dst[9] = -m[9];\n    dst[10] = -m[10];\n    dst[11] = -m[11];\n    dst[12] = -m[12];\n    dst[13] = -m[13];\n    dst[14] = -m[14];\n    dst[15] = -m[15];\n    return dst;\n}\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$create() {\n    return new $065afaecc735fbee$var$MatType(16).fill(0);\n}\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$copy(m, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[3] = m[3];\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[7] = m[7];\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n    return dst;\n}\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$identity(dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$transpose(m, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    if (dst === m) {\n        let t;\n        t = m[1];\n        m[1] = m[4];\n        m[4] = t;\n        t = m[2];\n        m[2] = m[8];\n        m[8] = t;\n        t = m[3];\n        m[3] = m[12];\n        m[12] = t;\n        t = m[6];\n        m[6] = m[9];\n        m[9] = t;\n        t = m[7];\n        m[7] = m[13];\n        m[13] = t;\n        t = m[11];\n        m[11] = m[14];\n        m[14] = t;\n        return dst;\n    }\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    const m30 = m[12];\n    const m31 = m[13];\n    const m32 = m[14];\n    const m33 = m[15];\n    dst[0] = m00;\n    dst[1] = m10;\n    dst[2] = m20;\n    dst[3] = m30;\n    dst[4] = m01;\n    dst[5] = m11;\n    dst[6] = m21;\n    dst[7] = m31;\n    dst[8] = m02;\n    dst[9] = m12;\n    dst[10] = m22;\n    dst[11] = m32;\n    dst[12] = m03;\n    dst[13] = m13;\n    dst[14] = m23;\n    dst[15] = m33;\n    return dst;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$inverse(m, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    const m30 = m[12];\n    const m31 = m[13];\n    const m32 = m[14];\n    const m33 = m[15];\n    const tmp_0 = m22 * m33;\n    const tmp_1 = m32 * m23;\n    const tmp_2 = m12 * m33;\n    const tmp_3 = m32 * m13;\n    const tmp_4 = m12 * m23;\n    const tmp_5 = m22 * m13;\n    const tmp_6 = m02 * m33;\n    const tmp_7 = m32 * m03;\n    const tmp_8 = m02 * m23;\n    const tmp_9 = m22 * m03;\n    const tmp_10 = m02 * m13;\n    const tmp_11 = m12 * m03;\n    const tmp_12 = m20 * m31;\n    const tmp_13 = m30 * m21;\n    const tmp_14 = m10 * m31;\n    const tmp_15 = m30 * m11;\n    const tmp_16 = m10 * m21;\n    const tmp_17 = m20 * m11;\n    const tmp_18 = m00 * m31;\n    const tmp_19 = m30 * m01;\n    const tmp_20 = m00 * m21;\n    const tmp_21 = m20 * m01;\n    const tmp_22 = m00 * m11;\n    const tmp_23 = m10 * m01;\n    const t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n    const t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n    const t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n    const t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n    const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n    dst[0] = d * t0;\n    dst[1] = d * t1;\n    dst[2] = d * t2;\n    dst[3] = d * t3;\n    dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n    dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n    dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n    dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n    dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n    dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n    dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n    dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n    dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n    dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n    dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n    dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n    return dst;\n}\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$multiply(a, b, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4];\n    const a11 = a[5];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a20 = a[8];\n    const a21 = a[9];\n    const a22 = a[10];\n    const a23 = a[11];\n    const a30 = a[12];\n    const a31 = a[13];\n    const a32 = a[14];\n    const a33 = a[15];\n    const b00 = b[0];\n    const b01 = b[1];\n    const b02 = b[2];\n    const b03 = b[3];\n    const b10 = b[4];\n    const b11 = b[5];\n    const b12 = b[6];\n    const b13 = b[7];\n    const b20 = b[8];\n    const b21 = b[9];\n    const b22 = b[10];\n    const b23 = b[11];\n    const b30 = b[12];\n    const b31 = b[13];\n    const b32 = b[14];\n    const b33 = b[15];\n    dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n    dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n    dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n    dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n    dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n    dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n    dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n    dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n    dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n    dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n    dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n    dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n    dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n    dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n    dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n    dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n    return dst;\n}\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$setTranslation(a, v, dst) {\n    dst = dst || $065afaecc735fbee$var$identity();\n    if (a !== dst) {\n        dst[0] = a[0];\n        dst[1] = a[1];\n        dst[2] = a[2];\n        dst[3] = a[3];\n        dst[4] = a[4];\n        dst[5] = a[5];\n        dst[6] = a[6];\n        dst[7] = a[7];\n        dst[8] = a[8];\n        dst[9] = a[9];\n        dst[10] = a[10];\n        dst[11] = a[11];\n    }\n    dst[12] = v[0];\n    dst[13] = v[1];\n    dst[14] = v[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$getTranslation(m, dst) {\n    dst = dst || $065afaecc735fbee$var$create$1();\n    dst[0] = m[12];\n    dst[1] = m[13];\n    dst[2] = m[14];\n    return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$getAxis(m, axis, dst) {\n    dst = dst || $065afaecc735fbee$var$create$1();\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    dst[2] = m[off + 2];\n    return dst;\n}\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$setAxis(a, v, axis, dst) {\n    if (dst !== a) dst = $065afaecc735fbee$var$copy(a, dst);\n    const off = axis * 4;\n    dst[off + 0] = v[0];\n    dst[off + 1] = v[1];\n    dst[off + 2] = v[2];\n    return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n    const rangeInv = 1.0 / (zNear - zFar);\n    dst[0] = f / aspect;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = f;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = (zNear + zFar) * rangeInv;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = zNear * zFar * rangeInv * 2;\n    dst[15] = 0;\n    return dst;\n}\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$ortho(left, right, bottom, top, near, far, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    dst[0] = 2 / (right - left);\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 / (top - bottom);\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 2 / (near - far);\n    dst[11] = 0;\n    dst[12] = (right + left) / (left - right);\n    dst[13] = (top + bottom) / (bottom - top);\n    dst[14] = (far + near) / (near - far);\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$frustum(left, right, bottom, top, near, far, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const dx = right - left;\n    const dy = top - bottom;\n    const dz = near - far;\n    dst[0] = 2 * near / dx;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 * near / dy;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = (left + right) / dx;\n    dst[9] = (top + bottom) / dy;\n    dst[10] = far / dz;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = near * far / dz;\n    dst[15] = 0;\n    return dst;\n}\nlet $065afaecc735fbee$var$xAxis;\nlet $065afaecc735fbee$var$yAxis;\nlet $065afaecc735fbee$var$zAxis;\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$lookAt(eye, target, up, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    $065afaecc735fbee$var$xAxis = $065afaecc735fbee$var$xAxis || $065afaecc735fbee$var$create$1();\n    $065afaecc735fbee$var$yAxis = $065afaecc735fbee$var$yAxis || $065afaecc735fbee$var$create$1();\n    $065afaecc735fbee$var$zAxis = $065afaecc735fbee$var$zAxis || $065afaecc735fbee$var$create$1();\n    $065afaecc735fbee$var$normalize($065afaecc735fbee$var$subtract(eye, target, $065afaecc735fbee$var$zAxis), $065afaecc735fbee$var$zAxis);\n    $065afaecc735fbee$var$normalize($065afaecc735fbee$var$cross(up, $065afaecc735fbee$var$zAxis, $065afaecc735fbee$var$xAxis), $065afaecc735fbee$var$xAxis);\n    $065afaecc735fbee$var$normalize($065afaecc735fbee$var$cross($065afaecc735fbee$var$zAxis, $065afaecc735fbee$var$xAxis, $065afaecc735fbee$var$yAxis), $065afaecc735fbee$var$yAxis);\n    dst[0] = $065afaecc735fbee$var$xAxis[0];\n    dst[1] = $065afaecc735fbee$var$xAxis[1];\n    dst[2] = $065afaecc735fbee$var$xAxis[2];\n    dst[3] = 0;\n    dst[4] = $065afaecc735fbee$var$yAxis[0];\n    dst[5] = $065afaecc735fbee$var$yAxis[1];\n    dst[6] = $065afaecc735fbee$var$yAxis[2];\n    dst[7] = 0;\n    dst[8] = $065afaecc735fbee$var$zAxis[0];\n    dst[9] = $065afaecc735fbee$var$zAxis[1];\n    dst[10] = $065afaecc735fbee$var$zAxis[2];\n    dst[11] = 0;\n    dst[12] = eye[0];\n    dst[13] = eye[1];\n    dst[14] = eye[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$translation(v, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = v[0];\n    dst[13] = v[1];\n    dst[14] = v[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$translate(m, v, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    const m30 = m[12];\n    const m31 = m[13];\n    const m32 = m[14];\n    const m33 = m[15];\n    if (m !== dst) {\n        dst[0] = m00;\n        dst[1] = m01;\n        dst[2] = m02;\n        dst[3] = m03;\n        dst[4] = m10;\n        dst[5] = m11;\n        dst[6] = m12;\n        dst[7] = m13;\n        dst[8] = m20;\n        dst[9] = m21;\n        dst[10] = m22;\n        dst[11] = m23;\n    }\n    dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n    dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n    dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n    dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$rotationX(angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = c;\n    dst[6] = s;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = -s;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$rotateX(m, angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[4] = c * m10 + s * m20;\n    dst[5] = c * m11 + s * m21;\n    dst[6] = c * m12 + s * m22;\n    dst[7] = c * m13 + s * m23;\n    dst[8] = c * m20 - s * m10;\n    dst[9] = c * m21 - s * m11;\n    dst[10] = c * m22 - s * m12;\n    dst[11] = c * m23 - s * m13;\n    if (m !== dst) {\n        dst[0] = m[0];\n        dst[1] = m[1];\n        dst[2] = m[2];\n        dst[3] = m[3];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$rotationY(angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = 0;\n    dst[2] = -s;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = s;\n    dst[9] = 0;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$rotateY(m, angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 - s * m20;\n    dst[1] = c * m01 - s * m21;\n    dst[2] = c * m02 - s * m22;\n    dst[3] = c * m03 - s * m23;\n    dst[8] = c * m20 + s * m00;\n    dst[9] = c * m21 + s * m01;\n    dst[10] = c * m22 + s * m02;\n    dst[11] = c * m23 + s * m03;\n    if (m !== dst) {\n        dst[4] = m[4];\n        dst[5] = m[5];\n        dst[6] = m[6];\n        dst[7] = m[7];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$rotationZ(angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = s;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = -s;\n    dst[5] = c;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$rotateZ(m, angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 + s * m10;\n    dst[1] = c * m01 + s * m11;\n    dst[2] = c * m02 + s * m12;\n    dst[3] = c * m03 + s * m13;\n    dst[4] = c * m10 - s * m00;\n    dst[5] = c * m11 - s * m01;\n    dst[6] = c * m12 - s * m02;\n    dst[7] = c * m13 - s * m03;\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n        dst[11] = m[11];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$axisRotation(axis, angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    const n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    const oneMinusCosine = 1 - c;\n    dst[0] = xx + (1 - xx) * c;\n    dst[1] = x * y * oneMinusCosine + z * s;\n    dst[2] = x * z * oneMinusCosine - y * s;\n    dst[3] = 0;\n    dst[4] = x * y * oneMinusCosine - z * s;\n    dst[5] = yy + (1 - yy) * c;\n    dst[6] = y * z * oneMinusCosine + x * s;\n    dst[7] = 0;\n    dst[8] = x * z * oneMinusCosine + y * s;\n    dst[9] = y * z * oneMinusCosine - x * s;\n    dst[10] = zz + (1 - zz) * c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$axisRotate(m, axis, angleInRadians, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    const n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    const oneMinusCosine = 1 - c;\n    const r00 = xx + (1 - xx) * c;\n    const r01 = x * y * oneMinusCosine + z * s;\n    const r02 = x * z * oneMinusCosine - y * s;\n    const r10 = x * y * oneMinusCosine - z * s;\n    const r11 = yy + (1 - yy) * c;\n    const r12 = y * z * oneMinusCosine + x * s;\n    const r20 = x * z * oneMinusCosine + y * s;\n    const r21 = y * z * oneMinusCosine - x * s;\n    const r22 = zz + (1 - zz) * c;\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n    dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n    dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n    dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n    dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n    dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n    dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n    dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n    dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n    dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n    dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n    dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n    if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$scaling(v, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    dst[0] = v[0];\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = v[1];\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = v[2];\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$scale(m, v, dst) {\n    dst = dst || new $065afaecc735fbee$var$MatType(16);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * m[0];\n    dst[1] = v0 * m[1];\n    dst[2] = v0 * m[2];\n    dst[3] = v0 * m[3];\n    dst[4] = v1 * m[4];\n    dst[5] = v1 * m[5];\n    dst[6] = v1 * m[6];\n    dst[7] = v1 * m[7];\n    dst[8] = v2 * m[8];\n    dst[9] = v2 * m[9];\n    dst[10] = v2 * m[10];\n    dst[11] = v2 * m[11];\n    if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$transformPoint(m, v, dst) {\n    dst = dst || $065afaecc735fbee$var$create$1();\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const d = v0 * m[3] + v1 * m[7] + v2 * m[11] + m[15];\n    dst[0] = (v0 * m[0] + v1 * m[4] + v2 * m[8] + m[12]) / d;\n    dst[1] = (v0 * m[1] + v1 * m[5] + v2 * m[9] + m[13]) / d;\n    dst[2] = (v0 * m[2] + v1 * m[6] + v2 * m[10] + m[14]) / d;\n    return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$transformDirection(m, v, dst) {\n    dst = dst || $065afaecc735fbee$var$create$1();\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * m[0] + v1 * m[4] + v2 * m[8];\n    dst[1] = v0 * m[1] + v1 * m[5] + v2 * m[9];\n    dst[2] = v0 * m[2] + v1 * m[6] + v2 * m[10];\n    return dst;\n}\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */ function $065afaecc735fbee$var$transformNormal$1(m, v, dst) {\n    dst = dst || $065afaecc735fbee$var$create$1();\n    const mi = $065afaecc735fbee$var$inverse(m);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * mi[0] + v1 * mi[1] + v2 * mi[2];\n    dst[1] = v0 * mi[4] + v1 * mi[5] + v2 * mi[6];\n    dst[2] = v0 * mi[8] + v1 * mi[9] + v2 * mi[10];\n    return dst;\n}\nvar $065afaecc735fbee$export$e318184adb044c73 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    axisRotate: $065afaecc735fbee$var$axisRotate,\n    axisRotation: $065afaecc735fbee$var$axisRotation,\n    copy: $065afaecc735fbee$var$copy,\n    create: $065afaecc735fbee$var$create,\n    frustum: $065afaecc735fbee$var$frustum,\n    getAxis: $065afaecc735fbee$var$getAxis,\n    getTranslation: $065afaecc735fbee$var$getTranslation,\n    identity: $065afaecc735fbee$var$identity,\n    inverse: $065afaecc735fbee$var$inverse,\n    lookAt: $065afaecc735fbee$var$lookAt,\n    multiply: $065afaecc735fbee$var$multiply,\n    negate: $065afaecc735fbee$var$negate,\n    ortho: $065afaecc735fbee$var$ortho,\n    perspective: $065afaecc735fbee$var$perspective,\n    rotateX: $065afaecc735fbee$var$rotateX,\n    rotateY: $065afaecc735fbee$var$rotateY,\n    rotateZ: $065afaecc735fbee$var$rotateZ,\n    rotationX: $065afaecc735fbee$var$rotationX,\n    rotationY: $065afaecc735fbee$var$rotationY,\n    rotationZ: $065afaecc735fbee$var$rotationZ,\n    scale: $065afaecc735fbee$var$scale,\n    scaling: $065afaecc735fbee$var$scaling,\n    setAxis: $065afaecc735fbee$var$setAxis,\n    setDefaultType: $065afaecc735fbee$var$setDefaultType,\n    setTranslation: $065afaecc735fbee$var$setTranslation,\n    transformDirection: $065afaecc735fbee$var$transformDirection,\n    transformNormal: $065afaecc735fbee$var$transformNormal$1,\n    transformPoint: $065afaecc735fbee$var$transformPoint,\n    translate: $065afaecc735fbee$var$translate,\n    translation: $065afaecc735fbee$var$translation,\n    transpose: $065afaecc735fbee$var$transpose\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ /* DataType */ const $065afaecc735fbee$var$BYTE$2 = 0x1400;\nconst $065afaecc735fbee$var$UNSIGNED_BYTE$3 = 0x1401;\nconst $065afaecc735fbee$var$SHORT$2 = 0x1402;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT$3 = 0x1403;\nconst $065afaecc735fbee$var$INT$3 = 0x1404;\nconst $065afaecc735fbee$var$UNSIGNED_INT$3 = 0x1405;\nconst $065afaecc735fbee$var$FLOAT$3 = 0x1406;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT_5_6_5$1 = 0x8363;\nconst $065afaecc735fbee$var$HALF_FLOAT$1 = 0x140B;\nconst $065afaecc735fbee$var$UNSIGNED_INT_2_10_10_10_REV$1 = 0x8368;\nconst $065afaecc735fbee$var$UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst $065afaecc735fbee$var$UNSIGNED_INT_5_9_9_9_REV$1 = 0x8C3E;\nconst $065afaecc735fbee$var$FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst $065afaecc735fbee$var$UNSIGNED_INT_24_8$1 = 0x84FA;\nconst $065afaecc735fbee$var$glTypeToTypedArray = {};\n{\n    const tt = $065afaecc735fbee$var$glTypeToTypedArray;\n    tt[$065afaecc735fbee$var$BYTE$2] = Int8Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_BYTE$3] = Uint8Array;\n    tt[$065afaecc735fbee$var$SHORT$2] = Int16Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_SHORT$3] = Uint16Array;\n    tt[$065afaecc735fbee$var$INT$3] = Int32Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_INT$3] = Uint32Array;\n    tt[$065afaecc735fbee$var$FLOAT$3] = Float32Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_SHORT_4_4_4_4$1] = Uint16Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_SHORT_5_5_5_1$1] = Uint16Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_SHORT_5_6_5$1] = Uint16Array;\n    tt[$065afaecc735fbee$var$HALF_FLOAT$1] = Uint16Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_INT_2_10_10_10_REV$1] = Uint32Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_INT_10F_11F_11F_REV$1] = Uint32Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_INT_5_9_9_9_REV$1] = Uint32Array;\n    tt[$065afaecc735fbee$var$FLOAT_32_UNSIGNED_INT_24_8_REV$1] = Uint32Array;\n    tt[$065afaecc735fbee$var$UNSIGNED_INT_24_8$1] = Uint32Array;\n}/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */ function $065afaecc735fbee$export$bddf845047a0e959(typedArray) {\n    if (typedArray instanceof Int8Array) return $065afaecc735fbee$var$BYTE$2;\n     // eslint-disable-line\n    if (typedArray instanceof Uint8Array) return $065afaecc735fbee$var$UNSIGNED_BYTE$3;\n     // eslint-disable-line\n    if (typedArray instanceof Uint8ClampedArray) return $065afaecc735fbee$var$UNSIGNED_BYTE$3;\n     // eslint-disable-line\n    if (typedArray instanceof Int16Array) return $065afaecc735fbee$var$SHORT$2;\n     // eslint-disable-line\n    if (typedArray instanceof Uint16Array) return $065afaecc735fbee$var$UNSIGNED_SHORT$3;\n     // eslint-disable-line\n    if (typedArray instanceof Int32Array) return $065afaecc735fbee$var$INT$3;\n     // eslint-disable-line\n    if (typedArray instanceof Uint32Array) return $065afaecc735fbee$var$UNSIGNED_INT$3;\n     // eslint-disable-line\n    if (typedArray instanceof Float32Array) return $065afaecc735fbee$var$FLOAT$3;\n     // eslint-disable-line\n    throw new Error(\"unsupported typed array type\");\n}\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */ function $065afaecc735fbee$export$9546290c15d36fce(typedArrayType) {\n    if (typedArrayType === Int8Array) return $065afaecc735fbee$var$BYTE$2;\n     // eslint-disable-line\n    if (typedArrayType === Uint8Array) return $065afaecc735fbee$var$UNSIGNED_BYTE$3;\n     // eslint-disable-line\n    if (typedArrayType === Uint8ClampedArray) return $065afaecc735fbee$var$UNSIGNED_BYTE$3;\n     // eslint-disable-line\n    if (typedArrayType === Int16Array) return $065afaecc735fbee$var$SHORT$2;\n     // eslint-disable-line\n    if (typedArrayType === Uint16Array) return $065afaecc735fbee$var$UNSIGNED_SHORT$3;\n     // eslint-disable-line\n    if (typedArrayType === Int32Array) return $065afaecc735fbee$var$INT$3;\n     // eslint-disable-line\n    if (typedArrayType === Uint32Array) return $065afaecc735fbee$var$UNSIGNED_INT$3;\n     // eslint-disable-line\n    if (typedArrayType === Float32Array) return $065afaecc735fbee$var$FLOAT$3;\n     // eslint-disable-line\n    throw new Error(\"unsupported typed array type\");\n}\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */ function $065afaecc735fbee$export$3dc63662699923fc(type) {\n    const CTOR = $065afaecc735fbee$var$glTypeToTypedArray[type];\n    if (!CTOR) throw new Error(\"unknown gl type\");\n    return CTOR;\n}\nconst $065afaecc735fbee$export$9dd3754ae86f0017 = typeof SharedArrayBuffer !== \"undefined\" ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n} : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n};\nvar $065afaecc735fbee$export$f3712bedb282625f = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    getGLTypeForTypedArray: $065afaecc735fbee$export$bddf845047a0e959,\n    getGLTypeForTypedArrayType: $065afaecc735fbee$export$9546290c15d36fce,\n    getTypedArrayTypeForGLType: $065afaecc735fbee$export$3dc63662699923fc,\n    isArrayBuffer: $065afaecc735fbee$export$9dd3754ae86f0017\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ /* eslint no-console: \"off\" */ /**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */ function $065afaecc735fbee$var$copyNamedProperties(names, src, dst) {\n    names.forEach(function(name) {\n        const value = src[name];\n        if (value !== undefined) dst[name] = value;\n    });\n}\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */ function $065afaecc735fbee$var$copyExistingProperties(src, dst) {\n    Object.keys(dst).forEach(function(key) {\n        if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) dst[key] = src[key];\n    });\n}\nfunction $065afaecc735fbee$var$error$1(...args) {\n    console.error(...args);\n}\nfunction $065afaecc735fbee$var$warn$1(...args) {\n    console.warn(...args);\n}\nconst $065afaecc735fbee$var$isTypeWeakMaps = new Map();\nfunction $065afaecc735fbee$var$isType(object, type) {\n    if (!object || typeof object !== \"object\") return false;\n    let weakMap = $065afaecc735fbee$var$isTypeWeakMaps.get(type);\n    if (!weakMap) {\n        weakMap = new WeakMap();\n        $065afaecc735fbee$var$isTypeWeakMaps.set(type, weakMap);\n    }\n    let isOfType = weakMap.get(object);\n    if (isOfType === undefined) {\n        const s = Object.prototype.toString.call(object);\n        isOfType = s.substring(8, s.length - 1) === type;\n        weakMap.set(object, isOfType);\n    }\n    return isOfType;\n}\nfunction $065afaecc735fbee$var$isBuffer(gl, t) {\n    return typeof WebGLBuffer !== \"undefined\" && $065afaecc735fbee$var$isType(t, \"WebGLBuffer\");\n}\nfunction $065afaecc735fbee$var$isRenderbuffer(gl, t) {\n    return typeof WebGLRenderbuffer !== \"undefined\" && $065afaecc735fbee$var$isType(t, \"WebGLRenderbuffer\");\n}\nfunction $065afaecc735fbee$var$isTexture(gl, t) {\n    return typeof WebGLTexture !== \"undefined\" && $065afaecc735fbee$var$isType(t, \"WebGLTexture\");\n}\nfunction $065afaecc735fbee$var$isSampler(gl, t) {\n    return typeof WebGLSampler !== \"undefined\" && $065afaecc735fbee$var$isType(t, \"WebGLSampler\");\n}\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ const $065afaecc735fbee$var$STATIC_DRAW = 0x88e4;\nconst $065afaecc735fbee$var$ARRAY_BUFFER$1 = 0x8892;\nconst $065afaecc735fbee$var$ELEMENT_ARRAY_BUFFER$2 = 0x8893;\nconst $065afaecc735fbee$var$BUFFER_SIZE = 0x8764;\nconst $065afaecc735fbee$var$BYTE$1 = 0x1400;\nconst $065afaecc735fbee$var$UNSIGNED_BYTE$2 = 0x1401;\nconst $065afaecc735fbee$var$SHORT$1 = 0x1402;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT$2 = 0x1403;\nconst $065afaecc735fbee$var$INT$2 = 0x1404;\nconst $065afaecc735fbee$var$UNSIGNED_INT$2 = 0x1405;\nconst $065afaecc735fbee$var$FLOAT$2 = 0x1406;\nconst $065afaecc735fbee$var$defaults$2 = {\n    attribPrefix: \"\"\n};\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */ function $065afaecc735fbee$export$8a79157a77253422(prefix) {\n    $065afaecc735fbee$var$defaults$2.attribPrefix = prefix;\n}\nfunction $065afaecc735fbee$export$81400a733c5c400b(newDefaults) {\n    $065afaecc735fbee$var$copyExistingProperties(newDefaults, $065afaecc735fbee$var$defaults$2);\n}\nfunction $065afaecc735fbee$var$setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n    gl.bindBuffer(type, buffer);\n    gl.bufferData(type, array, drawType || $065afaecc735fbee$var$STATIC_DRAW);\n}\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */ function $065afaecc735fbee$export$6ea00fe9d038b3f9(gl, typedArray, type, drawType) {\n    if ($065afaecc735fbee$var$isBuffer(gl, typedArray)) return typedArray;\n    type = type || $065afaecc735fbee$var$ARRAY_BUFFER$1;\n    const buffer = gl.createBuffer();\n    $065afaecc735fbee$var$setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n    return buffer;\n}\nfunction $065afaecc735fbee$var$isIndices(name) {\n    return name === \"indices\";\n}\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction $065afaecc735fbee$var$getNormalizationForTypedArrayType(typedArrayType) {\n    if (typedArrayType === Int8Array) return true;\n     // eslint-disable-line\n    if (typedArrayType === Uint8Array) return true;\n     // eslint-disable-line\n    return false;\n}\nfunction $065afaecc735fbee$export$251e3bdee27f62a4(array) {\n    return array.length ? array : array.data;\n}\nconst $065afaecc735fbee$var$texcoordRE = /coord|texture/i;\nconst $065afaecc735fbee$var$colorRE = /color|colour/i;\nfunction $065afaecc735fbee$var$guessNumComponentsFromName(name, length1) {\n    let numComponents;\n    if ($065afaecc735fbee$var$texcoordRE.test(name)) numComponents = 2;\n    else if ($065afaecc735fbee$var$colorRE.test(name)) numComponents = 4;\n    else numComponents = 3; // position, normals, indices ...\n    if (length1 % numComponents > 0) throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length1} values is not evenly divisible by ${numComponents}. You should specify it.`);\n    return numComponents;\n}\nfunction $065afaecc735fbee$export$bfceede8dab24cbd(array, arrayName, numValues) {\n    return array.numComponents || array.size || $065afaecc735fbee$var$guessNumComponentsFromName(arrayName, numValues || $065afaecc735fbee$export$251e3bdee27f62a4(array).length);\n}\nfunction $065afaecc735fbee$var$makeTypedArray(array, name) {\n    if ($065afaecc735fbee$export$9dd3754ae86f0017(array)) return array;\n    if ($065afaecc735fbee$export$9dd3754ae86f0017(array.data)) return array.data;\n    if (Array.isArray(array)) array = {\n        data: array\n    };\n    let Type = array.type ? $065afaecc735fbee$var$typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\n    if (!Type) {\n        if ($065afaecc735fbee$var$isIndices(name)) Type = Uint16Array;\n        else Type = Float32Array;\n    }\n    return new Type(array.data);\n}\nfunction $065afaecc735fbee$var$glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\n    return typeof glTypeOrTypedArrayCtor === \"number\" ? glTypeOrTypedArrayCtor : glTypeOrTypedArrayCtor ? $065afaecc735fbee$export$9546290c15d36fce(glTypeOrTypedArrayCtor) : $065afaecc735fbee$var$FLOAT$2;\n}\nfunction $065afaecc735fbee$var$typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\n    return typeof glTypeOrTypedArrayCtor === \"number\" ? $065afaecc735fbee$export$3dc63662699923fc(glTypeOrTypedArrayCtor) : glTypeOrTypedArrayCtor || Float32Array;\n}\nfunction $065afaecc735fbee$var$attribBufferFromBuffer(gl, array /*, arrayName */ ) {\n    return {\n        buffer: array.buffer,\n        numValues: 24,\n        type: $065afaecc735fbee$var$glTypeFromGLTypeOrTypedArrayType(array.type),\n        arrayType: $065afaecc735fbee$var$typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type)\n    };\n}\nfunction $065afaecc735fbee$var$attribBufferFromSize(gl, array /*, arrayName*/ ) {\n    const numValues = array.data || array;\n    const arrayType = $065afaecc735fbee$var$typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\n    const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER$1, buffer);\n    gl.bufferData($065afaecc735fbee$var$ARRAY_BUFFER$1, numBytes, array.drawType || $065afaecc735fbee$var$STATIC_DRAW);\n    return {\n        buffer: buffer,\n        numValues: numValues,\n        type: $065afaecc735fbee$export$9546290c15d36fce(arrayType),\n        arrayType: arrayType\n    };\n}\nfunction $065afaecc735fbee$var$attribBufferFromArrayLike(gl, array, arrayName) {\n    const typedArray = $065afaecc735fbee$var$makeTypedArray(array, arrayName);\n    return {\n        arrayType: typedArray.constructor,\n        buffer: $065afaecc735fbee$export$6ea00fe9d038b3f9(gl, typedArray, undefined, array.drawType),\n        type: $065afaecc735fbee$export$bddf845047a0e959(typedArray),\n        numValues: 0\n    };\n}\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */ /**\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\n */ /**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */ /**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */ /**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */ /**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */ function $065afaecc735fbee$export$df835e2df67be3fe(gl, arrays) {\n    const attribs = {};\n    Object.keys(arrays).forEach(function(arrayName) {\n        if (!$065afaecc735fbee$var$isIndices(arrayName)) {\n            const array = arrays[arrayName];\n            const attribName = array.attrib || array.name || array.attribName || $065afaecc735fbee$var$defaults$2.attribPrefix + arrayName;\n            if (array.value) {\n                if (!Array.isArray(array.value) && !$065afaecc735fbee$export$9dd3754ae86f0017(array.value)) throw new Error(\"array.value is not array or typedarray\");\n                attribs[attribName] = {\n                    value: array.value\n                };\n            } else {\n                let fn;\n                if (array.buffer && array.buffer instanceof WebGLBuffer) fn = $065afaecc735fbee$var$attribBufferFromBuffer;\n                else if (typeof array === \"number\" || typeof array.data === \"number\") fn = $065afaecc735fbee$var$attribBufferFromSize;\n                else fn = $065afaecc735fbee$var$attribBufferFromArrayLike;\n                const { buffer: buffer, type: type, numValues: numValues, arrayType: arrayType } = fn(gl, array, arrayName);\n                const normalization = array.normalize !== undefined ? array.normalize : $065afaecc735fbee$var$getNormalizationForTypedArrayType(arrayType);\n                const numComponents = $065afaecc735fbee$export$bfceede8dab24cbd(array, arrayName, numValues);\n                attribs[attribName] = {\n                    buffer: buffer,\n                    numComponents: numComponents,\n                    type: type,\n                    normalize: normalization,\n                    stride: array.stride || 0,\n                    offset: array.offset || 0,\n                    divisor: array.divisor === undefined ? undefined : array.divisor,\n                    drawType: array.drawType\n                };\n            }\n        }\n    });\n    gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER$1, null);\n    return attribs;\n}\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */ function $065afaecc735fbee$export$22dc7d5fce8749be(gl, attribInfo, array, offset) {\n    array = $065afaecc735fbee$var$makeTypedArray(array);\n    if (offset !== undefined) {\n        gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER$1, attribInfo.buffer);\n        gl.bufferSubData($065afaecc735fbee$var$ARRAY_BUFFER$1, offset, array);\n    } else $065afaecc735fbee$var$setBufferFromTypedArray(gl, $065afaecc735fbee$var$ARRAY_BUFFER$1, attribInfo.buffer, array, attribInfo.drawType);\n}\nfunction $065afaecc735fbee$var$getBytesPerValueForGLType(gl, type) {\n    if (type === $065afaecc735fbee$var$BYTE$1) return 1; // eslint-disable-line\n    if (type === $065afaecc735fbee$var$UNSIGNED_BYTE$2) return 1; // eslint-disable-line\n    if (type === $065afaecc735fbee$var$SHORT$1) return 2; // eslint-disable-line\n    if (type === $065afaecc735fbee$var$UNSIGNED_SHORT$2) return 2; // eslint-disable-line\n    if (type === $065afaecc735fbee$var$INT$2) return 4; // eslint-disable-line\n    if (type === $065afaecc735fbee$var$UNSIGNED_INT$2) return 4; // eslint-disable-line\n    if (type === $065afaecc735fbee$var$FLOAT$2) return 4; // eslint-disable-line\n    return 0;\n}\n// Tries to get the number of elements from a set of arrays.\nconst $065afaecc735fbee$var$positionKeys = [\n    \"position\",\n    \"positions\",\n    \"a_position\"\n];\nfunction $065afaecc735fbee$var$getNumElementsFromNonIndexedArrays(arrays) {\n    let key;\n    let ii;\n    for(ii = 0; ii < $065afaecc735fbee$var$positionKeys.length; ++ii){\n        key = $065afaecc735fbee$var$positionKeys[ii];\n        if (key in arrays) break;\n    }\n    if (ii === $065afaecc735fbee$var$positionKeys.length) key = Object.keys(arrays)[0];\n    const array = arrays[key];\n    const length1 = $065afaecc735fbee$export$251e3bdee27f62a4(array).length;\n    if (length1 === undefined) return 1; // There's no arrays\n    const numComponents = $065afaecc735fbee$export$bfceede8dab24cbd(array, key);\n    const numElements = length1 / numComponents;\n    if (length1 % numComponents > 0) throw new Error(`numComponents ${numComponents} not correct for length ${length1}`);\n    return numElements;\n}\nfunction $065afaecc735fbee$var$getNumElementsFromAttributes(gl, attribs) {\n    let key;\n    let ii;\n    for(ii = 0; ii < $065afaecc735fbee$var$positionKeys.length; ++ii){\n        key = $065afaecc735fbee$var$positionKeys[ii];\n        if (key in attribs) break;\n        key = $065afaecc735fbee$var$defaults$2.attribPrefix + key;\n        if (key in attribs) break;\n    }\n    if (ii === $065afaecc735fbee$var$positionKeys.length) key = Object.keys(attribs)[0];\n    const attrib = attribs[key];\n    if (!attrib.buffer) return 1; // There's no buffer\n    gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER$1, attrib.buffer);\n    const numBytes = gl.getBufferParameter($065afaecc735fbee$var$ARRAY_BUFFER$1, $065afaecc735fbee$var$BUFFER_SIZE);\n    gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER$1, null);\n    const bytesPerValue = $065afaecc735fbee$var$getBytesPerValueForGLType(gl, attrib.type);\n    const totalElements = numBytes / bytesPerValue;\n    const numComponents = attrib.numComponents || attrib.size;\n    // TODO: check stride\n    const numElements = totalElements / numComponents;\n    if (numElements % 1 !== 0) throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n    return numElements;\n}\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */ /**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */ function $065afaecc735fbee$export$140f5b0225138840(gl, arrays, srcBufferInfo) {\n    const newAttribs = $065afaecc735fbee$export$df835e2df67be3fe(gl, arrays);\n    const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n    bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n    const indices = arrays.indices;\n    if (indices) {\n        const newIndices = $065afaecc735fbee$var$makeTypedArray(indices, \"indices\");\n        bufferInfo.indices = $065afaecc735fbee$export$6ea00fe9d038b3f9(gl, newIndices, $065afaecc735fbee$var$ELEMENT_ARRAY_BUFFER$2);\n        bufferInfo.numElements = newIndices.length;\n        bufferInfo.elementType = $065afaecc735fbee$export$bddf845047a0e959(newIndices);\n    } else if (!bufferInfo.numElements) bufferInfo.numElements = $065afaecc735fbee$var$getNumElementsFromAttributes(gl, bufferInfo.attribs);\n    return bufferInfo;\n}\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */ function $065afaecc735fbee$export$2750db2b7c74f6a0(gl, array, arrayName) {\n    const type = arrayName === \"indices\" ? $065afaecc735fbee$var$ELEMENT_ARRAY_BUFFER$2 : $065afaecc735fbee$var$ARRAY_BUFFER$1;\n    const typedArray = $065afaecc735fbee$var$makeTypedArray(array, arrayName);\n    return $065afaecc735fbee$export$6ea00fe9d038b3f9(gl, typedArray, type);\n}\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */ function $065afaecc735fbee$export$69d8acce17089372(gl, arrays) {\n    const buffers = {};\n    Object.keys(arrays).forEach(function(key) {\n        buffers[key] = $065afaecc735fbee$export$2750db2b7c74f6a0(gl, arrays[key], key);\n    });\n    // Ugh!\n    if (arrays.indices) {\n        buffers.numElements = arrays.indices.length;\n        buffers.elementType = $065afaecc735fbee$export$bddf845047a0e959($065afaecc735fbee$var$makeTypedArray(arrays.indices));\n    } else buffers.numElements = $065afaecc735fbee$var$getNumElementsFromNonIndexedArrays(arrays);\n    return buffers;\n}\nvar $065afaecc735fbee$export$16bd37df0047a29c = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createAttribsFromArrays: $065afaecc735fbee$export$df835e2df67be3fe,\n    createBuffersFromArrays: $065afaecc735fbee$export$69d8acce17089372,\n    createBufferFromArray: $065afaecc735fbee$export$2750db2b7c74f6a0,\n    createBufferFromTypedArray: $065afaecc735fbee$export$6ea00fe9d038b3f9,\n    createBufferInfoFromArrays: $065afaecc735fbee$export$140f5b0225138840,\n    setAttribInfoBufferFromArray: $065afaecc735fbee$export$22dc7d5fce8749be,\n    setAttributePrefix: $065afaecc735fbee$export$8a79157a77253422,\n    setAttributeDefaults_: $065afaecc735fbee$export$81400a733c5c400b,\n    getNumComponents_: $065afaecc735fbee$export$bfceede8dab24cbd,\n    getArray_: $065afaecc735fbee$export$251e3bdee27f62a4\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ const $065afaecc735fbee$var$getArray = $065afaecc735fbee$export$251e3bdee27f62a4; // eslint-disable-line\nconst $065afaecc735fbee$var$getNumComponents = $065afaecc735fbee$export$bfceede8dab24cbd; // eslint-disable-line\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */ /**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */ function $065afaecc735fbee$var$augmentTypedArray(typedArray, numComponents) {\n    let cursor = 0;\n    typedArray.push = function() {\n        for(let ii = 0; ii < arguments.length; ++ii){\n            const value = arguments[ii];\n            if (value instanceof Array || $065afaecc735fbee$export$9dd3754ae86f0017(value)) for(let jj = 0; jj < value.length; ++jj)typedArray[cursor++] = value[jj];\n            else typedArray[cursor++] = value;\n        }\n    };\n    typedArray.reset = function(opt_index) {\n        cursor = opt_index || 0;\n    };\n    typedArray.numComponents = numComponents;\n    Object.defineProperty(typedArray, \"numElements\", {\n        get: function() {\n            return this.length / this.numComponents | 0;\n        }\n    });\n    return typedArray;\n}\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createAugmentedTypedArray(numComponents, numElements, opt_type) {\n    const Type = opt_type || Float32Array;\n    return $065afaecc735fbee$var$augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\nfunction $065afaecc735fbee$var$allButIndices(name) {\n    return name !== \"indices\";\n}\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$deindexVertices(vertices) {\n    const indices = vertices.indices;\n    const newVertices = {};\n    const numElements = indices.length;\n    function expandToUnindexed(channel) {\n        const srcBuffer = vertices[channel];\n        const numComponents = srcBuffer.numComponents;\n        const dstBuffer = $065afaecc735fbee$var$createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n        for(let ii = 0; ii < numElements; ++ii){\n            const ndx = indices[ii];\n            const offset = ndx * numComponents;\n            for(let jj = 0; jj < numComponents; ++jj)dstBuffer.push(srcBuffer[offset + jj]);\n        }\n        newVertices[channel] = dstBuffer;\n    }\n    Object.keys(vertices).filter($065afaecc735fbee$var$allButIndices).forEach(expandToUnindexed);\n    return newVertices;\n}\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$flattenNormals(vertices) {\n    if (vertices.indices) throw new Error(\"can not flatten normals of indexed vertices. deindex them first\");\n    const normals = vertices.normal;\n    const numNormals = normals.length;\n    for(let ii = 0; ii < numNormals; ii += 9){\n        // pull out the 3 normals for this triangle\n        const nax = normals[ii + 0];\n        const nay = normals[ii + 1];\n        const naz = normals[ii + 2];\n        const nbx = normals[ii + 3];\n        const nby = normals[ii + 4];\n        const nbz = normals[ii + 5];\n        const ncx = normals[ii + 6];\n        const ncy = normals[ii + 7];\n        const ncz = normals[ii + 8];\n        // add them\n        let nx = nax + nbx + ncx;\n        let ny = nay + nby + ncy;\n        let nz = naz + nbz + ncz;\n        // normalize them\n        const length1 = Math.sqrt(nx * nx + ny * ny + nz * nz);\n        nx /= length1;\n        ny /= length1;\n        nz /= length1;\n        // copy them back in\n        normals[ii + 0] = nx;\n        normals[ii + 1] = ny;\n        normals[ii + 2] = nz;\n        normals[ii + 3] = nx;\n        normals[ii + 4] = ny;\n        normals[ii + 5] = nz;\n        normals[ii + 6] = nx;\n        normals[ii + 7] = ny;\n        normals[ii + 8] = nz;\n    }\n    return vertices;\n}\nfunction $065afaecc735fbee$var$applyFuncToV3Array(array, matrix, fn) {\n    const len = array.length;\n    const tmp = new Float32Array(3);\n    for(let ii = 0; ii < len; ii += 3){\n        fn(matrix, [\n            array[ii],\n            array[ii + 1],\n            array[ii + 2]\n        ], tmp);\n        array[ii] = tmp[0];\n        array[ii + 1] = tmp[1];\n        array[ii + 2] = tmp[2];\n    }\n}\nfunction $065afaecc735fbee$var$transformNormal(mi, v, dst) {\n    dst = dst || $065afaecc735fbee$var$create$1();\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * mi[0] + v1 * mi[1] + v2 * mi[2];\n    dst[1] = v0 * mi[4] + v1 * mi[5] + v2 * mi[6];\n    dst[2] = v0 * mi[8] + v1 * mi[9] + v2 * mi[10];\n    return dst;\n}\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$reorientDirections(array, matrix) {\n    $065afaecc735fbee$var$applyFuncToV3Array(array, matrix, $065afaecc735fbee$var$transformDirection);\n    return array;\n}\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$reorientNormals(array, matrix) {\n    $065afaecc735fbee$var$applyFuncToV3Array(array, $065afaecc735fbee$var$inverse(matrix), $065afaecc735fbee$var$transformNormal);\n    return array;\n}\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$reorientPositions(array, matrix) {\n    $065afaecc735fbee$var$applyFuncToV3Array(array, matrix, $065afaecc735fbee$var$transformPoint);\n    return array;\n}\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */ /**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$reorientVertices(arrays, matrix) {\n    Object.keys(arrays).forEach(function(name) {\n        const array = arrays[name];\n        if (name.indexOf(\"pos\") >= 0) $065afaecc735fbee$var$reorientPositions(array, matrix);\n        else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) $065afaecc735fbee$var$reorientDirections(array, matrix);\n        else if (name.indexOf(\"norm\") >= 0) $065afaecc735fbee$var$reorientNormals(array, matrix);\n    });\n    return arrays;\n}\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */ /**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */ /**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createXYQuadVertices(size, xOffset, yOffset) {\n    size = size || 2;\n    xOffset = xOffset || 0;\n    yOffset = yOffset || 0;\n    size *= 0.5;\n    return {\n        position: {\n            numComponents: 2,\n            data: [\n                xOffset + -1 * size,\n                yOffset + -1 * size,\n                xOffset + 1 * size,\n                yOffset + -1 * size,\n                xOffset + -1 * size,\n                yOffset + 1 * size,\n                xOffset + 1 * size,\n                yOffset + 1 * size\n            ]\n        },\n        normal: [\n            0,\n            0,\n            1,\n            0,\n            0,\n            1,\n            0,\n            0,\n            1,\n            0,\n            0,\n            1\n        ],\n        texcoord: [\n            0,\n            0,\n            1,\n            0,\n            0,\n            1,\n            1,\n            1\n        ],\n        indices: [\n            0,\n            1,\n            2,\n            2,\n            1,\n            3\n        ]\n    };\n}\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */ /**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */ /**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {\n    width = width || 1;\n    depth = depth || 1;\n    subdivisionsWidth = subdivisionsWidth || 1;\n    subdivisionsDepth = subdivisionsDepth || 1;\n    matrix = matrix || $065afaecc735fbee$var$identity();\n    const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n    const positions = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const normals = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const texcoords = $065afaecc735fbee$var$createAugmentedTypedArray(2, numVertices);\n    for(let z = 0; z <= subdivisionsDepth; z++)for(let x = 0; x <= subdivisionsWidth; x++){\n        const u = x / subdivisionsWidth;\n        const v = z / subdivisionsDepth;\n        positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);\n        normals.push(0, 1, 0);\n        texcoords.push(u, v);\n    }\n    const numVertsAcross = subdivisionsWidth + 1;\n    const indices = $065afaecc735fbee$var$createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n    for(let z = 0; z < subdivisionsDepth; z++)for(let x = 0; x < subdivisionsWidth; x++){\n        // Make triangle 1 of quad.\n        indices.push((z + 0) * numVertsAcross + x, (z + 1) * numVertsAcross + x, (z + 0) * numVertsAcross + x + 1);\n        // Make triangle 2 of quad.\n        indices.push((z + 1) * numVertsAcross + x, (z + 1) * numVertsAcross + x + 1, (z + 0) * numVertsAcross + x + 1);\n    }\n    const arrays = $065afaecc735fbee$var$reorientVertices({\n        position: positions,\n        normal: normals,\n        texcoord: texcoords,\n        indices: indices\n    }, matrix);\n    return arrays;\n}\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */ /**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */ /**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {\n    if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) throw new Error(\"subdivisionAxis and subdivisionHeight must be > 0\");\n    opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n    opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n    opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n    opt_endLongitudeInRadians = opt_endLongitudeInRadians || Math.PI * 2;\n    const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n    const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n    // We are going to generate our sphere by iterating through its\n    // spherical coordinates and generating 2 triangles for each quad on a\n    // ring of the sphere.\n    const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n    const positions = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const normals = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const texcoords = $065afaecc735fbee$var$createAugmentedTypedArray(2, numVertices);\n    // Generate the individual vertices in our vertex buffer.\n    for(let y = 0; y <= subdivisionsHeight; y++)for(let x = 0; x <= subdivisionsAxis; x++){\n        // Generate a vertex based on its spherical coordinates\n        const u = x / subdivisionsAxis;\n        const v = y / subdivisionsHeight;\n        const theta = longRange * u + opt_startLongitudeInRadians;\n        const phi = latRange * v + opt_startLatitudeInRadians;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n        const ux = cosTheta * sinPhi;\n        const uy = cosPhi;\n        const uz = sinTheta * sinPhi;\n        positions.push(radius * ux, radius * uy, radius * uz);\n        normals.push(ux, uy, uz);\n        texcoords.push(1 - u, v);\n    }\n    const numVertsAround = subdivisionsAxis + 1;\n    const indices = $065afaecc735fbee$var$createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n    for(let x = 0; x < subdivisionsAxis; x++)for(let y = 0; y < subdivisionsHeight; y++){\n        // Make triangle 1 of quad.\n        indices.push((y + 0) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x);\n        // Make triangle 2 of quad.\n        indices.push((y + 1) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x + 1);\n    }\n    return {\n        position: positions,\n        normal: normals,\n        texcoord: texcoords,\n        indices: indices\n    };\n}\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */ const $065afaecc735fbee$var$CUBE_FACE_INDICES = [\n    [\n        3,\n        7,\n        5,\n        1\n    ],\n    [\n        6,\n        2,\n        0,\n        4\n    ],\n    [\n        6,\n        7,\n        3,\n        2\n    ],\n    [\n        0,\n        1,\n        5,\n        4\n    ],\n    [\n        7,\n        6,\n        4,\n        5\n    ],\n    [\n        2,\n        3,\n        1,\n        0\n    ]\n];\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */ /**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */ /**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createCubeVertices(size) {\n    size = size || 1;\n    const k = size / 2;\n    const cornerVertices = [\n        [\n            -k,\n            -k,\n            -k\n        ],\n        [\n            +k,\n            -k,\n            -k\n        ],\n        [\n            -k,\n            +k,\n            -k\n        ],\n        [\n            +k,\n            +k,\n            -k\n        ],\n        [\n            -k,\n            -k,\n            +k\n        ],\n        [\n            +k,\n            -k,\n            +k\n        ],\n        [\n            -k,\n            +k,\n            +k\n        ],\n        [\n            +k,\n            +k,\n            +k\n        ]\n    ];\n    const faceNormals = [\n        [\n            1,\n            0,\n            0\n        ],\n        [\n            -1,\n            0,\n            0\n        ],\n        [\n            0,\n            1,\n            0\n        ],\n        [\n            0,\n            -1,\n            0\n        ],\n        [\n            0,\n            0,\n            1\n        ],\n        [\n            0,\n            0,\n            -1\n        ]\n    ];\n    const uvCoords = [\n        [\n            1,\n            0\n        ],\n        [\n            0,\n            0\n        ],\n        [\n            0,\n            1\n        ],\n        [\n            1,\n            1\n        ]\n    ];\n    const numVertices = 24;\n    const positions = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const normals = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const texcoords = $065afaecc735fbee$var$createAugmentedTypedArray(2, numVertices);\n    const indices = $065afaecc735fbee$var$createAugmentedTypedArray(3, 12, Uint16Array);\n    for(let f = 0; f < 6; ++f){\n        const faceIndices = $065afaecc735fbee$var$CUBE_FACE_INDICES[f];\n        for(let v = 0; v < 4; ++v){\n            const position = cornerVertices[faceIndices[v]];\n            const normal = faceNormals[f];\n            const uv = uvCoords[v];\n            // Each face needs all four vertices because the normals and texture\n            // coordinates are not all the same.\n            positions.push(position);\n            normals.push(normal);\n            texcoords.push(uv);\n        }\n        // Two triangles make a square face.\n        const offset = 4 * f;\n        indices.push(offset + 0, offset + 1, offset + 2);\n        indices.push(offset + 0, offset + 2, offset + 3);\n    }\n    return {\n        position: positions,\n        normal: normals,\n        texcoord: texcoords,\n        indices: indices\n    };\n}\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */ /**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */ /**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createTruncatedConeVertices(bottomRadius, topRadius, height, radialSubdivisions, verticalSubdivisions, opt_topCap, opt_bottomCap) {\n    if (radialSubdivisions < 3) throw new Error(\"radialSubdivisions must be 3 or greater\");\n    if (verticalSubdivisions < 1) throw new Error(\"verticalSubdivisions must be 1 or greater\");\n    const topCap = opt_topCap === undefined ? true : opt_topCap;\n    const bottomCap = opt_bottomCap === undefined ? true : opt_bottomCap;\n    const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n    const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n    const positions = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const normals = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const texcoords = $065afaecc735fbee$var$createAugmentedTypedArray(2, numVertices);\n    const indices = $065afaecc735fbee$var$createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n    const vertsAroundEdge = radialSubdivisions + 1;\n    // The slant of the cone is constant across its surface\n    const slant = Math.atan2(bottomRadius - topRadius, height);\n    const cosSlant = Math.cos(slant);\n    const sinSlant = Math.sin(slant);\n    const start = topCap ? -2 : 0;\n    const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n    for(let yy = start; yy <= end; ++yy){\n        let v = yy / verticalSubdivisions;\n        let y = height * v;\n        let ringRadius;\n        if (yy < 0) {\n            y = 0;\n            v = 1;\n            ringRadius = bottomRadius;\n        } else if (yy > verticalSubdivisions) {\n            y = height;\n            v = 1;\n            ringRadius = topRadius;\n        } else ringRadius = bottomRadius + (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n        if (yy === -2 || yy === verticalSubdivisions + 2) {\n            ringRadius = 0;\n            v = 0;\n        }\n        y -= height / 2;\n        for(let ii = 0; ii < vertsAroundEdge; ++ii){\n            const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n            const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n            positions.push(sin * ringRadius, y, cos * ringRadius);\n            if (yy < 0) normals.push(0, -1, 0);\n            else if (yy > verticalSubdivisions) normals.push(0, 1, 0);\n            else if (ringRadius === 0.0) normals.push(0, 0, 0);\n            else normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n            texcoords.push(ii / radialSubdivisions, 1 - v);\n        }\n    }\n    for(let yy = 0; yy < verticalSubdivisions + extra; ++yy){\n        if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) continue;\n        for(let ii = 0; ii < radialSubdivisions; ++ii){\n            indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 0) + 1 + ii, vertsAroundEdge * (yy + 1) + 1 + ii);\n            indices.push(vertsAroundEdge * (yy + 0) + 0 + ii, vertsAroundEdge * (yy + 1) + 1 + ii, vertsAroundEdge * (yy + 1) + 0 + ii);\n        }\n    }\n    return {\n        position: positions,\n        normal: normals,\n        texcoord: texcoords,\n        indices: indices\n    };\n}\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */ function $065afaecc735fbee$var$expandRLEData(rleData, padding) {\n    padding = padding || [];\n    const data = [];\n    for(let ii = 0; ii < rleData.length; ii += 4){\n        const runLength = rleData[ii];\n        const element = rleData.slice(ii + 1, ii + 4);\n        element.push.apply(element, padding);\n        for(let jj = 0; jj < runLength; ++jj)data.push.apply(data, element);\n    }\n    return data;\n}\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */ /**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */ /**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$create3DFVertices() {\n    const positions = [\n        // left column front\n        0,\n        0,\n        0,\n        0,\n        150,\n        0,\n        30,\n        0,\n        0,\n        0,\n        150,\n        0,\n        30,\n        150,\n        0,\n        30,\n        0,\n        0,\n        // top rung front\n        30,\n        0,\n        0,\n        30,\n        30,\n        0,\n        100,\n        0,\n        0,\n        30,\n        30,\n        0,\n        100,\n        30,\n        0,\n        100,\n        0,\n        0,\n        // middle rung front\n        30,\n        60,\n        0,\n        30,\n        90,\n        0,\n        67,\n        60,\n        0,\n        30,\n        90,\n        0,\n        67,\n        90,\n        0,\n        67,\n        60,\n        0,\n        // left column back\n        0,\n        0,\n        30,\n        30,\n        0,\n        30,\n        0,\n        150,\n        30,\n        0,\n        150,\n        30,\n        30,\n        0,\n        30,\n        30,\n        150,\n        30,\n        // top rung back\n        30,\n        0,\n        30,\n        100,\n        0,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        100,\n        0,\n        30,\n        100,\n        30,\n        30,\n        // middle rung back\n        30,\n        60,\n        30,\n        67,\n        60,\n        30,\n        30,\n        90,\n        30,\n        30,\n        90,\n        30,\n        67,\n        60,\n        30,\n        67,\n        90,\n        30,\n        // top\n        0,\n        0,\n        0,\n        100,\n        0,\n        0,\n        100,\n        0,\n        30,\n        0,\n        0,\n        0,\n        100,\n        0,\n        30,\n        0,\n        0,\n        30,\n        // top rung front\n        100,\n        0,\n        0,\n        100,\n        30,\n        0,\n        100,\n        30,\n        30,\n        100,\n        0,\n        0,\n        100,\n        30,\n        30,\n        100,\n        0,\n        30,\n        // under top rung\n        30,\n        30,\n        0,\n        30,\n        30,\n        30,\n        100,\n        30,\n        30,\n        30,\n        30,\n        0,\n        100,\n        30,\n        30,\n        100,\n        30,\n        0,\n        // between top rung and middle\n        30,\n        30,\n        0,\n        30,\n        60,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        0,\n        30,\n        60,\n        0,\n        30,\n        60,\n        30,\n        // top of middle rung\n        30,\n        60,\n        0,\n        67,\n        60,\n        30,\n        30,\n        60,\n        30,\n        30,\n        60,\n        0,\n        67,\n        60,\n        0,\n        67,\n        60,\n        30,\n        // front of middle rung\n        67,\n        60,\n        0,\n        67,\n        90,\n        30,\n        67,\n        60,\n        30,\n        67,\n        60,\n        0,\n        67,\n        90,\n        0,\n        67,\n        90,\n        30,\n        // bottom of middle rung.\n        30,\n        90,\n        0,\n        30,\n        90,\n        30,\n        67,\n        90,\n        30,\n        30,\n        90,\n        0,\n        67,\n        90,\n        30,\n        67,\n        90,\n        0,\n        // front of bottom\n        30,\n        90,\n        0,\n        30,\n        150,\n        30,\n        30,\n        90,\n        30,\n        30,\n        90,\n        0,\n        30,\n        150,\n        0,\n        30,\n        150,\n        30,\n        // bottom\n        0,\n        150,\n        0,\n        0,\n        150,\n        30,\n        30,\n        150,\n        30,\n        0,\n        150,\n        0,\n        30,\n        150,\n        30,\n        30,\n        150,\n        0,\n        // left side\n        0,\n        0,\n        0,\n        0,\n        0,\n        30,\n        0,\n        150,\n        30,\n        0,\n        0,\n        0,\n        0,\n        150,\n        30,\n        0,\n        150,\n        0\n    ];\n    const texcoords = [\n        // left column front\n        0.22,\n        0.19,\n        0.22,\n        0.79,\n        0.34,\n        0.19,\n        0.22,\n        0.79,\n        0.34,\n        0.79,\n        0.34,\n        0.19,\n        // top rung front\n        0.34,\n        0.19,\n        0.34,\n        0.31,\n        0.62,\n        0.19,\n        0.34,\n        0.31,\n        0.62,\n        0.31,\n        0.62,\n        0.19,\n        // middle rung front\n        0.34,\n        0.43,\n        0.34,\n        0.55,\n        0.49,\n        0.43,\n        0.34,\n        0.55,\n        0.49,\n        0.55,\n        0.49,\n        0.43,\n        // left column back\n        0,\n        0,\n        1,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        0,\n        1,\n        1,\n        // top rung back\n        0,\n        0,\n        1,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        0,\n        1,\n        1,\n        // middle rung back\n        0,\n        0,\n        1,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        0,\n        1,\n        1,\n        // top\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        // top rung front\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        // under top rung\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0,\n        // between top rung and middle\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        // top of middle rung\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        // front of middle rung\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        // bottom of middle rung.\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0,\n        // front of bottom\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        // bottom\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0,\n        // left side\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0,\n        0,\n        1,\n        1,\n        1,\n        0\n    ];\n    const normals = $065afaecc735fbee$var$expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n        18,\n        0,\n        0,\n        1,\n        // left column back\n        // top rung back\n        // middle rung back\n        18,\n        0,\n        0,\n        -1,\n        // top\n        6,\n        0,\n        1,\n        0,\n        // top rung front\n        6,\n        1,\n        0,\n        0,\n        // under top rung\n        6,\n        0,\n        -1,\n        0,\n        // between top rung and middle\n        6,\n        1,\n        0,\n        0,\n        // top of middle rung\n        6,\n        0,\n        1,\n        0,\n        // front of middle rung\n        6,\n        1,\n        0,\n        0,\n        // bottom of middle rung.\n        6,\n        0,\n        -1,\n        0,\n        // front of bottom\n        6,\n        1,\n        0,\n        0,\n        // bottom\n        6,\n        0,\n        -1,\n        0,\n        // left side\n        6,\n        -1,\n        0,\n        0\n    ]);\n    const colors = $065afaecc735fbee$var$expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n        18,\n        200,\n        70,\n        120,\n        // left column back\n        // top rung back\n        // middle rung back\n        18,\n        80,\n        70,\n        200,\n        // top\n        6,\n        70,\n        200,\n        210,\n        // top rung front\n        6,\n        200,\n        200,\n        70,\n        // under top rung\n        6,\n        210,\n        100,\n        70,\n        // between top rung and middle\n        6,\n        210,\n        160,\n        70,\n        // top of middle rung\n        6,\n        70,\n        180,\n        210,\n        // front of middle rung\n        6,\n        100,\n        70,\n        210,\n        // bottom of middle rung.\n        6,\n        76,\n        210,\n        100,\n        // front of bottom\n        6,\n        140,\n        210,\n        80,\n        // bottom\n        6,\n        90,\n        130,\n        110,\n        // left side\n        6,\n        160,\n        160,\n        220\n    ], [\n        255\n    ]);\n    const numVerts = positions.length / 3;\n    const arrays = {\n        position: $065afaecc735fbee$var$createAugmentedTypedArray(3, numVerts),\n        texcoord: $065afaecc735fbee$var$createAugmentedTypedArray(2, numVerts),\n        normal: $065afaecc735fbee$var$createAugmentedTypedArray(3, numVerts),\n        color: $065afaecc735fbee$var$createAugmentedTypedArray(4, numVerts, Uint8Array),\n        indices: $065afaecc735fbee$var$createAugmentedTypedArray(3, numVerts / 3, Uint16Array)\n    };\n    arrays.position.push(positions);\n    arrays.texcoord.push(texcoords);\n    arrays.normal.push(normals);\n    arrays.color.push(colors);\n    for(let ii = 0; ii < numVerts; ++ii)arrays.indices.push(ii);\n    return arrays;\n}\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */ /**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */ /**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */ /**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */ /**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */ /**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createCrescentVertices(verticalRadius, outerRadius, innerRadius, thickness, subdivisionsDown, startOffset, endOffset) {\n    if (subdivisionsDown <= 0) throw new Error(\"subdivisionDown must be > 0\");\n    startOffset = startOffset || 0;\n    endOffset = endOffset || 1;\n    const subdivisionsThick = 2;\n    const offsetRange = endOffset - startOffset;\n    const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n    const positions = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const normals = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const texcoords = $065afaecc735fbee$var$createAugmentedTypedArray(2, numVertices);\n    function lerp(a, b, s) {\n        return a + (b - a) * s;\n    }\n    function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n        for(let z = 0; z <= subdivisionsDown; z++){\n            const uBack = x / (subdivisionsThick - 1);\n            const v = z / subdivisionsDown;\n            const xBack = (uBack - 0.5) * 2;\n            const angle = (startOffset + v * offsetRange) * Math.PI;\n            const s = Math.sin(angle);\n            const c = Math.cos(angle);\n            const radius = lerp(verticalRadius, arcRadius, s);\n            const px = xBack * thickness;\n            const py = c * verticalRadius;\n            const pz = s * radius;\n            positions.push(px, py, pz);\n            const n = $065afaecc735fbee$var$add($065afaecc735fbee$var$multiply$1([\n                0,\n                s,\n                c\n            ], normalMult), normalAdd);\n            normals.push(n);\n            texcoords.push(uBack * uMult + uAdd, v);\n        }\n    }\n    // Generate the individual vertices in our vertex buffer.\n    for(let x = 0; x < subdivisionsThick; x++){\n        const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n        createArc(outerRadius, x, [\n            1,\n            1,\n            1\n        ], [\n            0,\n            0,\n            0\n        ], 1, 0);\n        createArc(outerRadius, x, [\n            0,\n            0,\n            0\n        ], [\n            uBack,\n            0,\n            0\n        ], 0, 0);\n        createArc(innerRadius, x, [\n            1,\n            1,\n            1\n        ], [\n            0,\n            0,\n            0\n        ], 1, 0);\n        createArc(innerRadius, x, [\n            0,\n            0,\n            0\n        ], [\n            uBack,\n            0,\n            0\n        ], 0, 1);\n    }\n    // Do outer surface.\n    const indices = $065afaecc735fbee$var$createAugmentedTypedArray(3, subdivisionsDown * 2 * (2 + subdivisionsThick), Uint16Array);\n    function createSurface(leftArcOffset, rightArcOffset) {\n        for(let z = 0; z < subdivisionsDown; ++z){\n            // Make triangle 1 of quad.\n            indices.push(leftArcOffset + z + 0, leftArcOffset + z + 1, rightArcOffset + z + 0);\n            // Make triangle 2 of quad.\n            indices.push(leftArcOffset + z + 1, rightArcOffset + z + 1, rightArcOffset + z + 0);\n        }\n    }\n    const numVerticesDown = subdivisionsDown + 1;\n    // front\n    createSurface(numVerticesDown * 0, numVerticesDown * 4);\n    // right\n    createSurface(numVerticesDown * 5, numVerticesDown * 7);\n    // back\n    createSurface(numVerticesDown * 6, numVerticesDown * 2);\n    // left\n    createSurface(numVerticesDown * 3, numVerticesDown * 1);\n    return {\n        position: positions,\n        normal: normals,\n        texcoord: texcoords,\n        indices: indices\n    };\n}\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */ /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */ /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */ function $065afaecc735fbee$var$createCylinderVertices(radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap) {\n    return $065afaecc735fbee$var$createTruncatedConeVertices(radius, radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap);\n}\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */ /**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */ /**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createTorusVertices(radius, thickness, radialSubdivisions, bodySubdivisions, startAngle, endAngle) {\n    if (radialSubdivisions < 3) throw new Error(\"radialSubdivisions must be 3 or greater\");\n    if (bodySubdivisions < 3) throw new Error(\"verticalSubdivisions must be 3 or greater\");\n    startAngle = startAngle || 0;\n    endAngle = endAngle || Math.PI * 2;\n    const range = endAngle - startAngle;\n    const radialParts = radialSubdivisions + 1;\n    const bodyParts = bodySubdivisions + 1;\n    const numVertices = radialParts * bodyParts;\n    const positions = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const normals = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const texcoords = $065afaecc735fbee$var$createAugmentedTypedArray(2, numVertices);\n    const indices = $065afaecc735fbee$var$createAugmentedTypedArray(3, radialSubdivisions * bodySubdivisions * 2, Uint16Array);\n    for(let slice = 0; slice < bodyParts; ++slice){\n        const v = slice / bodySubdivisions;\n        const sliceAngle = v * Math.PI * 2;\n        const sliceSin = Math.sin(sliceAngle);\n        const ringRadius = radius + sliceSin * thickness;\n        const ny = Math.cos(sliceAngle);\n        const y = ny * thickness;\n        for(let ring = 0; ring < radialParts; ++ring){\n            const u = ring / radialSubdivisions;\n            const ringAngle = startAngle + u * range;\n            const xSin = Math.sin(ringAngle);\n            const zCos = Math.cos(ringAngle);\n            const x = xSin * ringRadius;\n            const z = zCos * ringRadius;\n            const nx = xSin * sliceSin;\n            const nz = zCos * sliceSin;\n            positions.push(x, y, z);\n            normals.push(nx, ny, nz);\n            texcoords.push(u, 1 - v);\n        }\n    }\n    for(let slice = 0; slice < bodySubdivisions; ++slice)for(let ring = 0; ring < radialSubdivisions; ++ring){\n        const nextRingIndex = 1 + ring;\n        const nextSliceIndex = 1 + slice;\n        indices.push(radialParts * slice + ring, radialParts * nextSliceIndex + ring, radialParts * slice + nextRingIndex);\n        indices.push(radialParts * nextSliceIndex + ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * slice + nextRingIndex);\n    }\n    return {\n        position: positions,\n        normal: normals,\n        texcoord: texcoords,\n        indices: indices\n    };\n}\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */ /**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */ /**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$createDiscVertices(radius, divisions, stacks, innerRadius, stackPower) {\n    if (divisions < 3) throw new Error(\"divisions must be at least 3\");\n    stacks = stacks ? stacks : 1;\n    stackPower = stackPower ? stackPower : 1;\n    innerRadius = innerRadius ? innerRadius : 0;\n    // Note: We don't share the center vertex because that would\n    // mess up texture coordinates.\n    const numVertices = (divisions + 1) * (stacks + 1);\n    const positions = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const normals = $065afaecc735fbee$var$createAugmentedTypedArray(3, numVertices);\n    const texcoords = $065afaecc735fbee$var$createAugmentedTypedArray(2, numVertices);\n    const indices = $065afaecc735fbee$var$createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n    let firstIndex = 0;\n    const radiusSpan = radius - innerRadius;\n    const pointsPerStack = divisions + 1;\n    // Build the disk one stack at a time.\n    for(let stack = 0; stack <= stacks; ++stack){\n        const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n        for(let i = 0; i <= divisions; ++i){\n            const theta = 2.0 * Math.PI * i / divisions;\n            const x = stackRadius * Math.cos(theta);\n            const z = stackRadius * Math.sin(theta);\n            positions.push(x, 0, z);\n            normals.push(0, 1, 0);\n            texcoords.push(1 - i / divisions, stack / stacks);\n            if (stack > 0 && i !== divisions) {\n                // a, b, c and d are the indices of the vertices of a quad.  unless\n                // the current stack is the one closest to the center, in which case\n                // the vertices a and b connect to the center vertex.\n                const a = firstIndex + (i + 1);\n                const b = firstIndex + i;\n                const c = firstIndex + i - pointsPerStack;\n                const d = firstIndex + (i + 1) - pointsPerStack;\n                // Make a quad of the vertices a, b, c, d.\n                indices.push(a, b, c);\n                indices.push(a, c, d);\n            }\n        }\n        firstIndex += divisions + 1;\n    }\n    return {\n        position: positions,\n        normal: normals,\n        texcoord: texcoords,\n        indices: indices\n    };\n}\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */ function $065afaecc735fbee$var$randInt(range) {\n    return Math.random() * range | 0;\n}\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */ /**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */ /**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$makeRandomVertexColors(vertices, options) {\n    options = options || {};\n    const numElements = vertices.position.numElements;\n    const vColors = $065afaecc735fbee$var$createAugmentedTypedArray(4, numElements, Uint8Array);\n    const rand = options.rand || function(ndx, channel) {\n        return channel < 3 ? $065afaecc735fbee$var$randInt(256) : 255;\n    };\n    vertices.color = vColors;\n    if (vertices.indices) // just make random colors if index\n    for(let ii = 0; ii < numElements; ++ii)vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    else {\n        // make random colors per triangle\n        const numVertsPerColor = options.vertsPerColor || 3;\n        const numSets = numElements / numVertsPerColor;\n        for(let ii = 0; ii < numSets; ++ii){\n            const color = [\n                rand(ii, 0),\n                rand(ii, 1),\n                rand(ii, 2),\n                rand(ii, 3)\n            ];\n            for(let jj = 0; jj < numVertsPerColor; ++jj)vColors.push(color);\n        }\n    }\n    return vertices;\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */ function $065afaecc735fbee$var$createBufferFunc(fn) {\n    return function(gl) {\n        const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n        return $065afaecc735fbee$export$69d8acce17089372(gl, arrays);\n    };\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */ function $065afaecc735fbee$var$createBufferInfoFunc(fn) {\n    return function(gl) {\n        const arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));\n        return $065afaecc735fbee$export$140f5b0225138840(gl, arrays);\n    };\n}\nconst $065afaecc735fbee$var$arraySpecPropertyNames = [\n    \"numComponents\",\n    \"size\",\n    \"type\",\n    \"normalize\",\n    \"stride\",\n    \"offset\",\n    \"attrib\",\n    \"name\",\n    \"attribName\"\n];\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */ function $065afaecc735fbee$var$copyElements(src, dst, dstNdx, offset) {\n    offset = offset || 0;\n    const length1 = src.length;\n    for(let ii = 0; ii < length1; ++ii)dst[dstNdx + ii] = src[ii] + offset;\n}\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */ function $065afaecc735fbee$var$createArrayOfSameType(srcArray, length1) {\n    const arraySrc = $065afaecc735fbee$var$getArray(srcArray);\n    const newArray = new arraySrc.constructor(length1);\n    let newArraySpec = newArray;\n    // If it appears to have been augmented make new one augmented\n    if (arraySrc.numComponents && arraySrc.numElements) $065afaecc735fbee$var$augmentTypedArray(newArray, arraySrc.numComponents);\n    // If it was a full spec make new one a full spec\n    if (srcArray.data) {\n        newArraySpec = {\n            data: newArray\n        };\n        $065afaecc735fbee$var$copyNamedProperties($065afaecc735fbee$var$arraySpecPropertyNames, srcArray, newArraySpec);\n    }\n    return newArraySpec;\n}\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$concatVertices(arrayOfArrays) {\n    const names = {};\n    let baseName;\n    // get names of all arrays.\n    // and numElements for each set of vertices\n    for(let ii = 0; ii < arrayOfArrays.length; ++ii){\n        const arrays = arrayOfArrays[ii];\n        Object.keys(arrays).forEach(function(name) {\n            if (!names[name]) names[name] = [];\n            if (!baseName && name !== \"indices\") baseName = name;\n            const arrayInfo = arrays[name];\n            const numComponents = $065afaecc735fbee$var$getNumComponents(arrayInfo, name);\n            const array = $065afaecc735fbee$var$getArray(arrayInfo);\n            const numElements = array.length / numComponents;\n            names[name].push(numElements);\n        });\n    }\n    // compute length of combined array\n    // and return one for reference\n    function getLengthOfCombinedArrays(name) {\n        let length1 = 0;\n        let arraySpec;\n        for(let ii = 0; ii < arrayOfArrays.length; ++ii){\n            const arrays = arrayOfArrays[ii];\n            const arrayInfo = arrays[name];\n            const array = $065afaecc735fbee$var$getArray(arrayInfo);\n            length1 += array.length;\n            if (!arraySpec || arrayInfo.data) arraySpec = arrayInfo;\n        }\n        return {\n            length: length1,\n            spec: arraySpec\n        };\n    }\n    function copyArraysToNewArray(name, base, newArray) {\n        let baseIndex = 0;\n        let offset = 0;\n        for(let ii = 0; ii < arrayOfArrays.length; ++ii){\n            const arrays = arrayOfArrays[ii];\n            const arrayInfo = arrays[name];\n            const array = $065afaecc735fbee$var$getArray(arrayInfo);\n            if (name === \"indices\") {\n                $065afaecc735fbee$var$copyElements(array, newArray, offset, baseIndex);\n                baseIndex += base[ii];\n            } else $065afaecc735fbee$var$copyElements(array, newArray, offset);\n            offset += array.length;\n        }\n    }\n    const base = names[baseName];\n    const newArrays = {};\n    Object.keys(names).forEach(function(name) {\n        const info = getLengthOfCombinedArrays(name);\n        const newArraySpec = $065afaecc735fbee$var$createArrayOfSameType(info.spec, info.length);\n        copyArraysToNewArray(name, base, $065afaecc735fbee$var$getArray(newArraySpec));\n        newArrays[name] = newArraySpec;\n    });\n    return newArrays;\n}\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */ function $065afaecc735fbee$var$duplicateVertices(arrays) {\n    const newArrays = {};\n    Object.keys(arrays).forEach(function(name) {\n        const arraySpec = arrays[name];\n        const srcArray = $065afaecc735fbee$var$getArray(arraySpec);\n        const newArraySpec = $065afaecc735fbee$var$createArrayOfSameType(arraySpec, srcArray.length);\n        $065afaecc735fbee$var$copyElements(srcArray, $065afaecc735fbee$var$getArray(newArraySpec), 0);\n        newArrays[name] = newArraySpec;\n    });\n    return newArrays;\n}\nconst $065afaecc735fbee$var$create3DFBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$create3DFVertices);\nconst $065afaecc735fbee$var$create3DFBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$create3DFVertices);\nconst $065afaecc735fbee$var$createCubeBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createCubeVertices);\nconst $065afaecc735fbee$var$createCubeBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createCubeVertices);\nconst $065afaecc735fbee$var$createPlaneBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createPlaneVertices);\nconst $065afaecc735fbee$var$createPlaneBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createPlaneVertices);\nconst $065afaecc735fbee$var$createSphereBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createSphereVertices);\nconst $065afaecc735fbee$var$createSphereBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createSphereVertices);\nconst $065afaecc735fbee$var$createTruncatedConeBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createTruncatedConeVertices);\nconst $065afaecc735fbee$var$createTruncatedConeBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createTruncatedConeVertices);\nconst $065afaecc735fbee$var$createXYQuadBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createXYQuadVertices);\nconst $065afaecc735fbee$var$createXYQuadBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createXYQuadVertices);\nconst $065afaecc735fbee$var$createCrescentBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createCrescentVertices);\nconst $065afaecc735fbee$var$createCrescentBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createCrescentVertices);\nconst $065afaecc735fbee$var$createCylinderBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createCylinderVertices);\nconst $065afaecc735fbee$var$createCylinderBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createCylinderVertices);\nconst $065afaecc735fbee$var$createTorusBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createTorusVertices);\nconst $065afaecc735fbee$var$createTorusBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createTorusVertices);\nconst $065afaecc735fbee$var$createDiscBufferInfo = $065afaecc735fbee$var$createBufferInfoFunc($065afaecc735fbee$var$createDiscVertices);\nconst $065afaecc735fbee$var$createDiscBuffers = $065afaecc735fbee$var$createBufferFunc($065afaecc735fbee$var$createDiscVertices);\n// these were mis-spelled until 4.12\nconst $065afaecc735fbee$var$createCresentBufferInfo = $065afaecc735fbee$var$createCrescentBufferInfo;\nconst $065afaecc735fbee$var$createCresentBuffers = $065afaecc735fbee$var$createCrescentBuffers;\nconst $065afaecc735fbee$var$createCresentVertices = $065afaecc735fbee$var$createCrescentVertices;\nvar $065afaecc735fbee$export$67635360ab47a385 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    create3DFBufferInfo: $065afaecc735fbee$var$create3DFBufferInfo,\n    create3DFBuffers: $065afaecc735fbee$var$create3DFBuffers,\n    create3DFVertices: $065afaecc735fbee$var$create3DFVertices,\n    createAugmentedTypedArray: $065afaecc735fbee$var$createAugmentedTypedArray,\n    createCubeBufferInfo: $065afaecc735fbee$var$createCubeBufferInfo,\n    createCubeBuffers: $065afaecc735fbee$var$createCubeBuffers,\n    createCubeVertices: $065afaecc735fbee$var$createCubeVertices,\n    createPlaneBufferInfo: $065afaecc735fbee$var$createPlaneBufferInfo,\n    createPlaneBuffers: $065afaecc735fbee$var$createPlaneBuffers,\n    createPlaneVertices: $065afaecc735fbee$var$createPlaneVertices,\n    createSphereBufferInfo: $065afaecc735fbee$var$createSphereBufferInfo,\n    createSphereBuffers: $065afaecc735fbee$var$createSphereBuffers,\n    createSphereVertices: $065afaecc735fbee$var$createSphereVertices,\n    createTruncatedConeBufferInfo: $065afaecc735fbee$var$createTruncatedConeBufferInfo,\n    createTruncatedConeBuffers: $065afaecc735fbee$var$createTruncatedConeBuffers,\n    createTruncatedConeVertices: $065afaecc735fbee$var$createTruncatedConeVertices,\n    createXYQuadBufferInfo: $065afaecc735fbee$var$createXYQuadBufferInfo,\n    createXYQuadBuffers: $065afaecc735fbee$var$createXYQuadBuffers,\n    createXYQuadVertices: $065afaecc735fbee$var$createXYQuadVertices,\n    createCresentBufferInfo: $065afaecc735fbee$var$createCresentBufferInfo,\n    createCresentBuffers: $065afaecc735fbee$var$createCresentBuffers,\n    createCresentVertices: $065afaecc735fbee$var$createCresentVertices,\n    createCrescentBufferInfo: $065afaecc735fbee$var$createCrescentBufferInfo,\n    createCrescentBuffers: $065afaecc735fbee$var$createCrescentBuffers,\n    createCrescentVertices: $065afaecc735fbee$var$createCrescentVertices,\n    createCylinderBufferInfo: $065afaecc735fbee$var$createCylinderBufferInfo,\n    createCylinderBuffers: $065afaecc735fbee$var$createCylinderBuffers,\n    createCylinderVertices: $065afaecc735fbee$var$createCylinderVertices,\n    createTorusBufferInfo: $065afaecc735fbee$var$createTorusBufferInfo,\n    createTorusBuffers: $065afaecc735fbee$var$createTorusBuffers,\n    createTorusVertices: $065afaecc735fbee$var$createTorusVertices,\n    createDiscBufferInfo: $065afaecc735fbee$var$createDiscBufferInfo,\n    createDiscBuffers: $065afaecc735fbee$var$createDiscBuffers,\n    createDiscVertices: $065afaecc735fbee$var$createDiscVertices,\n    deindexVertices: $065afaecc735fbee$var$deindexVertices,\n    flattenNormals: $065afaecc735fbee$var$flattenNormals,\n    makeRandomVertexColors: $065afaecc735fbee$var$makeRandomVertexColors,\n    reorientDirections: $065afaecc735fbee$var$reorientDirections,\n    reorientNormals: $065afaecc735fbee$var$reorientNormals,\n    reorientPositions: $065afaecc735fbee$var$reorientPositions,\n    reorientVertices: $065afaecc735fbee$var$reorientVertices,\n    concatVertices: $065afaecc735fbee$var$concatVertices,\n    duplicateVertices: $065afaecc735fbee$var$duplicateVertices\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ /**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */ //function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$e3518b1ac7891039(gl) {\n    // This is the correct check but it's slow\n    //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n    // This might also be the correct check but I'm assuming it's slow-ish\n    // return gl instanceof WebGL2RenderingContext;\n    return !!gl.texStorage2D;\n}\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$6fee3240cb824186(gl) {\n    // This is the correct check but it's slow\n    // const version = getVersionAsNumber(gl);\n    // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n    // This might also be the correct check but I'm assuming it's slow-ish\n    // return gl instanceof WebGLRenderingContext;\n    return !gl.texStorage2D;\n}\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */ const $065afaecc735fbee$export$e97753eae63e4e62 = function() {\n    const haveEnumsForType = {};\n    const enums = {};\n    function addEnums(gl) {\n        const type = gl.constructor.name;\n        if (!haveEnumsForType[type]) {\n            for(const key in gl)if (typeof gl[key] === \"number\") {\n                const existing = enums[gl[key]];\n                enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n            }\n            haveEnumsForType[type] = true;\n        }\n    }\n    return function glEnumToString(gl, value) {\n        addEnums(gl);\n        return enums[value] || (typeof value === \"number\" ? `0x${value.toString(16)}` : value);\n    };\n}();\nvar $065afaecc735fbee$export$eab97d15b1788b8d = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    glEnumToString: $065afaecc735fbee$export$e97753eae63e4e62,\n    isWebGL1: $065afaecc735fbee$export$6fee3240cb824186,\n    isWebGL2: $065afaecc735fbee$export$e3518b1ac7891039\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ const $065afaecc735fbee$var$defaults$1 = {\n    textureColor: new Uint8Array([\n        128,\n        192,\n        255,\n        255\n    ]),\n    textureOptions: {},\n    crossOrigin: undefined\n};\nconst $065afaecc735fbee$var$isArrayBuffer = $065afaecc735fbee$export$9dd3754ae86f0017;\n// Should we make this on demand?\nconst $065afaecc735fbee$var$getShared2DContext = function() {\n    let s_ctx;\n    return function getShared2DContext() {\n        s_ctx = s_ctx || (typeof document !== \"undefined\" && document.createElement ? document.createElement(\"canvas\").getContext(\"2d\") : null);\n        return s_ctx;\n    };\n}();\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n/* PixelFormat */ const $065afaecc735fbee$var$ALPHA = 0x1906;\nconst $065afaecc735fbee$var$RGB = 0x1907;\nconst $065afaecc735fbee$var$RGBA$1 = 0x1908;\nconst $065afaecc735fbee$var$LUMINANCE = 0x1909;\nconst $065afaecc735fbee$var$LUMINANCE_ALPHA = 0x190A;\nconst $065afaecc735fbee$var$DEPTH_COMPONENT$1 = 0x1902;\nconst $065afaecc735fbee$var$DEPTH_STENCIL$1 = 0x84F9;\n/* TextureWrapMode */ // const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst $065afaecc735fbee$var$CLAMP_TO_EDGE$1 = 0x812f;\n/* TextureMagFilter */ const $065afaecc735fbee$var$NEAREST = 0x2600;\nconst $065afaecc735fbee$var$LINEAR$1 = 0x2601;\n/* TextureMinFilter */ // const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n/* Texture Target */ const $065afaecc735fbee$var$TEXTURE_2D$2 = 0x0de1;\nconst $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1 = 0x8513;\nconst $065afaecc735fbee$var$TEXTURE_3D$1 = 0x806f;\nconst $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1 = 0x8c1a;\n/* Cubemap Targets */ const $065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst $065afaecc735fbee$var$TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst $065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst $065afaecc735fbee$var$TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst $065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst $065afaecc735fbee$var$TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n/* Texture Parameters */ const $065afaecc735fbee$var$TEXTURE_MIN_FILTER = 0x2801;\nconst $065afaecc735fbee$var$TEXTURE_MAG_FILTER = 0x2800;\nconst $065afaecc735fbee$var$TEXTURE_WRAP_S = 0x2802;\nconst $065afaecc735fbee$var$TEXTURE_WRAP_T = 0x2803;\nconst $065afaecc735fbee$var$TEXTURE_WRAP_R = 0x8072;\nconst $065afaecc735fbee$var$TEXTURE_MIN_LOD = 0x813a;\nconst $065afaecc735fbee$var$TEXTURE_MAX_LOD = 0x813b;\nconst $065afaecc735fbee$var$TEXTURE_BASE_LEVEL = 0x813c;\nconst $065afaecc735fbee$var$TEXTURE_MAX_LEVEL = 0x813d;\nconst $065afaecc735fbee$var$TEXTURE_COMPARE_MODE = 0x884C;\nconst $065afaecc735fbee$var$TEXTURE_COMPARE_FUNC = 0x884D;\n/* Pixel store */ const $065afaecc735fbee$var$UNPACK_ALIGNMENT = 0x0cf5;\nconst $065afaecc735fbee$var$UNPACK_ROW_LENGTH = 0x0cf2;\nconst $065afaecc735fbee$var$UNPACK_IMAGE_HEIGHT = 0x806e;\nconst $065afaecc735fbee$var$UNPACK_SKIP_PIXELS = 0x0cf4;\nconst $065afaecc735fbee$var$UNPACK_SKIP_ROWS = 0x0cf3;\nconst $065afaecc735fbee$var$UNPACK_SKIP_IMAGES = 0x806d;\nconst $065afaecc735fbee$var$UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst $065afaecc735fbee$var$UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\nconst $065afaecc735fbee$var$UNPACK_FLIP_Y_WEBGL = 0x9240;\nconst $065afaecc735fbee$var$R8 = 0x8229;\nconst $065afaecc735fbee$var$R8_SNORM = 0x8F94;\nconst $065afaecc735fbee$var$R16F = 0x822D;\nconst $065afaecc735fbee$var$R32F = 0x822E;\nconst $065afaecc735fbee$var$R8UI = 0x8232;\nconst $065afaecc735fbee$var$R8I = 0x8231;\nconst $065afaecc735fbee$var$RG16UI = 0x823A;\nconst $065afaecc735fbee$var$RG16I = 0x8239;\nconst $065afaecc735fbee$var$RG32UI = 0x823C;\nconst $065afaecc735fbee$var$RG32I = 0x823B;\nconst $065afaecc735fbee$var$RG8 = 0x822B;\nconst $065afaecc735fbee$var$RG8_SNORM = 0x8F95;\nconst $065afaecc735fbee$var$RG16F = 0x822F;\nconst $065afaecc735fbee$var$RG32F = 0x8230;\nconst $065afaecc735fbee$var$RG8UI = 0x8238;\nconst $065afaecc735fbee$var$RG8I = 0x8237;\nconst $065afaecc735fbee$var$R16UI = 0x8234;\nconst $065afaecc735fbee$var$R16I = 0x8233;\nconst $065afaecc735fbee$var$R32UI = 0x8236;\nconst $065afaecc735fbee$var$R32I = 0x8235;\nconst $065afaecc735fbee$var$RGB8 = 0x8051;\nconst $065afaecc735fbee$var$SRGB8 = 0x8C41;\nconst $065afaecc735fbee$var$RGB565$1 = 0x8D62;\nconst $065afaecc735fbee$var$RGB8_SNORM = 0x8F96;\nconst $065afaecc735fbee$var$R11F_G11F_B10F = 0x8C3A;\nconst $065afaecc735fbee$var$RGB9_E5 = 0x8C3D;\nconst $065afaecc735fbee$var$RGB16F = 0x881B;\nconst $065afaecc735fbee$var$RGB32F = 0x8815;\nconst $065afaecc735fbee$var$RGB8UI = 0x8D7D;\nconst $065afaecc735fbee$var$RGB8I = 0x8D8F;\nconst $065afaecc735fbee$var$RGB16UI = 0x8D77;\nconst $065afaecc735fbee$var$RGB16I = 0x8D89;\nconst $065afaecc735fbee$var$RGB32UI = 0x8D71;\nconst $065afaecc735fbee$var$RGB32I = 0x8D83;\nconst $065afaecc735fbee$var$RGBA8 = 0x8058;\nconst $065afaecc735fbee$var$SRGB8_ALPHA8 = 0x8C43;\nconst $065afaecc735fbee$var$RGBA8_SNORM = 0x8F97;\nconst $065afaecc735fbee$var$RGB5_A1$1 = 0x8057;\nconst $065afaecc735fbee$var$RGBA4$1 = 0x8056;\nconst $065afaecc735fbee$var$RGB10_A2 = 0x8059;\nconst $065afaecc735fbee$var$RGBA16F = 0x881A;\nconst $065afaecc735fbee$var$RGBA32F = 0x8814;\nconst $065afaecc735fbee$var$RGBA8UI = 0x8D7C;\nconst $065afaecc735fbee$var$RGBA8I = 0x8D8E;\nconst $065afaecc735fbee$var$RGB10_A2UI = 0x906F;\nconst $065afaecc735fbee$var$RGBA16UI = 0x8D76;\nconst $065afaecc735fbee$var$RGBA16I = 0x8D88;\nconst $065afaecc735fbee$var$RGBA32I = 0x8D82;\nconst $065afaecc735fbee$var$RGBA32UI = 0x8D70;\nconst $065afaecc735fbee$var$DEPTH_COMPONENT16$1 = 0x81A5;\nconst $065afaecc735fbee$var$DEPTH_COMPONENT24$1 = 0x81A6;\nconst $065afaecc735fbee$var$DEPTH_COMPONENT32F$1 = 0x8CAC;\nconst $065afaecc735fbee$var$DEPTH32F_STENCIL8$1 = 0x8CAD;\nconst $065afaecc735fbee$var$DEPTH24_STENCIL8$1 = 0x88F0;\n/* DataType */ const $065afaecc735fbee$var$BYTE = 0x1400;\nconst $065afaecc735fbee$var$UNSIGNED_BYTE$1 = 0x1401;\nconst $065afaecc735fbee$var$SHORT = 0x1402;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT$1 = 0x1403;\nconst $065afaecc735fbee$var$INT$1 = 0x1404;\nconst $065afaecc735fbee$var$UNSIGNED_INT$1 = 0x1405;\nconst $065afaecc735fbee$var$FLOAT$1 = 0x1406;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT_5_6_5 = 0x8363;\nconst $065afaecc735fbee$var$HALF_FLOAT = 0x140B;\nconst $065afaecc735fbee$var$HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(\nconst $065afaecc735fbee$var$UNSIGNED_INT_2_10_10_10_REV = 0x8368;\nconst $065afaecc735fbee$var$UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst $065afaecc735fbee$var$UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\nconst $065afaecc735fbee$var$FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst $065afaecc735fbee$var$UNSIGNED_INT_24_8 = 0x84FA;\nconst $065afaecc735fbee$var$RG = 0x8227;\nconst $065afaecc735fbee$var$RG_INTEGER = 0x8228;\nconst $065afaecc735fbee$var$RED = 0x1903;\nconst $065afaecc735fbee$var$RED_INTEGER = 0x8D94;\nconst $065afaecc735fbee$var$RGB_INTEGER = 0x8D98;\nconst $065afaecc735fbee$var$RGBA_INTEGER = 0x8D99;\nconst $065afaecc735fbee$var$formatInfo = {};\n{\n    // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n    // the name.\n    const f = $065afaecc735fbee$var$formatInfo;\n    f[$065afaecc735fbee$var$ALPHA] = {\n        numColorComponents: 1\n    };\n    f[$065afaecc735fbee$var$LUMINANCE] = {\n        numColorComponents: 1\n    };\n    f[$065afaecc735fbee$var$LUMINANCE_ALPHA] = {\n        numColorComponents: 2\n    };\n    f[$065afaecc735fbee$var$RGB] = {\n        numColorComponents: 3\n    };\n    f[$065afaecc735fbee$var$RGBA$1] = {\n        numColorComponents: 4\n    };\n    f[$065afaecc735fbee$var$RED] = {\n        numColorComponents: 1\n    };\n    f[$065afaecc735fbee$var$RED_INTEGER] = {\n        numColorComponents: 1\n    };\n    f[$065afaecc735fbee$var$RG] = {\n        numColorComponents: 2\n    };\n    f[$065afaecc735fbee$var$RG_INTEGER] = {\n        numColorComponents: 2\n    };\n    f[$065afaecc735fbee$var$RGB] = {\n        numColorComponents: 3\n    };\n    f[$065afaecc735fbee$var$RGB_INTEGER] = {\n        numColorComponents: 3\n    };\n    f[$065afaecc735fbee$var$RGBA$1] = {\n        numColorComponents: 4\n    };\n    f[$065afaecc735fbee$var$RGBA_INTEGER] = {\n        numColorComponents: 4\n    };\n    f[$065afaecc735fbee$var$DEPTH_COMPONENT$1] = {\n        numColorComponents: 1\n    };\n    f[$065afaecc735fbee$var$DEPTH_STENCIL$1] = {\n        numColorComponents: 2\n    };\n}/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */ let $065afaecc735fbee$var$s_textureInternalFormatInfo;\nfunction $065afaecc735fbee$var$getTextureInternalFormatInfo(internalFormat) {\n    if (!$065afaecc735fbee$var$s_textureInternalFormatInfo) {\n        // NOTE: these properties need unique names so we can let Uglify mangle the name.\n        const t = {};\n        // unsized formats\n        t[$065afaecc735fbee$var$ALPHA] = {\n            textureFormat: $065afaecc735fbee$var$ALPHA,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                1,\n                2,\n                2,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$HALF_FLOAT,\n                $065afaecc735fbee$var$HALF_FLOAT_OES,\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$LUMINANCE] = {\n            textureFormat: $065afaecc735fbee$var$LUMINANCE,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                1,\n                2,\n                2,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$HALF_FLOAT,\n                $065afaecc735fbee$var$HALF_FLOAT_OES,\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$LUMINANCE_ALPHA] = {\n            textureFormat: $065afaecc735fbee$var$LUMINANCE_ALPHA,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                2,\n                4,\n                4,\n                8\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$HALF_FLOAT,\n                $065afaecc735fbee$var$HALF_FLOAT_OES,\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                3,\n                6,\n                6,\n                12,\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$HALF_FLOAT,\n                $065afaecc735fbee$var$HALF_FLOAT_OES,\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$UNSIGNED_SHORT_5_6_5\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA$1] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                4,\n                8,\n                8,\n                16,\n                2,\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$HALF_FLOAT,\n                $065afaecc735fbee$var$HALF_FLOAT_OES,\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$UNSIGNED_SHORT_4_4_4_4,\n                $065afaecc735fbee$var$UNSIGNED_SHORT_5_5_5_1\n            ]\n        };\n        t[$065afaecc735fbee$var$DEPTH_COMPONENT$1] = {\n            textureFormat: $065afaecc735fbee$var$DEPTH_COMPONENT$1,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                2,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT$1,\n                $065afaecc735fbee$var$UNSIGNED_SHORT$1\n            ]\n        };\n        // sized formats\n        t[$065afaecc735fbee$var$R8] = {\n            textureFormat: $065afaecc735fbee$var$RED,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                1\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$R8_SNORM] = {\n            textureFormat: $065afaecc735fbee$var$RED,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                1\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$R16F] = {\n            textureFormat: $065afaecc735fbee$var$RED,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                4,\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$HALF_FLOAT\n            ]\n        };\n        t[$065afaecc735fbee$var$R32F] = {\n            textureFormat: $065afaecc735fbee$var$RED,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$R8UI] = {\n            textureFormat: $065afaecc735fbee$var$RED_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                1\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$R8I] = {\n            textureFormat: $065afaecc735fbee$var$RED_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                1\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$R16UI] = {\n            textureFormat: $065afaecc735fbee$var$RED_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_SHORT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$R16I] = {\n            textureFormat: $065afaecc735fbee$var$RED_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$SHORT\n            ]\n        };\n        t[$065afaecc735fbee$var$R32UI] = {\n            textureFormat: $065afaecc735fbee$var$RED_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$R32I] = {\n            textureFormat: $065afaecc735fbee$var$RED_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RG8] = {\n            textureFormat: $065afaecc735fbee$var$RG,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RG8_SNORM] = {\n            textureFormat: $065afaecc735fbee$var$RG,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$RG16F] = {\n            textureFormat: $065afaecc735fbee$var$RG,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                8,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$HALF_FLOAT\n            ]\n        };\n        t[$065afaecc735fbee$var$RG32F] = {\n            textureFormat: $065afaecc735fbee$var$RG,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                8\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RG8UI] = {\n            textureFormat: $065afaecc735fbee$var$RG_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RG8I] = {\n            textureFormat: $065afaecc735fbee$var$RG_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$RG16UI] = {\n            textureFormat: $065afaecc735fbee$var$RG_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_SHORT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RG16I] = {\n            textureFormat: $065afaecc735fbee$var$RG_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$SHORT\n            ]\n        };\n        t[$065afaecc735fbee$var$RG32UI] = {\n            textureFormat: $065afaecc735fbee$var$RG_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                8\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RG32I] = {\n            textureFormat: $065afaecc735fbee$var$RG_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                8\n            ],\n            type: [\n                $065afaecc735fbee$var$INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB8] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                3\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$SRGB8] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                3\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB565$1] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                3,\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$UNSIGNED_SHORT_5_6_5\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB8_SNORM] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                3\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$R11F_G11F_B10F] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                12,\n                6,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$HALF_FLOAT,\n                $065afaecc735fbee$var$UNSIGNED_INT_10F_11F_11F_REV\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB9_E5] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                12,\n                6,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$HALF_FLOAT,\n                $065afaecc735fbee$var$UNSIGNED_INT_5_9_9_9_REV\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB16F] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                12,\n                6\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$HALF_FLOAT\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB32F] = {\n            textureFormat: $065afaecc735fbee$var$RGB,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                12\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB8UI] = {\n            textureFormat: $065afaecc735fbee$var$RGB_INTEGER,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                3\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB8I] = {\n            textureFormat: $065afaecc735fbee$var$RGB_INTEGER,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                3\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB16UI] = {\n            textureFormat: $065afaecc735fbee$var$RGB_INTEGER,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                6\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_SHORT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB16I] = {\n            textureFormat: $065afaecc735fbee$var$RGB_INTEGER,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                6\n            ],\n            type: [\n                $065afaecc735fbee$var$SHORT\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB32UI] = {\n            textureFormat: $065afaecc735fbee$var$RGB_INTEGER,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                12\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB32I] = {\n            textureFormat: $065afaecc735fbee$var$RGB_INTEGER,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                12\n            ],\n            type: [\n                $065afaecc735fbee$var$INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA8] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$SRGB8_ALPHA8] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA8_SNORM] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB5_A1$1] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                4,\n                2,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$UNSIGNED_SHORT_5_5_5_1,\n                $065afaecc735fbee$var$UNSIGNED_INT_2_10_10_10_REV\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA4$1] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                4,\n                2\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1,\n                $065afaecc735fbee$var$UNSIGNED_SHORT_4_4_4_4\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB10_A2] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: true,\n            textureFilterable: true,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT_2_10_10_10_REV\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA16F] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: false,\n            textureFilterable: true,\n            bytesPerElement: [\n                16,\n                8\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1,\n                $065afaecc735fbee$var$HALF_FLOAT\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA32F] = {\n            textureFormat: $065afaecc735fbee$var$RGBA$1,\n            colorRenderable: false,\n            textureFilterable: false,\n            bytesPerElement: [\n                16\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA8UI] = {\n            textureFormat: $065afaecc735fbee$var$RGBA_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_BYTE$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA8I] = {\n            textureFormat: $065afaecc735fbee$var$RGBA_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$BYTE\n            ]\n        };\n        t[$065afaecc735fbee$var$RGB10_A2UI] = {\n            textureFormat: $065afaecc735fbee$var$RGBA_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT_2_10_10_10_REV\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA16UI] = {\n            textureFormat: $065afaecc735fbee$var$RGBA_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                8\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_SHORT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA16I] = {\n            textureFormat: $065afaecc735fbee$var$RGBA_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                8\n            ],\n            type: [\n                $065afaecc735fbee$var$SHORT\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA32I] = {\n            textureFormat: $065afaecc735fbee$var$RGBA_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                16\n            ],\n            type: [\n                $065afaecc735fbee$var$INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$RGBA32UI] = {\n            textureFormat: $065afaecc735fbee$var$RGBA_INTEGER,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                16\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT$1\n            ]\n        };\n        // Sized Internal\n        t[$065afaecc735fbee$var$DEPTH_COMPONENT16$1] = {\n            textureFormat: $065afaecc735fbee$var$DEPTH_COMPONENT$1,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                2,\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_SHORT$1,\n                $065afaecc735fbee$var$UNSIGNED_INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$DEPTH_COMPONENT24$1] = {\n            textureFormat: $065afaecc735fbee$var$DEPTH_COMPONENT$1,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$DEPTH_COMPONENT32F$1] = {\n            textureFormat: $065afaecc735fbee$var$DEPTH_COMPONENT$1,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT$1\n            ]\n        };\n        t[$065afaecc735fbee$var$DEPTH24_STENCIL8$1] = {\n            textureFormat: $065afaecc735fbee$var$DEPTH_STENCIL$1,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$UNSIGNED_INT_24_8\n            ]\n        };\n        t[$065afaecc735fbee$var$DEPTH32F_STENCIL8$1] = {\n            textureFormat: $065afaecc735fbee$var$DEPTH_STENCIL$1,\n            colorRenderable: true,\n            textureFilterable: false,\n            bytesPerElement: [\n                4\n            ],\n            type: [\n                $065afaecc735fbee$var$FLOAT_32_UNSIGNED_INT_24_8_REV\n            ]\n        };\n        Object.keys(t).forEach(function(internalFormat) {\n            const info = t[internalFormat];\n            info.bytesPerElementMap = {};\n            info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n                const type = info.type[ndx];\n                info.bytesPerElementMap[type] = bytesPerElement;\n            });\n        });\n        $065afaecc735fbee$var$s_textureInternalFormatInfo = t;\n    }\n    return $065afaecc735fbee$var$s_textureInternalFormatInfo[internalFormat];\n}\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$df2d41bf86d3b760(internalFormat, type) {\n    const info = $065afaecc735fbee$var$getTextureInternalFormatInfo(internalFormat);\n    if (!info) throw \"unknown internal format\";\n    const bytesPerElement = info.bytesPerElementMap[type];\n    if (bytesPerElement === undefined) throw \"unknown internal format\";\n    return bytesPerElement;\n}\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */ /**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$7972c3060d7259fe(internalFormat) {\n    const info = $065afaecc735fbee$var$getTextureInternalFormatInfo(internalFormat);\n    if (!info) throw \"unknown internal format\";\n    return {\n        format: info.textureFormat,\n        type: info.type[0]\n    };\n}\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */ function $065afaecc735fbee$var$isPowerOf2(value) {\n    return (value & value - 1) === 0;\n}\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$2058af87f75a4771(gl, width, height, internalFormat) {\n    if (!$065afaecc735fbee$export$e3518b1ac7891039(gl)) return $065afaecc735fbee$var$isPowerOf2(width) && $065afaecc735fbee$var$isPowerOf2(height);\n    const info = $065afaecc735fbee$var$getTextureInternalFormatInfo(internalFormat);\n    if (!info) throw \"unknown internal format\";\n    return info.colorRenderable && info.textureFilterable;\n}\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$586e511f2aeecefd(internalFormat) {\n    const info = $065afaecc735fbee$var$getTextureInternalFormatInfo(internalFormat);\n    if (!info) throw \"unknown internal format\";\n    return info.textureFilterable;\n}\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$4ef22c3eb774ec7f(format) {\n    const info = $065afaecc735fbee$var$formatInfo[format];\n    if (!info) throw \"unknown format: \" + format;\n    return info.numColorComponents;\n}\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */ function $065afaecc735fbee$var$getTextureTypeForArrayType(gl, src, defaultType) {\n    if ($065afaecc735fbee$var$isArrayBuffer(src)) return $065afaecc735fbee$export$bddf845047a0e959(src);\n    return defaultType || $065afaecc735fbee$var$UNSIGNED_BYTE$1;\n}\nfunction $065afaecc735fbee$var$guessDimensions(gl, target, width, height, numElements) {\n    if (numElements % 1 !== 0) throw \"can't guess dimensions\";\n    if (!width && !height) {\n        const size = Math.sqrt(numElements / (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1 ? 6 : 1));\n        if (size % 1 === 0) {\n            width = size;\n            height = size;\n        } else {\n            width = numElements;\n            height = 1;\n        }\n    } else if (!height) {\n        height = numElements / width;\n        if (height % 1) throw \"can't guess dimensions\";\n    } else if (!width) {\n        width = numElements / height;\n        if (width % 1) throw \"can't guess dimensions\";\n    }\n    return {\n        width: width,\n        height: height\n    };\n}\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$37b57533fe0ca238(color) {\n    $065afaecc735fbee$var$defaults$1.textureColor = new Uint8Array([\n        color[0] * 255,\n        color[1] * 255,\n        color[2] * 255,\n        color[3] * 255\n    ]);\n}\nfunction $065afaecc735fbee$export$13a00e79c3b46a21(newDefaults) {\n    $065afaecc735fbee$var$copyExistingProperties(newDefaults, $065afaecc735fbee$var$defaults$1);\n    if (newDefaults.textureColor) $065afaecc735fbee$export$37b57533fe0ca238(newDefaults.textureColor);\n}\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */ /**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [compareFunc] TEXTURE_COMPARE_FUNC setting\n * @property {number} [compareMode] TEXTURE_COMPARE_MODE setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */ /**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */ function $065afaecc735fbee$var$setPackState(gl, options) {\n    if (options.colorspaceConversion !== undefined) gl.pixelStorei($065afaecc735fbee$var$UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n    if (options.premultiplyAlpha !== undefined) gl.pixelStorei($065afaecc735fbee$var$UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n    if (options.flipY !== undefined) gl.pixelStorei($065afaecc735fbee$var$UNPACK_FLIP_Y_WEBGL, options.flipY);\n}\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */ function $065afaecc735fbee$var$setSkipStateToDefault(gl) {\n    gl.pixelStorei($065afaecc735fbee$var$UNPACK_ALIGNMENT, 4);\n    if ($065afaecc735fbee$export$e3518b1ac7891039(gl)) {\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_ROW_LENGTH, 0);\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_IMAGE_HEIGHT, 0);\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_SKIP_PIXELS, 0);\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_SKIP_ROWS, 0);\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_SKIP_IMAGES, 0);\n    }\n}\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */ function $065afaecc735fbee$var$setTextureSamplerParameters(gl, target, parameteriFn, options) {\n    if (options.minMag) {\n        parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_MIN_FILTER, options.minMag);\n        parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_MAG_FILTER, options.minMag);\n    }\n    if (options.min) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_MIN_FILTER, options.min);\n    if (options.mag) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_MAG_FILTER, options.mag);\n    if (options.wrap) {\n        parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_WRAP_S, options.wrap);\n        parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_WRAP_T, options.wrap);\n        if (target === $065afaecc735fbee$var$TEXTURE_3D$1 || $065afaecc735fbee$var$isSampler(gl, target)) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_WRAP_R, options.wrap);\n    }\n    if (options.wrapR) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_WRAP_R, options.wrapR);\n    if (options.wrapS) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_WRAP_S, options.wrapS);\n    if (options.wrapT) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_WRAP_T, options.wrapT);\n    if (options.minLod !== undefined) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_MIN_LOD, options.minLod);\n    if (options.maxLod !== undefined) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_MAX_LOD, options.maxLod);\n    if (options.baseLevel !== undefined) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_BASE_LEVEL, options.baseLevel);\n    if (options.maxLevel !== undefined) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_MAX_LEVEL, options.maxLevel);\n    if (options.compareFunc !== undefined) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_COMPARE_FUNC, options.compareFunc);\n    if (options.compareMode !== undefined) parameteriFn.call(gl, target, $065afaecc735fbee$var$TEXTURE_COMPARE_MODE, options.compareMode);\n}\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$145d4976a6287cac(gl, tex, options) {\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    gl.bindTexture(target, tex);\n    $065afaecc735fbee$var$setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$9473ec3d6ac9f748(gl, sampler, options) {\n    $065afaecc735fbee$var$setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */ function $065afaecc735fbee$export$9128f6a54e671ebe(gl, options) {\n    const sampler = gl.createSampler();\n    $065afaecc735fbee$export$9473ec3d6ac9f748(gl, sampler, options);\n    return sampler;\n}\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */ function $065afaecc735fbee$export$7f108a4cd20bc0(gl, samplerOptions) {\n    const samplers = {};\n    Object.keys(samplerOptions).forEach(function(name) {\n        samplers[name] = $065afaecc735fbee$export$9128f6a54e671ebe(gl, samplerOptions[name]);\n    });\n    return samplers;\n}\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */ function $065afaecc735fbee$var$make1Pixel(color) {\n    color = color || $065afaecc735fbee$var$defaults$1.textureColor;\n    if ($065afaecc735fbee$var$isArrayBuffer(color)) return color;\n    return new Uint8Array([\n        color[0] * 255,\n        color[1] * 255,\n        color[2] * 255,\n        color[3] * 255\n    ]);\n}\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$494a924bf2d77d9a(gl, tex, options, width, height, internalFormat) {\n    options = options || $065afaecc735fbee$var$defaults$1.textureOptions;\n    internalFormat = internalFormat || $065afaecc735fbee$var$RGBA$1;\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    width = width || options.width;\n    height = height || options.height;\n    gl.bindTexture(target, tex);\n    if ($065afaecc735fbee$export$2058af87f75a4771(gl, width, height, internalFormat)) gl.generateMipmap(target);\n    else {\n        const filtering = $065afaecc735fbee$export$586e511f2aeecefd(internalFormat) ? $065afaecc735fbee$var$LINEAR$1 : $065afaecc735fbee$var$NEAREST;\n        gl.texParameteri(target, $065afaecc735fbee$var$TEXTURE_MIN_FILTER, filtering);\n        gl.texParameteri(target, $065afaecc735fbee$var$TEXTURE_MAG_FILTER, filtering);\n        gl.texParameteri(target, $065afaecc735fbee$var$TEXTURE_WRAP_S, $065afaecc735fbee$var$CLAMP_TO_EDGE$1);\n        gl.texParameteri(target, $065afaecc735fbee$var$TEXTURE_WRAP_T, $065afaecc735fbee$var$CLAMP_TO_EDGE$1);\n    }\n}\nfunction $065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize(options) {\n    return options.auto === true || options.auto === undefined && options.level === undefined;\n}\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */ function $065afaecc735fbee$var$getCubeFaceOrder(gl, options) {\n    options = options || {};\n    return options.cubeFaceOrder || [\n        $065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_X,\n        $065afaecc735fbee$var$TEXTURE_CUBE_MAP_NEGATIVE_X,\n        $065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_Y,\n        $065afaecc735fbee$var$TEXTURE_CUBE_MAP_NEGATIVE_Y,\n        $065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_Z,\n        $065afaecc735fbee$var$TEXTURE_CUBE_MAP_NEGATIVE_Z\n    ];\n}\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */ /**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */ function $065afaecc735fbee$var$getCubeFacesWithNdx(gl, options) {\n    const faces = $065afaecc735fbee$var$getCubeFaceOrder(gl, options);\n    // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n    const facesWithNdx = faces.map(function(face, ndx) {\n        return {\n            face: face,\n            ndx: ndx\n        };\n    });\n    facesWithNdx.sort(function(a, b) {\n        return a.face - b.face;\n    });\n    return facesWithNdx;\n}\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */ function $065afaecc735fbee$export$8119aa4cbf12798b(gl, tex, element, options) {\n    options = options || $065afaecc735fbee$var$defaults$1.textureOptions;\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    const level = options.level || 0;\n    let width = element.width;\n    let height = element.height;\n    const internalFormat = options.internalFormat || options.format || $065afaecc735fbee$var$RGBA$1;\n    const formatType = $065afaecc735fbee$export$7972c3060d7259fe(internalFormat);\n    const format = options.format || formatType.format;\n    const type = options.type || formatType.type;\n    $065afaecc735fbee$var$setPackState(gl, options);\n    gl.bindTexture(target, tex);\n    if (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) {\n        // guess the parts\n        const imgWidth = element.width;\n        const imgHeight = element.height;\n        let size;\n        let slices;\n        if (imgWidth / 6 === imgHeight) {\n            // It's 6x1\n            size = imgHeight;\n            slices = [\n                0,\n                0,\n                1,\n                0,\n                2,\n                0,\n                3,\n                0,\n                4,\n                0,\n                5,\n                0\n            ];\n        } else if (imgHeight / 6 === imgWidth) {\n            // It's 1x6\n            size = imgWidth;\n            slices = [\n                0,\n                0,\n                0,\n                1,\n                0,\n                2,\n                0,\n                3,\n                0,\n                4,\n                0,\n                5\n            ];\n        } else if (imgWidth / 3 === imgHeight / 2) {\n            // It's 3x2\n            size = imgWidth / 3;\n            slices = [\n                0,\n                0,\n                1,\n                0,\n                2,\n                0,\n                0,\n                1,\n                1,\n                1,\n                2,\n                1\n            ];\n        } else if (imgWidth / 2 === imgHeight / 3) {\n            // It's 2x3\n            size = imgWidth / 2;\n            slices = [\n                0,\n                0,\n                1,\n                0,\n                0,\n                1,\n                1,\n                1,\n                0,\n                2,\n                1,\n                2\n            ];\n        } else throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n        const ctx = $065afaecc735fbee$var$getShared2DContext();\n        if (ctx) {\n            ctx.canvas.width = size;\n            ctx.canvas.height = size;\n            width = size;\n            height = size;\n            $065afaecc735fbee$var$getCubeFacesWithNdx(gl, options).forEach(function(f) {\n                const xOffset = slices[f.ndx * 2 + 0] * size;\n                const yOffset = slices[f.ndx * 2 + 1] * size;\n                ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n                gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n            });\n            // Free up the canvas memory\n            ctx.canvas.width = 1;\n            ctx.canvas.height = 1;\n        } else if (typeof createImageBitmap !== \"undefined\") {\n            // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n            // note lossy? (alpha is not premultiplied? although I'm not sure what\n            width = size;\n            height = size;\n            $065afaecc735fbee$var$getCubeFacesWithNdx(gl, options).forEach(function(f) {\n                const xOffset = slices[f.ndx * 2 + 0] * size;\n                const yOffset = slices[f.ndx * 2 + 1] * size;\n                // We can't easily use a default texture color here as it would have to match\n                // the type across all faces where as with a 2D one there's only one face\n                // so we're replacing everything all at once. It also has to be the correct size.\n                // On the other hand we need all faces to be the same size so as one face loads\n                // the rest match else the texture will be un-renderable.\n                gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n                createImageBitmap(element, xOffset, yOffset, size, size, {\n                    premultiplyAlpha: \"none\",\n                    colorSpaceConversion: \"none\"\n                }).then(function(imageBitmap) {\n                    $065afaecc735fbee$var$setPackState(gl, options);\n                    gl.bindTexture(target, tex);\n                    gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n                    if ($065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize(options)) $065afaecc735fbee$export$494a924bf2d77d9a(gl, tex, options, width, height, internalFormat);\n                });\n            });\n        }\n    } else if (target === $065afaecc735fbee$var$TEXTURE_3D$1 || target === $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1) {\n        const smallest = Math.min(element.width, element.height);\n        const largest = Math.max(element.width, element.height);\n        const depth = largest / smallest;\n        if (depth % 1 !== 0) throw \"can not compute 3D dimensions of element\";\n        const xMult = element.width === largest ? 1 : 0;\n        const yMult = element.height === largest ? 1 : 0;\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_ALIGNMENT, 1);\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_ROW_LENGTH, element.width);\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_IMAGE_HEIGHT, 0);\n        gl.pixelStorei($065afaecc735fbee$var$UNPACK_SKIP_IMAGES, 0);\n        gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n        for(let d = 0; d < depth; ++d){\n            const srcX = d * smallest * xMult;\n            const srcY = d * smallest * yMult;\n            gl.pixelStorei($065afaecc735fbee$var$UNPACK_SKIP_PIXELS, srcX);\n            gl.pixelStorei($065afaecc735fbee$var$UNPACK_SKIP_ROWS, srcY);\n            gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n        }\n        $065afaecc735fbee$var$setSkipStateToDefault(gl);\n    } else gl.texImage2D(target, level, internalFormat, format, type, element);\n    if ($065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize(options)) $065afaecc735fbee$export$494a924bf2d77d9a(gl, tex, options, width, height, internalFormat);\n    $065afaecc735fbee$export$145d4976a6287cac(gl, tex, options);\n}\nfunction $065afaecc735fbee$var$noop() {}\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */ function $065afaecc735fbee$var$urlIsSameOrigin(url) {\n    if (typeof document !== \"undefined\") {\n        // for IE really\n        const a = document.createElement(\"a\");\n        a.href = url;\n        return a.hostname === location.hostname && a.port === location.port && a.protocol === location.protocol;\n    } else {\n        const localOrigin = new URL(location.href).origin;\n        const urlOrigin = new URL(url, location.href).origin;\n        return urlOrigin === localOrigin;\n    }\n}\nfunction $065afaecc735fbee$var$setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n    return crossOrigin === undefined && !$065afaecc735fbee$var$urlIsSameOrigin(url) ? \"anonymous\" : crossOrigin;\n}\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */ function $065afaecc735fbee$var$loadImage(url, crossOrigin, callback) {\n    callback = callback || $065afaecc735fbee$var$noop;\n    let img;\n    crossOrigin = crossOrigin !== undefined ? crossOrigin : $065afaecc735fbee$var$defaults$1.crossOrigin;\n    crossOrigin = $065afaecc735fbee$var$setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n    if (typeof Image !== \"undefined\") {\n        img = new Image();\n        if (crossOrigin !== undefined) img.crossOrigin = crossOrigin;\n        const clearEventHandlers = function clearEventHandlers() {\n            img.removeEventListener(\"error\", onError); // eslint-disable-line\n            img.removeEventListener(\"load\", onLoad); // eslint-disable-line\n            img = null;\n        };\n        const onError = function onError() {\n            const msg = \"couldn't load image: \" + url;\n            $065afaecc735fbee$var$error$1(msg);\n            callback(msg, img);\n            clearEventHandlers();\n        };\n        const onLoad = function onLoad() {\n            callback(null, img);\n            clearEventHandlers();\n        };\n        img.addEventListener(\"error\", onError);\n        img.addEventListener(\"load\", onLoad);\n        img.src = url;\n        return img;\n    } else if (typeof ImageBitmap !== \"undefined\") {\n        let err;\n        let bm;\n        const cb = function cb() {\n            callback(err, bm);\n        };\n        const options = {};\n        if (crossOrigin) options.mode = \"cors\"; // TODO: not sure how to translate image.crossOrigin\n        fetch(url, options).then(function(response) {\n            if (!response.ok) throw response;\n            return response.blob();\n        }).then(function(blob) {\n            return createImageBitmap(blob, {\n                premultiplyAlpha: \"none\",\n                colorSpaceConversion: \"none\"\n            });\n        }).then(function(bitmap) {\n            // not sure if this works. We don't want\n            // to catch the user's error. So, call\n            // the callback in a timeout so we're\n            // not in this scope inside the promise.\n            bm = bitmap;\n            setTimeout(cb);\n        }).catch(function(e) {\n            err = e;\n            setTimeout(cb);\n        });\n        img = null;\n    }\n    return img;\n}\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */ function $065afaecc735fbee$var$isTexImageSource(obj) {\n    return typeof ImageBitmap !== \"undefined\" && obj instanceof ImageBitmap || typeof ImageData !== \"undefined\" && obj instanceof ImageData || typeof HTMLElement !== \"undefined\" && obj instanceof HTMLElement;\n}\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */ function $065afaecc735fbee$var$loadAndUseImage(obj, crossOrigin, callback) {\n    if ($065afaecc735fbee$var$isTexImageSource(obj)) {\n        setTimeout(function() {\n            callback(null, obj);\n        });\n        return obj;\n    }\n    return $065afaecc735fbee$var$loadImage(obj, crossOrigin, callback);\n}\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */ function $065afaecc735fbee$var$setTextureTo1PixelColor(gl, tex, options) {\n    options = options || $065afaecc735fbee$var$defaults$1.textureOptions;\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    gl.bindTexture(target, tex);\n    if (options.color === false) return;\n    // Assume it's a URL\n    // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n    const color = $065afaecc735fbee$var$make1Pixel(options.color);\n    if (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) for(let ii = 0; ii < 6; ++ii)gl.texImage2D($065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, $065afaecc735fbee$var$RGBA$1, 1, 1, 0, $065afaecc735fbee$var$RGBA$1, $065afaecc735fbee$var$UNSIGNED_BYTE$1, color);\n    else if (target === $065afaecc735fbee$var$TEXTURE_3D$1 || target === $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1) gl.texImage3D(target, 0, $065afaecc735fbee$var$RGBA$1, 1, 1, 1, 0, $065afaecc735fbee$var$RGBA$1, $065afaecc735fbee$var$UNSIGNED_BYTE$1, color);\n    else gl.texImage2D(target, 0, $065afaecc735fbee$var$RGBA$1, 1, 1, 0, $065afaecc735fbee$var$RGBA$1, $065afaecc735fbee$var$UNSIGNED_BYTE$1, color);\n}\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */ /**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */ /**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */ /**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */ /**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */ /**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$a0ce1a7e01ad3b32(gl, tex, options, callback) {\n    callback = callback || $065afaecc735fbee$var$noop;\n    options = options || $065afaecc735fbee$var$defaults$1.textureOptions;\n    $065afaecc735fbee$var$setTextureTo1PixelColor(gl, tex, options);\n    // Because it's async we need to copy the options.\n    options = Object.assign({}, options);\n    const img = $065afaecc735fbee$var$loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n        if (err) callback(err, tex, img);\n        else {\n            $065afaecc735fbee$export$8119aa4cbf12798b(gl, tex, img, options);\n            callback(null, tex, img);\n        }\n    });\n    return img;\n}\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */ function $065afaecc735fbee$var$loadCubemapFromUrls(gl, tex, options, callback) {\n    callback = callback || $065afaecc735fbee$var$noop;\n    const urls = options.src;\n    if (urls.length !== 6) throw \"there must be 6 urls for a cubemap\";\n    const level = options.level || 0;\n    const internalFormat = options.internalFormat || options.format || $065afaecc735fbee$var$RGBA$1;\n    const formatType = $065afaecc735fbee$export$7972c3060d7259fe(internalFormat);\n    const format = options.format || formatType.format;\n    const type = options.type || $065afaecc735fbee$var$UNSIGNED_BYTE$1;\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    if (target !== $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) throw \"target must be TEXTURE_CUBE_MAP\";\n    $065afaecc735fbee$var$setTextureTo1PixelColor(gl, tex, options);\n    // Because it's async we need to copy the options.\n    options = Object.assign({}, options);\n    let numToLoad = 6;\n    const errors = [];\n    const faces = $065afaecc735fbee$var$getCubeFaceOrder(gl, options);\n    let imgs; // eslint-disable-line\n    function uploadImg(faceTarget) {\n        return function(err, img) {\n            --numToLoad;\n            if (err) errors.push(err);\n            else if (img.width !== img.height) errors.push(\"cubemap face img is not a square: \" + img.src);\n            else {\n                $065afaecc735fbee$var$setPackState(gl, options);\n                gl.bindTexture(target, tex);\n                // So assuming this is the first image we now have one face that's img sized\n                // and 5 faces that are 1x1 pixel so size the other faces\n                if (numToLoad === 5) // use the default order\n                $065afaecc735fbee$var$getCubeFaceOrder().forEach(function(otherTarget) {\n                    // Should we re-use the same face or a color?\n                    gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n                });\n                else gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n                if ($065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize(options)) gl.generateMipmap(target);\n            }\n            if (numToLoad === 0) callback(errors.length ? errors : undefined, tex, imgs);\n        };\n    }\n    imgs = urls.map(function(url, ndx) {\n        return $065afaecc735fbee$var$loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n    });\n}\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */ function $065afaecc735fbee$var$loadSlicesFromUrls(gl, tex, options, callback) {\n    callback = callback || $065afaecc735fbee$var$noop;\n    const urls = options.src;\n    const internalFormat = options.internalFormat || options.format || $065afaecc735fbee$var$RGBA$1;\n    const formatType = $065afaecc735fbee$export$7972c3060d7259fe(internalFormat);\n    const format = options.format || formatType.format;\n    const type = options.type || $065afaecc735fbee$var$UNSIGNED_BYTE$1;\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1;\n    if (target !== $065afaecc735fbee$var$TEXTURE_3D$1 && target !== $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1) throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n    $065afaecc735fbee$var$setTextureTo1PixelColor(gl, tex, options);\n    // Because it's async we need to copy the options.\n    options = Object.assign({}, options);\n    let numToLoad = urls.length;\n    const errors = [];\n    let imgs; // eslint-disable-line\n    const level = options.level || 0;\n    let width = options.width;\n    let height = options.height;\n    const depth = urls.length;\n    let firstImage = true;\n    function uploadImg(slice) {\n        return function(err, img) {\n            --numToLoad;\n            if (err) errors.push(err);\n            else {\n                $065afaecc735fbee$var$setPackState(gl, options);\n                gl.bindTexture(target, tex);\n                if (firstImage) {\n                    firstImage = false;\n                    width = options.width || img.width;\n                    height = options.height || img.height;\n                    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n                    // put it in every slice otherwise some slices will be 0,0,0,0\n                    for(let s = 0; s < depth; ++s)gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n                } else {\n                    let src = img;\n                    let ctx;\n                    if (img.width !== width || img.height !== height) {\n                        // Size the image to fix\n                        ctx = $065afaecc735fbee$var$getShared2DContext();\n                        src = ctx.canvas;\n                        ctx.canvas.width = width;\n                        ctx.canvas.height = height;\n                        ctx.drawImage(img, 0, 0, width, height);\n                    }\n                    gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n                    // free the canvas memory\n                    if (ctx && src === ctx.canvas) {\n                        ctx.canvas.width = 0;\n                        ctx.canvas.height = 0;\n                    }\n                }\n                if ($065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize(options)) gl.generateMipmap(target);\n            }\n            if (numToLoad === 0) callback(errors.length ? errors : undefined, tex, imgs);\n        };\n    }\n    imgs = urls.map(function(url, ndx) {\n        return $065afaecc735fbee$var$loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n    });\n}\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$3d91b74019c3ded9(gl, tex, src, options) {\n    options = options || $065afaecc735fbee$var$defaults$1.textureOptions;\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    gl.bindTexture(target, tex);\n    let width = options.width;\n    let height = options.height;\n    let depth = options.depth;\n    const level = options.level || 0;\n    const internalFormat = options.internalFormat || options.format || $065afaecc735fbee$var$RGBA$1;\n    const formatType = $065afaecc735fbee$export$7972c3060d7259fe(internalFormat);\n    const format = options.format || formatType.format;\n    const type = options.type || $065afaecc735fbee$var$getTextureTypeForArrayType(gl, src, formatType.type);\n    if (!$065afaecc735fbee$var$isArrayBuffer(src)) {\n        const Type = $065afaecc735fbee$export$3dc63662699923fc(type);\n        src = new Type(src);\n    } else if (src instanceof Uint8ClampedArray) src = new Uint8Array(src.buffer);\n    const bytesPerElement = $065afaecc735fbee$export$df2d41bf86d3b760(internalFormat, type);\n    const numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?\n    if (numElements % 1) throw \"length wrong size for format: \" + $065afaecc735fbee$export$e97753eae63e4e62(gl, format);\n    let dimensions;\n    if (target === $065afaecc735fbee$var$TEXTURE_3D$1 || target === $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1) {\n        if (!width && !height && !depth) {\n            const size = Math.cbrt(numElements);\n            if (size % 1 !== 0) throw \"can't guess cube size of array of numElements: \" + numElements;\n            width = size;\n            height = size;\n            depth = size;\n        } else if (width && (!height || !depth)) {\n            dimensions = $065afaecc735fbee$var$guessDimensions(gl, target, height, depth, numElements / width);\n            height = dimensions.width;\n            depth = dimensions.height;\n        } else if (height && (!width || !depth)) {\n            dimensions = $065afaecc735fbee$var$guessDimensions(gl, target, width, depth, numElements / height);\n            width = dimensions.width;\n            depth = dimensions.height;\n        } else {\n            dimensions = $065afaecc735fbee$var$guessDimensions(gl, target, width, height, numElements / depth);\n            width = dimensions.width;\n            height = dimensions.height;\n        }\n    } else {\n        dimensions = $065afaecc735fbee$var$guessDimensions(gl, target, width, height, numElements);\n        width = dimensions.width;\n        height = dimensions.height;\n    }\n    $065afaecc735fbee$var$setSkipStateToDefault(gl);\n    gl.pixelStorei($065afaecc735fbee$var$UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n    $065afaecc735fbee$var$setPackState(gl, options);\n    if (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) {\n        const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n        const faceSize = numElements / 6 * elementsPerElement;\n        $065afaecc735fbee$var$getCubeFacesWithNdx(gl, options).forEach((f)=>{\n            const offset = faceSize * f.ndx;\n            const data = src.subarray(offset, offset + faceSize);\n            gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n        });\n    } else if (target === $065afaecc735fbee$var$TEXTURE_3D$1 || target === $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1) gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n    else gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n    return {\n        width: width,\n        height: height,\n        depth: depth,\n        type: type\n    };\n}\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$541fcc5ad0f34e5a(gl, tex, options) {\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    gl.bindTexture(target, tex);\n    const level = options.level || 0;\n    const internalFormat = options.internalFormat || options.format || $065afaecc735fbee$var$RGBA$1;\n    const formatType = $065afaecc735fbee$export$7972c3060d7259fe(internalFormat);\n    const format = options.format || formatType.format;\n    const type = options.type || formatType.type;\n    $065afaecc735fbee$var$setPackState(gl, options);\n    if (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) for(let ii = 0; ii < 6; ++ii)gl.texImage2D($065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    else if (target === $065afaecc735fbee$var$TEXTURE_3D$1 || target === $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1) gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n    else gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n}\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$37b981a8c575f415(gl, options, callback) {\n    callback = callback || $065afaecc735fbee$var$noop;\n    options = options || $065afaecc735fbee$var$defaults$1.textureOptions;\n    const tex = gl.createTexture();\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    let width = options.width || 1;\n    let height = options.height || 1;\n    const internalFormat = options.internalFormat || $065afaecc735fbee$var$RGBA$1;\n    gl.bindTexture(target, tex);\n    if (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) {\n        // this should have been the default for cubemaps :(\n        gl.texParameteri(target, $065afaecc735fbee$var$TEXTURE_WRAP_S, $065afaecc735fbee$var$CLAMP_TO_EDGE$1);\n        gl.texParameteri(target, $065afaecc735fbee$var$TEXTURE_WRAP_T, $065afaecc735fbee$var$CLAMP_TO_EDGE$1);\n    }\n    let src = options.src;\n    if (src) {\n        if (typeof src === \"function\") src = src(gl, options);\n        if (typeof src === \"string\") $065afaecc735fbee$export$a0ce1a7e01ad3b32(gl, tex, options, callback);\n        else if ($065afaecc735fbee$var$isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === \"number\" || Array.isArray(src[0]) || $065afaecc735fbee$var$isArrayBuffer(src[0]))) {\n            const dimensions = $065afaecc735fbee$export$3d91b74019c3ded9(gl, tex, src, options);\n            width = dimensions.width;\n            height = dimensions.height;\n        } else if (Array.isArray(src) && (typeof src[0] === \"string\" || $065afaecc735fbee$var$isTexImageSource(src[0]))) {\n            if (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) $065afaecc735fbee$var$loadCubemapFromUrls(gl, tex, options, callback);\n            else $065afaecc735fbee$var$loadSlicesFromUrls(gl, tex, options, callback);\n        } else {\n            $065afaecc735fbee$export$8119aa4cbf12798b(gl, tex, src, options);\n            width = src.width;\n            height = src.height;\n        }\n    } else $065afaecc735fbee$export$541fcc5ad0f34e5a(gl, tex, options);\n    if ($065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize(options)) $065afaecc735fbee$export$494a924bf2d77d9a(gl, tex, options, width, height, internalFormat);\n    $065afaecc735fbee$export$145d4976a6287cac(gl, tex, options);\n    return tex;\n}\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$1d581f00cfe12937(gl, tex, options, width, height, depth) {\n    width = width || options.width;\n    height = height || options.height;\n    depth = depth || options.depth;\n    const target = options.target || $065afaecc735fbee$var$TEXTURE_2D$2;\n    gl.bindTexture(target, tex);\n    const level = options.level || 0;\n    const internalFormat = options.internalFormat || options.format || $065afaecc735fbee$var$RGBA$1;\n    const formatType = $065afaecc735fbee$export$7972c3060d7259fe(internalFormat);\n    const format = options.format || formatType.format;\n    let type;\n    const src = options.src;\n    if (!src) type = options.type || formatType.type;\n    else if ($065afaecc735fbee$var$isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === \"number\") type = options.type || $065afaecc735fbee$var$getTextureTypeForArrayType(gl, src, formatType.type);\n    else type = options.type || formatType.type;\n    if (target === $065afaecc735fbee$var$TEXTURE_CUBE_MAP$1) for(let ii = 0; ii < 6; ++ii)gl.texImage2D($065afaecc735fbee$var$TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    else if (target === $065afaecc735fbee$var$TEXTURE_3D$1 || target === $065afaecc735fbee$var$TEXTURE_2D_ARRAY$1) gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n    else gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n}\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */ function $065afaecc735fbee$var$isAsyncSrc(src) {\n    return typeof src === \"string\" || Array.isArray(src) && typeof src[0] === \"string\";\n}\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */ function $065afaecc735fbee$export$a1d6112a62597a1b(gl, textureOptions, callback) {\n    callback = callback || $065afaecc735fbee$var$noop;\n    let numDownloading = 0;\n    const errors = [];\n    const textures = {};\n    const images = {};\n    function callCallbackIfReady() {\n        if (numDownloading === 0) setTimeout(function() {\n            callback(errors.length ? errors : undefined, textures, images);\n        }, 0);\n    }\n    Object.keys(textureOptions).forEach(function(name) {\n        const options = textureOptions[name];\n        let onLoadFn;\n        if ($065afaecc735fbee$var$isAsyncSrc(options.src)) {\n            onLoadFn = function(err, tex, img) {\n                images[name] = img;\n                --numDownloading;\n                if (err) errors.push(err);\n                callCallbackIfReady();\n            };\n            ++numDownloading;\n        }\n        textures[name] = $065afaecc735fbee$export$37b981a8c575f415(gl, options, onLoadFn);\n    });\n    // queue the callback if there are no images to download.\n    // We do this because if your code is structured to wait for\n    // images to download but then you comment out all the async\n    // images your code would break.\n    callCallbackIfReady();\n    return textures;\n}\nvar $065afaecc735fbee$export$c3bd26ce2da80660 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    setTextureDefaults_: $065afaecc735fbee$export$13a00e79c3b46a21,\n    createSampler: $065afaecc735fbee$export$9128f6a54e671ebe,\n    createSamplers: $065afaecc735fbee$export$7f108a4cd20bc0,\n    setSamplerParameters: $065afaecc735fbee$export$9473ec3d6ac9f748,\n    createTexture: $065afaecc735fbee$export$37b981a8c575f415,\n    setEmptyTexture: $065afaecc735fbee$export$541fcc5ad0f34e5a,\n    setTextureFromArray: $065afaecc735fbee$export$3d91b74019c3ded9,\n    loadTextureFromUrl: $065afaecc735fbee$export$a0ce1a7e01ad3b32,\n    setTextureFromElement: $065afaecc735fbee$export$8119aa4cbf12798b,\n    setTextureFilteringForSize: $065afaecc735fbee$export$494a924bf2d77d9a,\n    setTextureParameters: $065afaecc735fbee$export$145d4976a6287cac,\n    setDefaultTextureColor: $065afaecc735fbee$export$37b57533fe0ca238,\n    createTextures: $065afaecc735fbee$export$a1d6112a62597a1b,\n    resizeTexture: $065afaecc735fbee$export$1d581f00cfe12937,\n    canGenerateMipmap: $065afaecc735fbee$export$2058af87f75a4771,\n    canFilter: $065afaecc735fbee$export$586e511f2aeecefd,\n    getNumComponentsForFormat: $065afaecc735fbee$export$4ef22c3eb774ec7f,\n    getBytesPerElementForInternalFormat: $065afaecc735fbee$export$df2d41bf86d3b760,\n    getFormatAndTypeForInternalFormat: $065afaecc735fbee$export$7972c3060d7259fe\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ /**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */ const $065afaecc735fbee$var$error = $065afaecc735fbee$var$error$1;\nconst $065afaecc735fbee$var$warn = $065afaecc735fbee$var$warn$1;\nfunction $065afaecc735fbee$var$getElementById(id) {\n    return typeof document !== \"undefined\" && document.getElementById ? document.getElementById(id) : null;\n}\nconst $065afaecc735fbee$var$TEXTURE0 = 0x84c0;\nconst $065afaecc735fbee$var$DYNAMIC_DRAW = 0x88e8;\nconst $065afaecc735fbee$var$ARRAY_BUFFER = 0x8892;\nconst $065afaecc735fbee$var$ELEMENT_ARRAY_BUFFER$1 = 0x8893;\nconst $065afaecc735fbee$var$UNIFORM_BUFFER = 0x8a11;\nconst $065afaecc735fbee$var$TRANSFORM_FEEDBACK_BUFFER = 0x8c8e;\nconst $065afaecc735fbee$var$TRANSFORM_FEEDBACK = 0x8e22;\nconst $065afaecc735fbee$var$COMPILE_STATUS = 0x8b81;\nconst $065afaecc735fbee$var$LINK_STATUS = 0x8b82;\nconst $065afaecc735fbee$var$FRAGMENT_SHADER = 0x8b30;\nconst $065afaecc735fbee$var$VERTEX_SHADER = 0x8b31;\nconst $065afaecc735fbee$var$SEPARATE_ATTRIBS = 0x8c8d;\nconst $065afaecc735fbee$var$ACTIVE_UNIFORMS = 0x8b86;\nconst $065afaecc735fbee$var$ACTIVE_ATTRIBUTES = 0x8b89;\nconst $065afaecc735fbee$var$TRANSFORM_FEEDBACK_VARYINGS = 0x8c83;\nconst $065afaecc735fbee$var$ACTIVE_UNIFORM_BLOCKS = 0x8a36;\nconst $065afaecc735fbee$var$UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8a44;\nconst $065afaecc735fbee$var$UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst $065afaecc735fbee$var$UNIFORM_BLOCK_DATA_SIZE = 0x8a40;\nconst $065afaecc735fbee$var$UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8a43;\nconst $065afaecc735fbee$var$FLOAT = 0x1406;\nconst $065afaecc735fbee$var$FLOAT_VEC2 = 0x8B50;\nconst $065afaecc735fbee$var$FLOAT_VEC3 = 0x8B51;\nconst $065afaecc735fbee$var$FLOAT_VEC4 = 0x8B52;\nconst $065afaecc735fbee$var$INT = 0x1404;\nconst $065afaecc735fbee$var$INT_VEC2 = 0x8B53;\nconst $065afaecc735fbee$var$INT_VEC3 = 0x8B54;\nconst $065afaecc735fbee$var$INT_VEC4 = 0x8B55;\nconst $065afaecc735fbee$var$BOOL = 0x8B56;\nconst $065afaecc735fbee$var$BOOL_VEC2 = 0x8B57;\nconst $065afaecc735fbee$var$BOOL_VEC3 = 0x8B58;\nconst $065afaecc735fbee$var$BOOL_VEC4 = 0x8B59;\nconst $065afaecc735fbee$var$FLOAT_MAT2 = 0x8B5A;\nconst $065afaecc735fbee$var$FLOAT_MAT3 = 0x8B5B;\nconst $065afaecc735fbee$var$FLOAT_MAT4 = 0x8B5C;\nconst $065afaecc735fbee$var$SAMPLER_2D = 0x8B5E;\nconst $065afaecc735fbee$var$SAMPLER_CUBE = 0x8B60;\nconst $065afaecc735fbee$var$SAMPLER_3D = 0x8B5F;\nconst $065afaecc735fbee$var$SAMPLER_2D_SHADOW = 0x8B62;\nconst $065afaecc735fbee$var$FLOAT_MAT2x3 = 0x8B65;\nconst $065afaecc735fbee$var$FLOAT_MAT2x4 = 0x8B66;\nconst $065afaecc735fbee$var$FLOAT_MAT3x2 = 0x8B67;\nconst $065afaecc735fbee$var$FLOAT_MAT3x4 = 0x8B68;\nconst $065afaecc735fbee$var$FLOAT_MAT4x2 = 0x8B69;\nconst $065afaecc735fbee$var$FLOAT_MAT4x3 = 0x8B6A;\nconst $065afaecc735fbee$var$SAMPLER_2D_ARRAY = 0x8DC1;\nconst $065afaecc735fbee$var$SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\nconst $065afaecc735fbee$var$SAMPLER_CUBE_SHADOW = 0x8DC5;\nconst $065afaecc735fbee$var$UNSIGNED_INT = 0x1405;\nconst $065afaecc735fbee$var$UNSIGNED_INT_VEC2 = 0x8DC6;\nconst $065afaecc735fbee$var$UNSIGNED_INT_VEC3 = 0x8DC7;\nconst $065afaecc735fbee$var$UNSIGNED_INT_VEC4 = 0x8DC8;\nconst $065afaecc735fbee$var$INT_SAMPLER_2D = 0x8DCA;\nconst $065afaecc735fbee$var$INT_SAMPLER_3D = 0x8DCB;\nconst $065afaecc735fbee$var$INT_SAMPLER_CUBE = 0x8DCC;\nconst $065afaecc735fbee$var$INT_SAMPLER_2D_ARRAY = 0x8DCF;\nconst $065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\nconst $065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\nconst $065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\nconst $065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\nconst $065afaecc735fbee$var$TEXTURE_2D$1 = 0x0DE1;\nconst $065afaecc735fbee$var$TEXTURE_CUBE_MAP = 0x8513;\nconst $065afaecc735fbee$var$TEXTURE_3D = 0x806F;\nconst $065afaecc735fbee$var$TEXTURE_2D_ARRAY = 0x8C1A;\nconst $065afaecc735fbee$var$typeMap = {};\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */ function $065afaecc735fbee$var$getBindPointForSamplerType(gl, type) {\n    return $065afaecc735fbee$var$typeMap[type].bindPoint;\n}\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\nfunction $065afaecc735fbee$var$floatSetter(gl, location1) {\n    return function(v) {\n        gl.uniform1f(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatArraySetter(gl, location1) {\n    return function(v) {\n        gl.uniform1fv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatVec2Setter(gl, location1) {\n    return function(v) {\n        gl.uniform2fv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatVec3Setter(gl, location1) {\n    return function(v) {\n        gl.uniform3fv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatVec4Setter(gl, location1) {\n    return function(v) {\n        gl.uniform4fv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$intSetter(gl, location1) {\n    return function(v) {\n        gl.uniform1i(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$intArraySetter(gl, location1) {\n    return function(v) {\n        gl.uniform1iv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$intVec2Setter(gl, location1) {\n    return function(v) {\n        gl.uniform2iv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$intVec3Setter(gl, location1) {\n    return function(v) {\n        gl.uniform3iv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$intVec4Setter(gl, location1) {\n    return function(v) {\n        gl.uniform4iv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$uintSetter(gl, location1) {\n    return function(v) {\n        gl.uniform1ui(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$uintArraySetter(gl, location1) {\n    return function(v) {\n        gl.uniform1uiv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$uintVec2Setter(gl, location1) {\n    return function(v) {\n        gl.uniform2uiv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$uintVec3Setter(gl, location1) {\n    return function(v) {\n        gl.uniform3uiv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$uintVec4Setter(gl, location1) {\n    return function(v) {\n        gl.uniform4uiv(location1, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat2Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix2fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat3Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix3fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat4Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix4fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat23Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix2x3fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat32Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix3x2fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat24Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix2x4fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat42Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix4x2fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat34Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix3x4fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$floatMat43Setter(gl, location1) {\n    return function(v) {\n        gl.uniformMatrix4x3fv(location1, false, v);\n    };\n}\nfunction $065afaecc735fbee$var$samplerSetter(gl, type, unit, location1) {\n    const bindPoint = $065afaecc735fbee$var$getBindPointForSamplerType(gl, type);\n    return $065afaecc735fbee$export$e3518b1ac7891039(gl) ? function(textureOrPair) {\n        let texture;\n        let sampler;\n        if (!textureOrPair || $065afaecc735fbee$var$isTexture(gl, textureOrPair)) {\n            texture = textureOrPair;\n            sampler = null;\n        } else {\n            texture = textureOrPair.texture;\n            sampler = textureOrPair.sampler;\n        }\n        gl.uniform1i(location1, unit);\n        gl.activeTexture($065afaecc735fbee$var$TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n        gl.bindSampler(unit, sampler);\n    } : function(texture) {\n        gl.uniform1i(location1, unit);\n        gl.activeTexture($065afaecc735fbee$var$TEXTURE0 + unit);\n        gl.bindTexture(bindPoint, texture);\n    };\n}\nfunction $065afaecc735fbee$var$samplerArraySetter(gl, type, unit, location1, size) {\n    const bindPoint = $065afaecc735fbee$var$getBindPointForSamplerType(gl, type);\n    const units = new Int32Array(size);\n    for(let ii = 0; ii < size; ++ii)units[ii] = unit + ii;\n    return $065afaecc735fbee$export$e3518b1ac7891039(gl) ? function(textures) {\n        gl.uniform1iv(location1, units);\n        textures.forEach(function(textureOrPair, index) {\n            gl.activeTexture($065afaecc735fbee$var$TEXTURE0 + units[index]);\n            let texture;\n            let sampler;\n            if (!textureOrPair || $065afaecc735fbee$var$isTexture(gl, textureOrPair)) {\n                texture = textureOrPair;\n                sampler = null;\n            } else {\n                texture = textureOrPair.texture;\n                sampler = textureOrPair.sampler;\n            }\n            gl.bindSampler(unit, sampler);\n            gl.bindTexture(bindPoint, texture);\n        });\n    } : function(textures) {\n        gl.uniform1iv(location1, units);\n        textures.forEach(function(texture, index) {\n            gl.activeTexture($065afaecc735fbee$var$TEXTURE0 + units[index]);\n            gl.bindTexture(bindPoint, texture);\n        });\n    };\n}\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT] = {\n    Type: Float32Array,\n    size: 4,\n    setter: $065afaecc735fbee$var$floatSetter,\n    arraySetter: $065afaecc735fbee$var$floatArraySetter\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_VEC2] = {\n    Type: Float32Array,\n    size: 8,\n    setter: $065afaecc735fbee$var$floatVec2Setter,\n    cols: 2\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_VEC3] = {\n    Type: Float32Array,\n    size: 12,\n    setter: $065afaecc735fbee$var$floatVec3Setter,\n    cols: 3\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_VEC4] = {\n    Type: Float32Array,\n    size: 16,\n    setter: $065afaecc735fbee$var$floatVec4Setter,\n    cols: 4\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT] = {\n    Type: Int32Array,\n    size: 4,\n    setter: $065afaecc735fbee$var$intSetter,\n    arraySetter: $065afaecc735fbee$var$intArraySetter\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT_VEC2] = {\n    Type: Int32Array,\n    size: 8,\n    setter: $065afaecc735fbee$var$intVec2Setter,\n    cols: 2\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT_VEC3] = {\n    Type: Int32Array,\n    size: 12,\n    setter: $065afaecc735fbee$var$intVec3Setter,\n    cols: 3\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT_VEC4] = {\n    Type: Int32Array,\n    size: 16,\n    setter: $065afaecc735fbee$var$intVec4Setter,\n    cols: 4\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT] = {\n    Type: Uint32Array,\n    size: 4,\n    setter: $065afaecc735fbee$var$uintSetter,\n    arraySetter: $065afaecc735fbee$var$uintArraySetter\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT_VEC2] = {\n    Type: Uint32Array,\n    size: 8,\n    setter: $065afaecc735fbee$var$uintVec2Setter,\n    cols: 2\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT_VEC3] = {\n    Type: Uint32Array,\n    size: 12,\n    setter: $065afaecc735fbee$var$uintVec3Setter,\n    cols: 3\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT_VEC4] = {\n    Type: Uint32Array,\n    size: 16,\n    setter: $065afaecc735fbee$var$uintVec4Setter,\n    cols: 4\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$BOOL] = {\n    Type: Uint32Array,\n    size: 4,\n    setter: $065afaecc735fbee$var$intSetter,\n    arraySetter: $065afaecc735fbee$var$intArraySetter\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$BOOL_VEC2] = {\n    Type: Uint32Array,\n    size: 8,\n    setter: $065afaecc735fbee$var$intVec2Setter,\n    cols: 2\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$BOOL_VEC3] = {\n    Type: Uint32Array,\n    size: 12,\n    setter: $065afaecc735fbee$var$intVec3Setter,\n    cols: 3\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$BOOL_VEC4] = {\n    Type: Uint32Array,\n    size: 16,\n    setter: $065afaecc735fbee$var$intVec4Setter,\n    cols: 4\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT2] = {\n    Type: Float32Array,\n    size: 32,\n    setter: $065afaecc735fbee$var$floatMat2Setter,\n    rows: 2,\n    cols: 2\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT3] = {\n    Type: Float32Array,\n    size: 48,\n    setter: $065afaecc735fbee$var$floatMat3Setter,\n    rows: 3,\n    cols: 3\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT4] = {\n    Type: Float32Array,\n    size: 64,\n    setter: $065afaecc735fbee$var$floatMat4Setter,\n    rows: 4,\n    cols: 4\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT2x3] = {\n    Type: Float32Array,\n    size: 32,\n    setter: $065afaecc735fbee$var$floatMat23Setter,\n    rows: 2,\n    cols: 3\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT2x4] = {\n    Type: Float32Array,\n    size: 32,\n    setter: $065afaecc735fbee$var$floatMat24Setter,\n    rows: 2,\n    cols: 4\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT3x2] = {\n    Type: Float32Array,\n    size: 48,\n    setter: $065afaecc735fbee$var$floatMat32Setter,\n    rows: 3,\n    cols: 2\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT3x4] = {\n    Type: Float32Array,\n    size: 48,\n    setter: $065afaecc735fbee$var$floatMat34Setter,\n    rows: 3,\n    cols: 4\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT4x2] = {\n    Type: Float32Array,\n    size: 64,\n    setter: $065afaecc735fbee$var$floatMat42Setter,\n    rows: 4,\n    cols: 2\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$FLOAT_MAT4x3] = {\n    Type: Float32Array,\n    size: 64,\n    setter: $065afaecc735fbee$var$floatMat43Setter,\n    rows: 4,\n    cols: 3\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$SAMPLER_2D] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D$1\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$SAMPLER_CUBE] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_CUBE_MAP\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$SAMPLER_3D] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_3D\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$SAMPLER_2D_SHADOW] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D$1\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$SAMPLER_2D_ARRAY] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D_ARRAY\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$SAMPLER_2D_ARRAY_SHADOW] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D_ARRAY\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$SAMPLER_CUBE_SHADOW] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_CUBE_MAP\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT_SAMPLER_2D] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D$1\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT_SAMPLER_3D] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_3D\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT_SAMPLER_CUBE] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_CUBE_MAP\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$INT_SAMPLER_2D_ARRAY] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D_ARRAY\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_2D] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D$1\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_3D] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_3D\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_CUBE] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_CUBE_MAP\n};\n$065afaecc735fbee$var$typeMap[$065afaecc735fbee$var$UNSIGNED_INT_SAMPLER_2D_ARRAY] = {\n    Type: null,\n    size: 0,\n    setter: $065afaecc735fbee$var$samplerSetter,\n    arraySetter: $065afaecc735fbee$var$samplerArraySetter,\n    bindPoint: $065afaecc735fbee$var$TEXTURE_2D_ARRAY\n};\nfunction $065afaecc735fbee$var$floatAttribSetter(gl, index) {\n    return function(b) {\n        if (b.value) {\n            gl.disableVertexAttribArray(index);\n            switch(b.value.length){\n                case 4:\n                    gl.vertexAttrib4fv(index, b.value);\n                    break;\n                case 3:\n                    gl.vertexAttrib3fv(index, b.value);\n                    break;\n                case 2:\n                    gl.vertexAttrib2fv(index, b.value);\n                    break;\n                case 1:\n                    gl.vertexAttrib1fv(index, b.value);\n                    break;\n                default:\n                    throw new Error(\"the length of a float constant value must be between 1 and 4!\");\n            }\n        } else {\n            gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER, b.buffer);\n            gl.enableVertexAttribArray(index);\n            gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || $065afaecc735fbee$var$FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n            if (gl.vertexAttribDivisor) gl.vertexAttribDivisor(index, b.divisor || 0);\n        }\n    };\n}\nfunction $065afaecc735fbee$var$intAttribSetter(gl, index) {\n    return function(b) {\n        if (b.value) {\n            gl.disableVertexAttribArray(index);\n            if (b.value.length === 4) gl.vertexAttrib4iv(index, b.value);\n            else throw new Error(\"The length of an integer constant value must be 4!\");\n        } else {\n            gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER, b.buffer);\n            gl.enableVertexAttribArray(index);\n            gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || $065afaecc735fbee$var$INT, b.stride || 0, b.offset || 0);\n            if (gl.vertexAttribDivisor) gl.vertexAttribDivisor(index, b.divisor || 0);\n        }\n    };\n}\nfunction $065afaecc735fbee$var$uintAttribSetter(gl, index) {\n    return function(b) {\n        if (b.value) {\n            gl.disableVertexAttribArray(index);\n            if (b.value.length === 4) gl.vertexAttrib4uiv(index, b.value);\n            else throw new Error(\"The length of an unsigned integer constant value must be 4!\");\n        } else {\n            gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER, b.buffer);\n            gl.enableVertexAttribArray(index);\n            gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || $065afaecc735fbee$var$UNSIGNED_INT, b.stride || 0, b.offset || 0);\n            if (gl.vertexAttribDivisor) gl.vertexAttribDivisor(index, b.divisor || 0);\n        }\n    };\n}\nfunction $065afaecc735fbee$var$matAttribSetter(gl, index, typeInfo) {\n    const defaultSize = typeInfo.size;\n    const count = typeInfo.count;\n    return function(b) {\n        gl.bindBuffer($065afaecc735fbee$var$ARRAY_BUFFER, b.buffer);\n        const numComponents = b.size || b.numComponents || defaultSize;\n        const size = numComponents / count;\n        const type = b.type || $065afaecc735fbee$var$FLOAT;\n        const typeInfo = $065afaecc735fbee$var$typeMap[type];\n        const stride = typeInfo.size * numComponents;\n        const normalize = b.normalize || false;\n        const offset = b.offset || 0;\n        const rowOffset = stride / count;\n        for(let i = 0; i < count; ++i){\n            gl.enableVertexAttribArray(index + i);\n            gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);\n            if (gl.vertexAttribDivisor) gl.vertexAttribDivisor(index + i, b.divisor || 0);\n        }\n    };\n}\nconst $065afaecc735fbee$var$attrTypeMap = {};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$FLOAT] = {\n    size: 4,\n    setter: $065afaecc735fbee$var$floatAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$FLOAT_VEC2] = {\n    size: 8,\n    setter: $065afaecc735fbee$var$floatAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$FLOAT_VEC3] = {\n    size: 12,\n    setter: $065afaecc735fbee$var$floatAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$FLOAT_VEC4] = {\n    size: 16,\n    setter: $065afaecc735fbee$var$floatAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$INT] = {\n    size: 4,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$INT_VEC2] = {\n    size: 8,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$INT_VEC3] = {\n    size: 12,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$INT_VEC4] = {\n    size: 16,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$UNSIGNED_INT] = {\n    size: 4,\n    setter: $065afaecc735fbee$var$uintAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$UNSIGNED_INT_VEC2] = {\n    size: 8,\n    setter: $065afaecc735fbee$var$uintAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$UNSIGNED_INT_VEC3] = {\n    size: 12,\n    setter: $065afaecc735fbee$var$uintAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$UNSIGNED_INT_VEC4] = {\n    size: 16,\n    setter: $065afaecc735fbee$var$uintAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$BOOL] = {\n    size: 4,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$BOOL_VEC2] = {\n    size: 8,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$BOOL_VEC3] = {\n    size: 12,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$BOOL_VEC4] = {\n    size: 16,\n    setter: $065afaecc735fbee$var$intAttribSetter\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$FLOAT_MAT2] = {\n    size: 4,\n    setter: $065afaecc735fbee$var$matAttribSetter,\n    count: 2\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$FLOAT_MAT3] = {\n    size: 9,\n    setter: $065afaecc735fbee$var$matAttribSetter,\n    count: 3\n};\n$065afaecc735fbee$var$attrTypeMap[$065afaecc735fbee$var$FLOAT_MAT4] = {\n    size: 16,\n    setter: $065afaecc735fbee$var$matAttribSetter,\n    count: 4\n};\nconst $065afaecc735fbee$var$errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction $065afaecc735fbee$var$addLineNumbersWithError(src, log = \"\", lineOffset = 0) {\n    // Note: Error message formats are not defined by any spec so this may or may not work.\n    const matches = [\n        ...log.matchAll($065afaecc735fbee$var$errorRE)\n    ];\n    const lineNoToErrorMap = new Map(matches.map((m, ndx)=>{\n        const lineNo = parseInt(m[1]);\n        const next = matches[ndx + 1];\n        const end = next ? next.index : log.length;\n        const msg = log.substring(m.index, end);\n        return [\n            lineNo - 1,\n            msg\n        ];\n    }));\n    return src.split(\"\\n\").map((line, lineNo)=>{\n        const err = lineNoToErrorMap.get(lineNo);\n        return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : \"\"}`;\n    }).join(\"\\n\");\n}\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */ /**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */ const $065afaecc735fbee$var$spaceRE = /^[ \\t]*\\n/;\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */ function $065afaecc735fbee$var$prepShaderSource(shaderSource) {\n    let lineOffset = 0;\n    if ($065afaecc735fbee$var$spaceRE.test(shaderSource)) {\n        lineOffset = 1;\n        shaderSource = shaderSource.replace($065afaecc735fbee$var$spaceRE, \"\");\n    }\n    return {\n        lineOffset: lineOffset,\n        shaderSource: shaderSource\n    };\n}\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */ function $065afaecc735fbee$var$reportError(progOptions, msg) {\n    progOptions.errorCallback(msg);\n    if (progOptions.callback) setTimeout(()=>{\n        progOptions.callback(`${msg}\\n${progOptions.errors.join(\"\\n\")}`);\n    });\n    return null;\n}\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {string} errors or empty string\n * @private\n */ function $065afaecc735fbee$var$checkShaderStatus(gl, shaderType, shader, errFn) {\n    errFn = errFn || $065afaecc735fbee$var$error;\n    // Check the compile status\n    const compiled = gl.getShaderParameter(shader, $065afaecc735fbee$var$COMPILE_STATUS);\n    if (!compiled) {\n        // Something went wrong during compilation; get the error\n        const lastError = gl.getShaderInfoLog(shader);\n        const { lineOffset: lineOffset, shaderSource: shaderSource } = $065afaecc735fbee$var$prepShaderSource(gl.getShaderSource(shader));\n        const error = `${$065afaecc735fbee$var$addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${$065afaecc735fbee$export$e97753eae63e4e62(gl, shaderType)}: ${lastError}`;\n        errFn(error);\n        return error;\n    }\n    return \"\";\n}\n/**\n * @typedef {Object} FullProgramSpec\n * @property {string[]} shaders the shader source or element ids.\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */ /**\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\n * @memberOf module:twgl\n */ /**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */ /**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */ function $065afaecc735fbee$var$getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n    let transformFeedbackVaryings;\n    let transformFeedbackMode;\n    let callback;\n    if (typeof opt_locations === \"function\") {\n        opt_errorCallback = opt_locations;\n        opt_locations = undefined;\n    }\n    if (typeof opt_attribs === \"function\") {\n        opt_errorCallback = opt_attribs;\n        opt_attribs = undefined;\n    } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n        const opt = opt_attribs;\n        opt_errorCallback = opt.errorCallback;\n        opt_attribs = opt.attribLocations;\n        transformFeedbackVaryings = opt.transformFeedbackVaryings;\n        transformFeedbackMode = opt.transformFeedbackMode;\n        callback = opt.callback;\n    }\n    const errorCallback = opt_errorCallback || $065afaecc735fbee$var$error;\n    const errors = [];\n    const options = {\n        errorCallback (msg, ...args) {\n            errors.push(msg);\n            errorCallback(msg, ...args);\n        },\n        transformFeedbackVaryings: transformFeedbackVaryings,\n        transformFeedbackMode: transformFeedbackMode,\n        callback: callback,\n        errors: errors\n    };\n    {\n        let attribLocations = {};\n        if (Array.isArray(opt_attribs)) opt_attribs.forEach(function(attrib, ndx) {\n            attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n        });\n        else attribLocations = opt_attribs || {};\n        options.attribLocations = attribLocations;\n    }\n    return options;\n}\nconst $065afaecc735fbee$var$defaultShaderType = [\n    \"VERTEX_SHADER\",\n    \"FRAGMENT_SHADER\"\n];\nfunction $065afaecc735fbee$var$getShaderTypeFromScriptType(gl, scriptType) {\n    if (scriptType.indexOf(\"frag\") >= 0) return $065afaecc735fbee$var$FRAGMENT_SHADER;\n    else if (scriptType.indexOf(\"vert\") >= 0) return $065afaecc735fbee$var$VERTEX_SHADER;\n    return undefined;\n}\nfunction $065afaecc735fbee$var$deleteProgramAndShaders(gl, program, notThese) {\n    const shaders = gl.getAttachedShaders(program);\n    for (const shader of shaders)if (notThese.has(shader)) gl.deleteShader(shader);\n    gl.deleteProgram(program);\n}\nconst $065afaecc735fbee$var$wait = (ms = 0)=>new Promise((resolve)=>setTimeout(resolve, ms));\nfunction $065afaecc735fbee$var$createProgramNoCheck(gl, shaders, programOptions) {\n    const program = gl.createProgram();\n    const { attribLocations: attribLocations, transformFeedbackVaryings: transformFeedbackVaryings, transformFeedbackMode: transformFeedbackMode } = $065afaecc735fbee$var$getProgramOptions(programOptions);\n    for(let ndx = 0; ndx < shaders.length; ++ndx){\n        let shader = shaders[ndx];\n        if (typeof shader === \"string\") {\n            const elem = $065afaecc735fbee$var$getElementById(shader);\n            const src = elem ? elem.text : shader;\n            let type = gl[$065afaecc735fbee$var$defaultShaderType[ndx]];\n            if (elem && elem.type) type = $065afaecc735fbee$var$getShaderTypeFromScriptType(gl, elem.type) || type;\n            shader = gl.createShader(type);\n            gl.shaderSource(shader, $065afaecc735fbee$var$prepShaderSource(src).shaderSource);\n            gl.compileShader(shader);\n            gl.attachShader(program, shader);\n        }\n    }\n    Object.entries(attribLocations).forEach(([attrib, loc])=>gl.bindAttribLocation(program, loc, attrib));\n    {\n        let varyings = transformFeedbackVaryings;\n        if (varyings) {\n            if (varyings.attribs) varyings = varyings.attribs;\n            if (!Array.isArray(varyings)) varyings = Object.keys(varyings);\n            gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || $065afaecc735fbee$var$SEPARATE_ATTRIBS);\n        }\n    }\n    gl.linkProgram(program);\n    return program;\n}\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$327d24a04cd0dc17(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n    // This code is really convoluted, because it may or may not be async\n    // Maybe it would be better to have a separate function\n    const progOptions = $065afaecc735fbee$var$getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n    const shaderSet = new Set(shaders);\n    const program = $065afaecc735fbee$var$createProgramNoCheck(gl, shaders, progOptions);\n    function hasErrors(gl, program) {\n        const errors = $065afaecc735fbee$var$getProgramErrors(gl, program, progOptions.errorCallback);\n        if (errors) $065afaecc735fbee$var$deleteProgramAndShaders(gl, program, shaderSet);\n        return errors;\n    }\n    if (progOptions.callback) {\n        $065afaecc735fbee$var$waitForProgramLinkCompletionAsync(gl, program).then(()=>{\n            const errors = hasErrors(gl, program);\n            progOptions.callback(errors, errors ? undefined : program);\n        });\n        return undefined;\n    }\n    return hasErrors(gl, program) ? undefined : program;\n}\n/**\n * This only works because the functions it wraps the first 2 arguments\n * are gl and any, followed by things that become programOptions\n * @private\n */ function $065afaecc735fbee$var$wrapCallbackFnToAsyncFn(fn) {\n    return function(gl, arg1, ...args) {\n        return new Promise((resolve, reject)=>{\n            const programOptions = $065afaecc735fbee$var$getProgramOptions(...args);\n            programOptions.callback = (err, program)=>{\n                if (err) reject(err);\n                else resolve(program);\n            };\n            fn(gl, arg1, programOptions);\n        });\n    };\n}\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */ const $065afaecc735fbee$export$e84ea60b2a93dff2 = $065afaecc735fbee$var$wrapCallbackFnToAsyncFn($065afaecc735fbee$export$327d24a04cd0dc17);\n/**\n * Same as createProgramInfo but returns a promise\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */ const $065afaecc735fbee$export$515554c51de9b41c = $065afaecc735fbee$var$wrapCallbackFnToAsyncFn($065afaecc735fbee$export$2965a73560492a94);\nasync function $065afaecc735fbee$var$waitForProgramLinkCompletionAsync(gl, program) {\n    const ext = gl.getExtension(\"KHR_parallel_shader_compile\");\n    const checkFn = ext ? (gl, program)=>gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR) : ()=>true;\n    let waitTime = 0;\n    do {\n        await $065afaecc735fbee$var$wait(waitTime); // must wait at least once\n        waitTime = 1000 / 60;\n    }while (!checkFn(gl, program));\n}\nasync function $065afaecc735fbee$var$waitForAllProgramsLinkCompletionAsync(gl, programs) {\n    for (const program of Object.values(programs))await $065afaecc735fbee$var$waitForProgramLinkCompletionAsync(gl, program);\n}\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {string?} errors if program is failed, else undefined\n * @private\n */ function $065afaecc735fbee$var$getProgramErrors(gl, program, errFn) {\n    errFn = errFn || $065afaecc735fbee$var$error;\n    // Check the link status\n    const linked = gl.getProgramParameter(program, $065afaecc735fbee$var$LINK_STATUS);\n    if (!linked) {\n        // something went wrong with the link\n        const lastError = gl.getProgramInfoLog(program);\n        errFn(`Error in program linking: ${lastError}`);\n        // print any errors from these shaders\n        const shaders = gl.getAttachedShaders(program);\n        const errors = shaders.map((shader)=>$065afaecc735fbee$var$checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\n        return `${lastError}\\n${errors.filter((_)=>_).join(\"\\n\")}`;\n    }\n    return undefined;\n}\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$3699dca825c3297f(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n    const progOptions = $065afaecc735fbee$var$getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n    const shaders = [];\n    for (const scriptId of shaderScriptIds){\n        const shaderScript = $065afaecc735fbee$var$getElementById(scriptId);\n        if (!shaderScript) return $065afaecc735fbee$var$reportError(progOptions, `unknown script element: ${scriptId}`);\n        shaders.push(shaderScript.text);\n    }\n    return $065afaecc735fbee$export$327d24a04cd0dc17(gl, shaders, progOptions);\n}\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$87c7c742dccfe3af(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n    return $065afaecc735fbee$export$327d24a04cd0dc17(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n}\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */ function $065afaecc735fbee$var$isBuiltIn(info) {\n    const name = info.name;\n    return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\nconst $065afaecc735fbee$var$tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst $065afaecc735fbee$var$isDigit = (s)=>s >= \"0\" && s <= \"9\";\nfunction $065afaecc735fbee$var$addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n    const tokens = fullPath.split($065afaecc735fbee$var$tokenRE).filter((s)=>s !== \"\");\n    let tokenNdx = 0;\n    let path = \"\";\n    for(;;){\n        const token = tokens[tokenNdx++]; // has to be name or number\n        path += token;\n        const isArrayIndex = $065afaecc735fbee$var$isDigit(token[0]);\n        const accessor = isArrayIndex ? parseInt(token) : token;\n        if (isArrayIndex) path += tokens[tokenNdx++]; // skip ']'\n        const isLastToken = tokenNdx === tokens.length;\n        if (isLastToken) {\n            node[accessor] = setter;\n            break;\n        } else {\n            const token = tokens[tokenNdx++]; // has to be . or [\n            const isArray = token === \"[\";\n            const child = node[accessor] || (isArray ? [] : {});\n            node[accessor] = child;\n            node = child;\n            uniformSetters[path] = uniformSetters[path] || function(node) {\n                return function(value) {\n                    $065afaecc735fbee$var$setUniformTree(node, value);\n                };\n            }(child);\n            path += token;\n        }\n    }\n}\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$fe2460765a628597(gl, program) {\n    let textureUnit = 0;\n    /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */ function createUniformSetter(program, uniformInfo, location1) {\n        const isArray = uniformInfo.name.endsWith(\"[0]\");\n        const type = uniformInfo.type;\n        const typeInfo = $065afaecc735fbee$var$typeMap[type];\n        if (!typeInfo) throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n        let setter;\n        if (typeInfo.bindPoint) {\n            // it's a sampler\n            const unit = textureUnit;\n            textureUnit += uniformInfo.size;\n            if (isArray) setter = typeInfo.arraySetter(gl, type, unit, location1, uniformInfo.size);\n            else setter = typeInfo.setter(gl, type, unit, location1, uniformInfo.size);\n        } else if (typeInfo.arraySetter && isArray) setter = typeInfo.arraySetter(gl, location1);\n        else setter = typeInfo.setter(gl, location1);\n        setter.location = location1;\n        return setter;\n    }\n    const uniformSetters = {};\n    const uniformTree = {};\n    const numUniforms = gl.getProgramParameter(program, $065afaecc735fbee$var$ACTIVE_UNIFORMS);\n    for(let ii = 0; ii < numUniforms; ++ii){\n        const uniformInfo = gl.getActiveUniform(program, ii);\n        if ($065afaecc735fbee$var$isBuiltIn(uniformInfo)) continue;\n        let name = uniformInfo.name;\n        // remove the array suffix.\n        if (name.endsWith(\"[0]\")) name = name.substr(0, name.length - 3);\n        const location1 = gl.getUniformLocation(program, uniformInfo.name);\n        // the uniform will have no location if it's in a uniform block\n        if (location1) {\n            const setter = createUniformSetter(program, uniformInfo, location1);\n            uniformSetters[name] = setter;\n            $065afaecc735fbee$var$addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n        }\n    }\n    return uniformSetters;\n}\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */ /**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$ca1b1131a9f3199c(gl, program) {\n    const info = {};\n    const numVaryings = gl.getProgramParameter(program, $065afaecc735fbee$var$TRANSFORM_FEEDBACK_VARYINGS);\n    for(let ii = 0; ii < numVaryings; ++ii){\n        const varying = gl.getTransformFeedbackVarying(program, ii);\n        info[varying.name] = {\n            index: ii,\n            type: varying.type,\n            size: varying.size\n        };\n    }\n    return info;\n}\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$faea9f1eeaf6350d(gl, transformFeedbackInfo, bufferInfo) {\n    if (transformFeedbackInfo.transformFeedbackInfo) transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n    if (bufferInfo.attribs) bufferInfo = bufferInfo.attribs;\n    for(const name in bufferInfo){\n        const varying = transformFeedbackInfo[name];\n        if (varying) {\n            const buf = bufferInfo[name];\n            if (buf.offset) gl.bindBufferRange($065afaecc735fbee$var$TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n            else gl.bindBufferBase($065afaecc735fbee$var$TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n        }\n    }\n}\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$8ec4a27c67088db2(gl, programInfo, bufferInfo) {\n    const tf = gl.createTransformFeedback();\n    gl.bindTransformFeedback($065afaecc735fbee$var$TRANSFORM_FEEDBACK, tf);\n    gl.useProgram(programInfo.program);\n    $065afaecc735fbee$export$faea9f1eeaf6350d(gl, programInfo, bufferInfo);\n    gl.bindTransformFeedback($065afaecc735fbee$var$TRANSFORM_FEEDBACK, null);\n    return tf;\n}\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */ /**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */ /**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */ /**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$7b680ab060795ae5(gl, program) {\n    const numUniforms = gl.getProgramParameter(program, $065afaecc735fbee$var$ACTIVE_UNIFORMS);\n    const uniformData = [];\n    const uniformIndices = [];\n    for(let ii = 0; ii < numUniforms; ++ii){\n        uniformIndices.push(ii);\n        uniformData.push({});\n        const uniformInfo = gl.getActiveUniform(program, ii);\n        uniformData[ii].name = uniformInfo.name;\n    }\n    [\n        [\n            \"UNIFORM_TYPE\",\n            \"type\"\n        ],\n        [\n            \"UNIFORM_SIZE\",\n            \"size\"\n        ],\n        [\n            \"UNIFORM_BLOCK_INDEX\",\n            \"blockNdx\"\n        ],\n        [\n            \"UNIFORM_OFFSET\",\n            \"offset\"\n        ]\n    ].forEach(function(pair) {\n        const pname = pair[0];\n        const key = pair[1];\n        gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n            uniformData[ndx][key] = value;\n        });\n    });\n    const blockSpecs = {};\n    const numUniformBlocks = gl.getProgramParameter(program, $065afaecc735fbee$var$ACTIVE_UNIFORM_BLOCKS);\n    for(let ii = 0; ii < numUniformBlocks; ++ii){\n        const name = gl.getActiveUniformBlockName(program, ii);\n        const blockSpec = {\n            index: gl.getUniformBlockIndex(program, name),\n            usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, $065afaecc735fbee$var$UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n            usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, $065afaecc735fbee$var$UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n            size: gl.getActiveUniformBlockParameter(program, ii, $065afaecc735fbee$var$UNIFORM_BLOCK_DATA_SIZE),\n            uniformIndices: gl.getActiveUniformBlockParameter(program, ii, $065afaecc735fbee$var$UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n        };\n        blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n        blockSpecs[name] = blockSpec;\n    }\n    return {\n        blockSpecs: blockSpecs,\n        uniformData: uniformData\n    };\n}\nconst $065afaecc735fbee$var$arraySuffixRE = /\\[\\d+\\]\\.$/; // better way to check?\nconst $065afaecc735fbee$var$pad = (v, padding)=>((v + (padding - 1)) / padding | 0) * padding;\nfunction $065afaecc735fbee$var$createUniformBlockUniformSetter(view, isArray, rows, cols) {\n    if (isArray || rows) {\n        cols = cols || 1;\n        const numElements = view.length;\n        const totalRows = numElements / 4;\n        return function(value) {\n            let dst = 0;\n            let src = 0;\n            for(let row = 0; row < totalRows; ++row){\n                for(let col = 0; col < cols; ++col)view[dst++] = value[src++];\n                dst += 4 - cols;\n            }\n        };\n    } else return function(value) {\n        if (value.length) view.set(value);\n        else view[0] = value;\n    };\n}\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */ /**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$ba1b57ae67e32deb(gl, program, uniformBlockSpec, blockName) {\n    const blockSpecs = uniformBlockSpec.blockSpecs;\n    const uniformData = uniformBlockSpec.uniformData;\n    const blockSpec = blockSpecs[blockName];\n    if (!blockSpec) {\n        $065afaecc735fbee$var$warn(\"no uniform block object named:\", blockName);\n        return {\n            name: blockName,\n            uniforms: {}\n        };\n    }\n    const array = new ArrayBuffer(blockSpec.size);\n    const buffer = gl.createBuffer();\n    const uniformBufferIndex = blockSpec.index;\n    gl.bindBuffer($065afaecc735fbee$var$UNIFORM_BUFFER, buffer);\n    gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n    let prefix = blockName + \".\";\n    if ($065afaecc735fbee$var$arraySuffixRE.test(prefix)) prefix = prefix.replace($065afaecc735fbee$var$arraySuffixRE, \".\");\n    const uniforms = {};\n    const setters = {};\n    const setterTree = {};\n    blockSpec.uniformIndices.forEach(function(uniformNdx) {\n        const data = uniformData[uniformNdx];\n        let name = data.name;\n        if (name.startsWith(prefix)) name = name.substr(prefix.length);\n        const isArray = name.endsWith(\"[0]\");\n        if (isArray) name = name.substr(0, name.length - 3);\n        const typeInfo = $065afaecc735fbee$var$typeMap[data.type];\n        const Type = typeInfo.Type;\n        const byteLength = isArray ? $065afaecc735fbee$var$pad(typeInfo.size, 16) * data.size : typeInfo.size * data.size;\n        const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n        uniforms[name] = uniformView;\n        // Note: I'm not sure what to do here. The original\n        // idea was to create TypedArray views into each part\n        // of the block. This is useful, for example if you have\n        // a block with { mat4: model; mat4 view; mat4 projection; }\n        // you'll get a Float32Array for each one suitable for\n        // passing to most JS math libraries including twgl's and glMatrix.js.\n        //\n        // But, if you have a an array of structures, especially if that\n        // array is large, you get a whole bunch of TypedArray views.\n        // Every one of them has overhead and switching between them all\n        // is probably a cache miss. In that case it would really be better\n        // to just have one view (asFloat) and have all the setters\n        // just reference the correct portion. But, then you can't easily\n        // treat a matrix, or a vec4, as a standalone thing like you can\n        // with all the views.\n        //\n        // Another problem with the views is they are not shared. With\n        // uniforms you have one set of setters. With UniformBlockInfo\n        // you have a set of setters *pre block instance*. That's because\n        // TypedArray views can't be mapped to different buffers.\n        //\n        // My gut right now is if you really want the speed and compactness\n        // then you should probably roll your own solution. TWGL's goal\n        // here is ease of use as AFAICT there is no simple generic efficient\n        // solution.\n        const setter = $065afaecc735fbee$var$createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n        setters[name] = setter;\n        $065afaecc735fbee$var$addSetterToUniformTree(name, setter, setterTree, setters);\n    });\n    return {\n        name: blockName,\n        array: array,\n        asFloat: new Float32Array(array),\n        buffer: buffer,\n        uniforms: uniforms,\n        setters: setters\n    };\n}\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$721ed4ead8eefe0d(gl, programInfo, blockName) {\n    return $065afaecc735fbee$export$ba1b57ae67e32deb(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$6c9dd56f52711760(gl, programInfo, uniformBlockInfo) {\n    const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n    const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n    if (blockSpec) {\n        const bufferBindIndex = blockSpec.index;\n        gl.bindBufferRange($065afaecc735fbee$var$UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n        return true;\n    }\n    return false;\n}\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$94b2522be353a874(gl, programInfo, uniformBlockInfo) {\n    if ($065afaecc735fbee$export$6c9dd56f52711760(gl, programInfo, uniformBlockInfo)) gl.bufferData($065afaecc735fbee$var$UNIFORM_BUFFER, uniformBlockInfo.array, $065afaecc735fbee$var$DYNAMIC_DRAW);\n}\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$1710cbff6680b0a4(uniformBlockInfo, values) {\n    const setters = uniformBlockInfo.setters;\n    for(const name in values){\n        const setter = setters[name];\n        if (setter) {\n            const value = values[name];\n            setter(value);\n        }\n    }\n}\nfunction $065afaecc735fbee$var$setUniformTree(tree, values) {\n    for(const name in values){\n        const prop = tree[name];\n        if (typeof prop === \"function\") prop(values[name]);\n        else $065afaecc735fbee$var$setUniformTree(tree[name], values[name]);\n    }\n}\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$1fa517b18dd66830(setters, ...args) {\n    const actualSetters = setters.uniformSetters || setters;\n    const numArgs = args.length;\n    for(let aNdx = 0; aNdx < numArgs; ++aNdx){\n        const values = args[aNdx];\n        if (Array.isArray(values)) {\n            const numValues = values.length;\n            for(let ii = 0; ii < numValues; ++ii)$065afaecc735fbee$export$1fa517b18dd66830(actualSetters, values[ii]);\n        } else for(const name in values){\n            const setter = actualSetters[name];\n            if (setter) setter(values[name]);\n        }\n    }\n}\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */ const $065afaecc735fbee$export$bdaefe8ae431fe00 = $065afaecc735fbee$export$1fa517b18dd66830;\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$ca2da2c8098eca9b(gl, program) {\n    const attribSetters = {};\n    const numAttribs = gl.getProgramParameter(program, $065afaecc735fbee$var$ACTIVE_ATTRIBUTES);\n    for(let ii = 0; ii < numAttribs; ++ii){\n        const attribInfo = gl.getActiveAttrib(program, ii);\n        if ($065afaecc735fbee$var$isBuiltIn(attribInfo)) continue;\n        const index = gl.getAttribLocation(program, attribInfo.name);\n        const typeInfo = $065afaecc735fbee$var$attrTypeMap[attribInfo.type];\n        const setter = typeInfo.setter(gl, index, typeInfo);\n        setter.location = index;\n        attribSetters[attribInfo.name] = setter;\n    }\n    return attribSetters;\n}\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */ function $065afaecc735fbee$export$74da2cba014bdc09(setters, buffers) {\n    for(const name in buffers){\n        const setter = setters[name];\n        if (setter) setter(buffers[name]);\n    }\n}\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$186607e23079b9e5(gl, programInfo, buffers) {\n    if (buffers.vertexArrayObject) gl.bindVertexArray(buffers.vertexArrayObject);\n    else {\n        $065afaecc735fbee$export$74da2cba014bdc09(programInfo.attribSetters || programInfo, buffers.attribs);\n        if (buffers.indices) gl.bindBuffer($065afaecc735fbee$var$ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n}\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */ /**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$9d683a1d425bd0b2(gl, program) {\n    const uniformSetters = $065afaecc735fbee$export$fe2460765a628597(gl, program);\n    const attribSetters = $065afaecc735fbee$export$ca2da2c8098eca9b(gl, program);\n    const programInfo = {\n        program: program,\n        uniformSetters: uniformSetters,\n        attribSetters: attribSetters\n    };\n    if ($065afaecc735fbee$export$e3518b1ac7891039(gl)) {\n        programInfo.uniformBlockSpec = $065afaecc735fbee$export$7b680ab060795ae5(gl, program);\n        programInfo.transformFeedbackInfo = $065afaecc735fbee$export$ca1b1131a9f3199c(gl, program);\n    }\n    return programInfo;\n}\nconst $065afaecc735fbee$var$notIdRE = /\\s|{|}|;/;\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */ function $065afaecc735fbee$export$2965a73560492a94(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n    const progOptions = $065afaecc735fbee$var$getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n    const errors = [];\n    shaderSources = shaderSources.map(function(source) {\n        // Lets assume if there is no \\n it's an id\n        if (!$065afaecc735fbee$var$notIdRE.test(source)) {\n            const script = $065afaecc735fbee$var$getElementById(source);\n            if (!script) {\n                const err = `no element with id: ${source}`;\n                progOptions.errorCallback(err);\n                errors.push(err);\n            } else source = script.text;\n        }\n        return source;\n    });\n    if (errors.length) return $065afaecc735fbee$var$reportError(progOptions, \"\");\n    const origCallback = progOptions.callback;\n    if (origCallback) progOptions.callback = (err, program)=>{\n        origCallback(err, err ? undefined : $065afaecc735fbee$export$9d683a1d425bd0b2(gl, program));\n    };\n    const program = $065afaecc735fbee$export$87c7c742dccfe3af(gl, shaderSources, progOptions);\n    if (!program) return null;\n    return $065afaecc735fbee$export$9d683a1d425bd0b2(gl, program);\n}\nfunction $065afaecc735fbee$var$checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\n    // check errors for everything.\n    for (const [name, program] of Object.entries(programs)){\n        const options = {\n            ...programOptions\n        };\n        const spec = programSpecs[name];\n        if (!Array.isArray(spec)) Object.assign(options, spec);\n        const errors = $065afaecc735fbee$var$getProgramErrors(gl, program, options.errorCallback);\n        if (errors) {\n            // delete everything we created\n            for (const program of Object.values(programs)){\n                const shaders = gl.getAttachedShaders(program);\n                gl.deleteProgram(program);\n                for (const shader of shaders)// Don't delete it if we didn't create it.\n                if (!noDeleteShadersSet.has(shader)) gl.deleteShader(shader);\n            }\n            return errors;\n        }\n    }\n    return undefined;\n}\n/**\n * Creates multiple programs\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgram}\n *\n * Example:\n *\n *     const programs = twgl.createPrograms(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */ function $065afaecc735fbee$export$b61153735437f1bf(gl, programSpecs, programOptions = {}) {\n    // Remember existing shaders so that if there is an error we don't delete them\n    const noDeleteShadersSet = new Set();\n    // compile and link everything\n    const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec])=>{\n        const options = {\n            ...programOptions\n        };\n        const shaders = Array.isArray(spec) ? spec : spec.shaders;\n        if (!Array.isArray(spec)) Object.assign(options, spec);\n        shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\n        return [\n            name,\n            $065afaecc735fbee$var$createProgramNoCheck(gl, shaders, options)\n        ];\n    }));\n    if (programOptions.callback) {\n        $065afaecc735fbee$var$waitForAllProgramsLinkCompletionAsync(gl, programs).then(()=>{\n            const errors = $065afaecc735fbee$var$checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n            programOptions.callback(errors, errors ? undefined : programs);\n        });\n        return undefined;\n    }\n    const errors = $065afaecc735fbee$var$checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n    return errors ? undefined : programs;\n}\n/**\n * Creates multiple programInfos\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgramInfo}\n *\n * Examples:\n *\n *     const programInfos = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * or\n *\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\n */ function $065afaecc735fbee$export$fa533ee18d55b1e0(gl, programSpecs, programOptions) {\n    programOptions = $065afaecc735fbee$var$getProgramOptions(programOptions);\n    function createProgramInfosForPrograms(gl, programs) {\n        return Object.fromEntries(Object.entries(programs).map(([name, program])=>[\n                name,\n                $065afaecc735fbee$export$9d683a1d425bd0b2(gl, program)\n            ]));\n    }\n    const origCallback = programOptions.callback;\n    if (origCallback) programOptions.callback = (err, programs)=>{\n        origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\n    };\n    const programs = $065afaecc735fbee$export$b61153735437f1bf(gl, programSpecs, programOptions);\n    if (origCallback || !programs) return undefined;\n    return createProgramInfosForPrograms(gl, programs);\n}\n/**\n * Creates multiple programs asynchronously\n *\n * @see {@link module:twgl.createProgramAsync}\n *\n * Example:\n *\n *     const programs = await twgl.createProgramsAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */ const $065afaecc735fbee$export$8df956c7665f4f14 = $065afaecc735fbee$var$wrapCallbackFnToAsyncFn($065afaecc735fbee$export$b61153735437f1bf);\n/**\n * Creates multiple programInfos asynchronously\n *\n * @see {@link module:twgl.createProgramInfoAsync}\n *\n * Example:\n *\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\n */ const $065afaecc735fbee$export$2219b5d2ded2be1a = $065afaecc735fbee$var$wrapCallbackFnToAsyncFn($065afaecc735fbee$export$fa533ee18d55b1e0);\nvar $065afaecc735fbee$export$7f4c6ae6cd2bdde3 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createAttributeSetters: $065afaecc735fbee$export$ca2da2c8098eca9b,\n    createProgram: $065afaecc735fbee$export$327d24a04cd0dc17,\n    createProgramAsync: $065afaecc735fbee$export$e84ea60b2a93dff2,\n    createPrograms: $065afaecc735fbee$export$b61153735437f1bf,\n    createProgramsAsync: $065afaecc735fbee$export$8df956c7665f4f14,\n    createProgramFromScripts: $065afaecc735fbee$export$3699dca825c3297f,\n    createProgramFromSources: $065afaecc735fbee$export$87c7c742dccfe3af,\n    createProgramInfo: $065afaecc735fbee$export$2965a73560492a94,\n    createProgramInfoAsync: $065afaecc735fbee$export$515554c51de9b41c,\n    createProgramInfos: $065afaecc735fbee$export$fa533ee18d55b1e0,\n    createProgramInfosAsync: $065afaecc735fbee$export$2219b5d2ded2be1a,\n    createProgramInfoFromProgram: $065afaecc735fbee$export$9d683a1d425bd0b2,\n    createUniformSetters: $065afaecc735fbee$export$fe2460765a628597,\n    createUniformBlockSpecFromProgram: $065afaecc735fbee$export$7b680ab060795ae5,\n    createUniformBlockInfoFromProgram: $065afaecc735fbee$export$ba1b57ae67e32deb,\n    createUniformBlockInfo: $065afaecc735fbee$export$721ed4ead8eefe0d,\n    createTransformFeedback: $065afaecc735fbee$export$8ec4a27c67088db2,\n    createTransformFeedbackInfo: $065afaecc735fbee$export$ca1b1131a9f3199c,\n    bindTransformFeedbackInfo: $065afaecc735fbee$export$faea9f1eeaf6350d,\n    setAttributes: $065afaecc735fbee$export$74da2cba014bdc09,\n    setBuffersAndAttributes: $065afaecc735fbee$export$186607e23079b9e5,\n    setUniforms: $065afaecc735fbee$export$1fa517b18dd66830,\n    setUniformsAndBindTextures: $065afaecc735fbee$export$bdaefe8ae431fe00,\n    setUniformBlock: $065afaecc735fbee$export$94b2522be353a874,\n    setBlockUniforms: $065afaecc735fbee$export$1710cbff6680b0a4,\n    bindUniformBlock: $065afaecc735fbee$export$6c9dd56f52711760\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ const $065afaecc735fbee$var$TRIANGLES = 0x0004;\nconst $065afaecc735fbee$var$UNSIGNED_SHORT = 0x1403;\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */ /**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */ function $065afaecc735fbee$export$459017ad3380cbb9(gl, bufferInfo, type, count, offset, instanceCount) {\n    type = type === undefined ? $065afaecc735fbee$var$TRIANGLES : type;\n    const indices = bufferInfo.indices;\n    const elementType = bufferInfo.elementType;\n    const numElements = count === undefined ? bufferInfo.numElements : count;\n    offset = offset === undefined ? 0 : offset;\n    if (elementType || indices) {\n        if (instanceCount !== undefined) gl.drawElementsInstanced(type, numElements, elementType === undefined ? $065afaecc735fbee$var$UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n        else gl.drawElements(type, numElements, elementType === undefined ? $065afaecc735fbee$var$UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    } else if (instanceCount !== undefined) gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    else gl.drawArrays(type, offset, numElements);\n}\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */ /**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */ function $065afaecc735fbee$export$f8c0340695b955d5(gl, objectsToDraw) {\n    let lastUsedProgramInfo = null;\n    let lastUsedBufferInfo = null;\n    objectsToDraw.forEach(function(object) {\n        if (object.active === false) return;\n        const programInfo = object.programInfo;\n        const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n        let bindBuffers = false;\n        const type = object.type === undefined ? $065afaecc735fbee$var$TRIANGLES : object.type;\n        if (programInfo !== lastUsedProgramInfo) {\n            lastUsedProgramInfo = programInfo;\n            gl.useProgram(programInfo.program);\n            // We have to rebind buffers when changing programs because we\n            // only bind buffers the program uses. So if 2 programs use the same\n            // bufferInfo but the 1st one uses only positions the when the\n            // we switch to the 2nd one some of the attributes will not be on.\n            bindBuffers = true;\n        }\n        // Setup all the needed attributes.\n        if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n            if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) gl.bindVertexArray(null);\n            lastUsedBufferInfo = bufferInfo;\n            $065afaecc735fbee$export$186607e23079b9e5(gl, programInfo, bufferInfo);\n        }\n        // Set the uniforms.\n        $065afaecc735fbee$export$1fa517b18dd66830(programInfo, object.uniforms);\n        // Draw\n        $065afaecc735fbee$export$459017ad3380cbb9(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n    });\n    if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) gl.bindVertexArray(null);\n}\nvar $065afaecc735fbee$export$e529deb2bfd496dc = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    drawBufferInfo: $065afaecc735fbee$export$459017ad3380cbb9,\n    drawObjectList: $065afaecc735fbee$export$f8c0340695b955d5\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ const $065afaecc735fbee$var$FRAMEBUFFER = 0x8d40;\nconst $065afaecc735fbee$var$RENDERBUFFER = 0x8d41;\nconst $065afaecc735fbee$var$TEXTURE_2D = 0x0de1;\nconst $065afaecc735fbee$var$UNSIGNED_BYTE = 0x1401;\n/* PixelFormat */ const $065afaecc735fbee$var$DEPTH_COMPONENT = 0x1902;\nconst $065afaecc735fbee$var$RGBA = 0x1908;\nconst $065afaecc735fbee$var$DEPTH_COMPONENT24 = 0x81a6;\nconst $065afaecc735fbee$var$DEPTH_COMPONENT32F = 0x8cac;\nconst $065afaecc735fbee$var$DEPTH24_STENCIL8 = 0x88f0;\nconst $065afaecc735fbee$var$DEPTH32F_STENCIL8 = 0x8cad;\n/* Framebuffer Object. */ const $065afaecc735fbee$var$RGBA4 = 0x8056;\nconst $065afaecc735fbee$var$RGB5_A1 = 0x8057;\nconst $065afaecc735fbee$var$RGB565 = 0x8D62;\nconst $065afaecc735fbee$var$DEPTH_COMPONENT16 = 0x81A5;\nconst $065afaecc735fbee$var$STENCIL_INDEX = 0x1901;\nconst $065afaecc735fbee$var$STENCIL_INDEX8 = 0x8D48;\nconst $065afaecc735fbee$var$DEPTH_STENCIL = 0x84F9;\nconst $065afaecc735fbee$var$COLOR_ATTACHMENT0 = 0x8CE0;\nconst $065afaecc735fbee$var$DEPTH_ATTACHMENT = 0x8D00;\nconst $065afaecc735fbee$var$STENCIL_ATTACHMENT = 0x8D20;\nconst $065afaecc735fbee$var$DEPTH_STENCIL_ATTACHMENT = 0x821A;\n/* TextureWrapMode */ const $065afaecc735fbee$var$CLAMP_TO_EDGE = 0x812F;\n/* TextureMagFilter */ const $065afaecc735fbee$var$LINEAR = 0x2601;\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */ const $065afaecc735fbee$var$defaultAttachments = [\n    {\n        format: $065afaecc735fbee$var$RGBA,\n        type: $065afaecc735fbee$var$UNSIGNED_BYTE,\n        min: $065afaecc735fbee$var$LINEAR,\n        wrap: $065afaecc735fbee$var$CLAMP_TO_EDGE\n    },\n    {\n        format: $065afaecc735fbee$var$DEPTH_STENCIL\n    }\n];\nconst $065afaecc735fbee$var$attachmentsByFormat = {};\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$DEPTH_STENCIL] = $065afaecc735fbee$var$DEPTH_STENCIL_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$STENCIL_INDEX] = $065afaecc735fbee$var$STENCIL_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$STENCIL_INDEX8] = $065afaecc735fbee$var$STENCIL_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$DEPTH_COMPONENT] = $065afaecc735fbee$var$DEPTH_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$DEPTH_COMPONENT16] = $065afaecc735fbee$var$DEPTH_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$DEPTH_COMPONENT24] = $065afaecc735fbee$var$DEPTH_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$DEPTH_COMPONENT32F] = $065afaecc735fbee$var$DEPTH_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$DEPTH24_STENCIL8] = $065afaecc735fbee$var$DEPTH_STENCIL_ATTACHMENT;\n$065afaecc735fbee$var$attachmentsByFormat[$065afaecc735fbee$var$DEPTH32F_STENCIL8] = $065afaecc735fbee$var$DEPTH_STENCIL_ATTACHMENT;\nfunction $065afaecc735fbee$var$getAttachmentPointForFormat(format, internalFormat) {\n    return $065afaecc735fbee$var$attachmentsByFormat[format] || $065afaecc735fbee$var$attachmentsByFormat[internalFormat];\n}\nconst $065afaecc735fbee$var$renderbufferFormats = {};\n$065afaecc735fbee$var$renderbufferFormats[$065afaecc735fbee$var$RGBA4] = true;\n$065afaecc735fbee$var$renderbufferFormats[$065afaecc735fbee$var$RGB5_A1] = true;\n$065afaecc735fbee$var$renderbufferFormats[$065afaecc735fbee$var$RGB565] = true;\n$065afaecc735fbee$var$renderbufferFormats[$065afaecc735fbee$var$DEPTH_STENCIL] = true;\n$065afaecc735fbee$var$renderbufferFormats[$065afaecc735fbee$var$DEPTH_COMPONENT16] = true;\n$065afaecc735fbee$var$renderbufferFormats[$065afaecc735fbee$var$STENCIL_INDEX] = true;\n$065afaecc735fbee$var$renderbufferFormats[$065afaecc735fbee$var$STENCIL_INDEX8] = true;\nfunction $065afaecc735fbee$var$isRenderbufferFormat(format) {\n    return $065afaecc735fbee$var$renderbufferFormats[format];\n}\nconst $065afaecc735fbee$var$MAX_COLOR_ATTACHMENT_POINTS = 32; // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\nfunction $065afaecc735fbee$var$isColorAttachmentPoint(attachmentPoint) {\n    return attachmentPoint >= $065afaecc735fbee$var$COLOR_ATTACHMENT0 && attachmentPoint < $065afaecc735fbee$var$COLOR_ATTACHMENT0 + $065afaecc735fbee$var$MAX_COLOR_ATTACHMENT_POINTS;\n}\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */ /**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */ function $065afaecc735fbee$export$5203e5b1731cd791(gl, attachments, width, height) {\n    const target = $065afaecc735fbee$var$FRAMEBUFFER;\n    const fb = gl.createFramebuffer();\n    gl.bindFramebuffer(target, fb);\n    width = width || gl.drawingBufferWidth;\n    height = height || gl.drawingBufferHeight;\n    attachments = attachments || $065afaecc735fbee$var$defaultAttachments;\n    const usedColorAttachmentsPoints = [];\n    const framebufferInfo = {\n        framebuffer: fb,\n        attachments: [],\n        width: width,\n        height: height\n    };\n    attachments.forEach(function(attachmentOptions, i) {\n        let attachment = attachmentOptions.attachment;\n        const samples = attachmentOptions.samples;\n        const format = attachmentOptions.format;\n        let attachmentPoint = attachmentOptions.attachmentPoint || $065afaecc735fbee$var$getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n        if (!attachmentPoint) attachmentPoint = $065afaecc735fbee$var$COLOR_ATTACHMENT0 + i;\n        if ($065afaecc735fbee$var$isColorAttachmentPoint(attachmentPoint)) usedColorAttachmentsPoints.push(attachmentPoint);\n        if (!attachment) {\n            if (samples !== undefined || $065afaecc735fbee$var$isRenderbufferFormat(format)) {\n                attachment = gl.createRenderbuffer();\n                gl.bindRenderbuffer($065afaecc735fbee$var$RENDERBUFFER, attachment);\n                if (samples > 1) gl.renderbufferStorageMultisample($065afaecc735fbee$var$RENDERBUFFER, samples, format, width, height);\n                else gl.renderbufferStorage($065afaecc735fbee$var$RENDERBUFFER, format, width, height);\n            } else {\n                const textureOptions = Object.assign({}, attachmentOptions);\n                textureOptions.width = width;\n                textureOptions.height = height;\n                if (textureOptions.auto === undefined) {\n                    textureOptions.auto = false;\n                    textureOptions.min = textureOptions.min || textureOptions.minMag || $065afaecc735fbee$var$LINEAR;\n                    textureOptions.mag = textureOptions.mag || textureOptions.minMag || $065afaecc735fbee$var$LINEAR;\n                    textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || $065afaecc735fbee$var$CLAMP_TO_EDGE;\n                    textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || $065afaecc735fbee$var$CLAMP_TO_EDGE;\n                }\n                attachment = $065afaecc735fbee$export$37b981a8c575f415(gl, textureOptions);\n            }\n        }\n        if ($065afaecc735fbee$var$isRenderbuffer(gl, attachment)) gl.framebufferRenderbuffer(target, attachmentPoint, $065afaecc735fbee$var$RENDERBUFFER, attachment);\n        else if ($065afaecc735fbee$var$isTexture(gl, attachment)) {\n            if (attachmentOptions.layer !== undefined) gl.framebufferTextureLayer(target, attachmentPoint, attachment, attachmentOptions.level || 0, attachmentOptions.layer);\n            else gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.target || $065afaecc735fbee$var$TEXTURE_2D, attachment, attachmentOptions.level || 0);\n        } else throw new Error(\"unknown attachment type\");\n        framebufferInfo.attachments.push(attachment);\n    });\n    if (gl.drawBuffers) gl.drawBuffers(usedColorAttachmentsPoints);\n    return framebufferInfo;\n}\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */ function $065afaecc735fbee$export$b8e6d43e27659aba(gl, framebufferInfo, attachments, width, height) {\n    width = width || gl.drawingBufferWidth;\n    height = height || gl.drawingBufferHeight;\n    framebufferInfo.width = width;\n    framebufferInfo.height = height;\n    attachments = attachments || $065afaecc735fbee$var$defaultAttachments;\n    attachments.forEach(function(attachmentOptions, ndx) {\n        const attachment = framebufferInfo.attachments[ndx];\n        const format = attachmentOptions.format;\n        const samples = attachmentOptions.samples;\n        if (samples !== undefined || $065afaecc735fbee$var$isRenderbuffer(gl, attachment)) {\n            gl.bindRenderbuffer($065afaecc735fbee$var$RENDERBUFFER, attachment);\n            if (samples > 1) gl.renderbufferStorageMultisample($065afaecc735fbee$var$RENDERBUFFER, samples, format, width, height);\n            else gl.renderbufferStorage($065afaecc735fbee$var$RENDERBUFFER, format, width, height);\n        } else if ($065afaecc735fbee$var$isTexture(gl, attachment)) $065afaecc735fbee$export$1d581f00cfe12937(gl, attachment, attachmentOptions, width, height);\n        else throw new Error(\"unknown attachment type\");\n    });\n}\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */ function $065afaecc735fbee$export$3352f23a6b33f086(gl, framebufferInfo, target) {\n    target = target || $065afaecc735fbee$var$FRAMEBUFFER;\n    if (framebufferInfo) {\n        gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n        gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n    } else {\n        gl.bindFramebuffer(target, null);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    }\n}\nvar $065afaecc735fbee$export$25544aea78b18f9b = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    bindFramebufferInfo: $065afaecc735fbee$export$3352f23a6b33f086,\n    createFramebufferInfo: $065afaecc735fbee$export$5203e5b1731cd791,\n    resizeFramebufferInfo: $065afaecc735fbee$export$b8e6d43e27659aba\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ /**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */ const $065afaecc735fbee$var$ELEMENT_ARRAY_BUFFER = 0x8893;\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */ /**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */ function $065afaecc735fbee$export$3a550f69329a008c(gl, programInfos, bufferInfo) {\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    if (!programInfos.length) programInfos = [\n        programInfos\n    ];\n    programInfos.forEach(function(programInfo) {\n        $065afaecc735fbee$export$186607e23079b9e5(gl, programInfo, bufferInfo);\n    });\n    gl.bindVertexArray(null);\n    return {\n        numElements: bufferInfo.numElements,\n        elementType: bufferInfo.elementType,\n        vertexArrayObject: vao\n    };\n}\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */ function $065afaecc735fbee$export$60495ce92af393ea(gl, setters, attribs, indices) {\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    $065afaecc735fbee$export$74da2cba014bdc09(setters, attribs);\n    if (indices) gl.bindBuffer($065afaecc735fbee$var$ELEMENT_ARRAY_BUFFER, indices);\n    // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n    // like when creating buffers for other stuff will mess up this VAO's binding\n    gl.bindVertexArray(null);\n    return vao;\n}\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */ function $065afaecc735fbee$export$69584a051cfb6414(gl, programInfo, bufferInfo) {\n    return $065afaecc735fbee$export$60495ce92af393ea(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\nvar $065afaecc735fbee$export$a4f7286ae77261a4 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createVertexArrayInfo: $065afaecc735fbee$export$3a550f69329a008c,\n    createVAOAndSetAttributes: $065afaecc735fbee$export$60495ce92af393ea,\n    createVAOFromBufferInfo: $065afaecc735fbee$export$69584a051cfb6414\n});\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ const $065afaecc735fbee$var$defaults = {\n    addExtensionsToContext: true\n};\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */ /**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$2e2366488d12e20d(newDefaults) {\n    $065afaecc735fbee$var$copyExistingProperties(newDefaults, $065afaecc735fbee$var$defaults);\n    $065afaecc735fbee$export$81400a733c5c400b(newDefaults); // eslint-disable-line\n    $065afaecc735fbee$export$13a00e79c3b46a21(newDefaults); // eslint-disable-line\n}\nconst $065afaecc735fbee$var$prefixRE = /^(.*?)_/;\nfunction $065afaecc735fbee$var$addExtensionToContext(gl, extensionName) {\n    $065afaecc735fbee$export$e97753eae63e4e62(gl, 0);\n    const ext = gl.getExtension(extensionName);\n    if (ext) {\n        const enums = {};\n        const fnSuffix = $065afaecc735fbee$var$prefixRE.exec(extensionName)[1];\n        const enumSuffix = \"_\" + fnSuffix;\n        for(const key in ext){\n            const value = ext[key];\n            const isFunc = typeof value === \"function\";\n            const suffix = isFunc ? fnSuffix : enumSuffix;\n            let name = key;\n            // examples of where this is not true are WEBGL_compressed_texture_s3tc\n            // and WEBGL_compressed_texture_pvrtc\n            if (key.endsWith(suffix)) name = key.substring(0, key.length - suffix.length);\n            if (gl[name] !== undefined) {\n                if (!isFunc && gl[name] !== value) $065afaecc735fbee$var$warn$1(name, gl[name], value, key);\n            } else if (isFunc) gl[name] = function(origFn) {\n                return function() {\n                    return origFn.apply(ext, arguments);\n                };\n            }(value);\n            else {\n                gl[name] = value;\n                enums[name] = value;\n            }\n        }\n        // pass the modified enums to glEnumToString\n        enums.constructor = {\n            name: ext.constructor.name\n        };\n        $065afaecc735fbee$export$e97753eae63e4e62(enums, 0);\n    }\n    return ext;\n}\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */ const $065afaecc735fbee$var$supportedExtensions = [\n    \"ANGLE_instanced_arrays\",\n    \"EXT_blend_minmax\",\n    \"EXT_color_buffer_float\",\n    \"EXT_color_buffer_half_float\",\n    \"EXT_disjoint_timer_query\",\n    \"EXT_disjoint_timer_query_webgl2\",\n    \"EXT_frag_depth\",\n    \"EXT_sRGB\",\n    \"EXT_shader_texture_lod\",\n    \"EXT_texture_filter_anisotropic\",\n    \"OES_element_index_uint\",\n    \"OES_standard_derivatives\",\n    \"OES_texture_float\",\n    \"OES_texture_float_linear\",\n    \"OES_texture_half_float\",\n    \"OES_texture_half_float_linear\",\n    \"OES_vertex_array_object\",\n    \"WEBGL_color_buffer_float\",\n    \"WEBGL_compressed_texture_atc\",\n    \"WEBGL_compressed_texture_etc1\",\n    \"WEBGL_compressed_texture_pvrtc\",\n    \"WEBGL_compressed_texture_s3tc\",\n    \"WEBGL_compressed_texture_s3tc_srgb\",\n    \"WEBGL_depth_texture\",\n    \"WEBGL_draw_buffers\"\n];\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$ef86202f9bca6ee5(gl) {\n    for(let ii = 0; ii < $065afaecc735fbee$var$supportedExtensions.length; ++ii)$065afaecc735fbee$var$addExtensionToContext(gl, $065afaecc735fbee$var$supportedExtensions[ii]);\n}\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */ function $065afaecc735fbee$var$create3DContext(canvas, opt_attribs) {\n    const names = [\n        \"webgl\",\n        \"experimental-webgl\"\n    ];\n    let context = null;\n    for(let ii = 0; ii < names.length; ++ii){\n        context = canvas.getContext(names[ii], opt_attribs);\n        if (context) {\n            if ($065afaecc735fbee$var$defaults.addExtensionsToContext) $065afaecc735fbee$export$ef86202f9bca6ee5(context);\n            break;\n        }\n    }\n    return context;\n}\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */ function $065afaecc735fbee$export$c7a808a518b9a146(canvas, opt_attribs) {\n    const gl = $065afaecc735fbee$var$create3DContext(canvas, opt_attribs);\n    return gl;\n}\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */ function $065afaecc735fbee$var$createContext(canvas, opt_attribs) {\n    const names = [\n        \"webgl2\",\n        \"webgl\",\n        \"experimental-webgl\"\n    ];\n    let context = null;\n    for(let ii = 0; ii < names.length; ++ii){\n        context = canvas.getContext(names[ii], opt_attribs);\n        if (context) {\n            if ($065afaecc735fbee$var$defaults.addExtensionsToContext) $065afaecc735fbee$export$ef86202f9bca6ee5(context);\n            break;\n        }\n    }\n    return context;\n}\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$31553aaa555c1514(canvas, opt_attribs) {\n    const gl = $065afaecc735fbee$var$createContext(canvas, opt_attribs);\n    return gl;\n}\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */ function $065afaecc735fbee$export$4d986a341d0b1b6c(canvas, multiplier) {\n    multiplier = multiplier || 1;\n    multiplier = Math.max(0, multiplier);\n    const width = canvas.clientWidth * multiplier | 0;\n    const height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width || canvas.height !== height) {\n        canvas.width = width;\n        canvas.height = height;\n        return true;\n    }\n    return false;\n}\n\n\nvar $0b52c0d9f08e3032$exports = {};\nconst $0b52c0d9f08e3032$var$mod = {\n    getShaderType () {\n        return $(\".shader-options > input:checked\").attr(\"id\");\n    }\n};\n$0b52c0d9f08e3032$exports = $0b52c0d9f08e3032$var$mod;\n\n\nclass $a1e98a181f2c075d$var$Renderer {\n    constructor(canvas){\n        this.gl = canvas.getContext(\"webgl\") || canvas.getContext(\"expiremental-webgl\");\n        $065afaecc735fbee$export$ef86202f9bca6ee5(this.gl);\n        this.ext = this.gl.getExtension(\"ANGLE_instanced_arrays\");\n        if (!this.ext) throw new Error(\"ANGLE_instanced_arrays not supported\");\n        this.programInfo = $065afaecc735fbee$export$2965a73560492a94(this.gl, [\n            (0, (/*@__PURE__*/$parcel$interopDefault($a24fb1ef4a1781b4$exports))),\n            (0, (/*@__PURE__*/$parcel$interopDefault($4b46d1b7227c6e88$exports)))\n        ]);\n        this.bgProgramInfo = $065afaecc735fbee$export$2965a73560492a94(this.gl, [\n            (0, (/*@__PURE__*/$parcel$interopDefault($c89e750638e63481$exports))),\n            (0, (/*@__PURE__*/$parcel$interopDefault($ed69c28b53996f4b$exports)))\n        ]);\n        this.data = [];\n    }\n    bindCamera(camera) {\n        this.camera = camera;\n    }\n    bindData(data) {\n        this.data = data;\n    }\n    bindBgData() {\n        const { x: left, y: top } = this.camera.screenSpaceToCoord(0, 0);\n        const { x: right, y: bottom } = this.camera.screenSpaceToCoord(innerWidth, innerHeight);\n        this.bgData = {\n            position: {\n                numComponents: 2,\n                data: [\n                    left,\n                    top,\n                    left,\n                    bottom,\n                    right,\n                    bottom,\n                    right,\n                    bottom,\n                    right,\n                    top,\n                    left,\n                    top\n                ]\n            }\n        };\n    }\n    bindInfo(info) {\n        this.info = info;\n    }\n    getShaderType() {\n        const shaderType = $0b52c0d9f08e3032$exports.getShaderType();\n        switch(shaderType){\n            case \"realistic\":\n                return 1;\n            case \"black-white\":\n                return 2;\n            case \"xy\":\n                return 3;\n        }\n    }\n    render() {\n        this.gl.canvas.width = innerWidth;\n        this.gl.canvas.height = innerHeight;\n        //twgl.resizeCanvasToDisplaySize(this.gl.canvas)\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        this.gl.enable(this.gl.DEPTH_TEST);\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        this.renderStars();\n        if (this.info.lod > 1) {\n            this.bindBgData();\n            this.renderBg();\n        }\n    }\n    renderStars() {\n        const shaderType = this.getShaderType();\n        const uniforms = {\n            resolution: [\n                innerWidth,\n                innerHeight\n            ],\n            camera: [\n                this.camera.x,\n                this.camera.y,\n                this.camera.z\n            ],\n            shaderType: shaderType\n        };\n        this.bufferInfo = $065afaecc735fbee$export$140f5b0225138840(this.gl, this.data);\n        this.vertexArrayInfo = $065afaecc735fbee$export$3a550f69329a008c(this.gl, this.programInfo, this.bufferInfo);\n        this.gl.useProgram(this.programInfo.program);\n        $065afaecc735fbee$export$186607e23079b9e5(this.gl, this.programInfo, this.vertexArrayInfo);\n        $065afaecc735fbee$export$1fa517b18dd66830(this.programInfo, uniforms);\n        this.ext.drawArraysInstancedANGLE(this.gl.TRIANGLES, 0, this.data.points.data.length / 2, this.data.size.data.length);\n    }\n    renderBg() {\n        const shaderType = this.getShaderType();\n        const uniforms = {\n            resolution: [\n                innerWidth,\n                innerHeight\n            ],\n            camera: [\n                this.camera.x,\n                this.camera.y,\n                this.camera.z\n            ],\n            shaderType: shaderType,\n            lod: this.info.lod\n        };\n        this.bgBufferInfo = $065afaecc735fbee$export$140f5b0225138840(this.gl, this.bgData);\n        this.gl.useProgram(this.bgProgramInfo.program);\n        $065afaecc735fbee$export$186607e23079b9e5(this.gl, this.bgProgramInfo, this.bgBufferInfo);\n        $065afaecc735fbee$export$1fa517b18dd66830(this.bgProgramInfo, uniforms);\n        $065afaecc735fbee$export$459017ad3380cbb9(this.gl, this.bgBufferInfo);\n    }\n}\n$a1e98a181f2c075d$exports = $a1e98a181f2c075d$var$Renderer;\n\n\nvar $7b2427e92e113e6f$exports = {};\n\nconst $7b2427e92e113e6f$var$CIRCLE_MESH = $381ef7b8281eb407$exports.circleWithSides(16);\nconst $7b2427e92e113e6f$var$MAX_LOD = 8;\nconst $7b2427e92e113e6f$var$data = {\n    lodLevel: 0,\n    stars: [],\n    starRenderData: {\n        points: {\n            numComponents: 2,\n            data: $7b2427e92e113e6f$var$CIRCLE_MESH.points\n        },\n        position: {\n            numComponents: 2,\n            data: [],\n            divisor: 1\n        },\n        size: {\n            numComponents: 1,\n            data: [],\n            divisor: 1\n        }\n    },\n    starRenderDataTyped: {\n        points: {\n            numComponents: 2,\n            data: $7b2427e92e113e6f$var$CIRCLE_MESH.points\n        },\n        position: {\n            numComponents: 2,\n            data: new Float32Array(0),\n            divisor: 1\n        },\n        size: {\n            numComponents: 1,\n            data: new Float32Array(0),\n            divisor: 1\n        }\n    }\n};\nfor(let i = 0; i < $7b2427e92e113e6f$var$MAX_LOD; ++i)$7b2427e92e113e6f$var$data.stars.push({\n    start: {\n        x: 0,\n        y: 0\n    },\n    end: {\n        x: 0,\n        y: 0\n    },\n    starsPerGrid: i * 2,\n    width () {\n        return this.end.x - this.start.x;\n    },\n    height () {\n        return this.end.y - this.start.y;\n    }\n});\nconst $7b2427e92e113e6f$var$mod = {\n    update () {\n        if ($7b2427e92e113e6f$var$data.requestUpdate) {\n            $7b2427e92e113e6f$var$data.starRenderDataTyped.position.data = new Float32Array($7b2427e92e113e6f$var$data.starRenderData.position.data);\n            $7b2427e92e113e6f$var$data.starRenderDataTyped.size.data = new Float32Array($7b2427e92e113e6f$var$data.starRenderData.size.data);\n            $7b2427e92e113e6f$var$data.requestUpdate = false;\n        }\n    },\n    getData () {\n        //return data.starRenderDataTyped\n        return $7b2427e92e113e6f$var$data.starRenderData;\n    },\n    getInfo () {\n        return {\n            lod: $7b2427e92e113e6f$var$data.lodLevel\n        };\n    },\n    spliceStars (lodLevel, start, width, newStars = []) {\n        $7b2427e92e113e6f$var$data.requestUpdate = true;\n        let offset = 0;\n        for(let lod = 0; lod < lodLevel; ++lod){\n            const starData = this.getStarLOD(lod);\n            offset += starData.width() * starData.height() * starData.starsPerGrid;\n        }\n        const starData = this.getStarLOD(lodLevel);\n        width *= starData.starsPerGrid;\n        start *= starData.starsPerGrid;\n        start += offset;\n        const positionData = $7b2427e92e113e6f$var$data.starRenderData.position.data;\n        const sizeData = $7b2427e92e113e6f$var$data.starRenderData.size.data;\n        if (newStars.length === 0) {\n            positionData.splice(start * 2, width * 2);\n            sizeData.splice(start, width);\n            return;\n        }\n        const positions = new Array(newStars.length * 2);\n        const sizes = new Array(newStars.length);\n        for(let i = 0; i < newStars.length; ++i){\n            const [x, y] = newStars[i].position;\n            const size = newStars[i].size;\n            positions[i * 2] = x;\n            positions[i * 2 + 1] = y;\n            sizes[i] = size;\n        }\n        positionData.splice(start * 2, width * 2, ...positions);\n        sizeData.splice(start, width, ...sizes);\n    },\n    removeStarRows (lodLevel, startY, height) {\n        const starData = this.getStarLOD(lodLevel);\n        const columnHeight = starData.height();\n        // MUST BE IN REVERSE\n        let index = starData.width();\n        while(index--)this.spliceStars(lodLevel, index * columnHeight + startY, height);\n        if (startY === 0) starData.start.y += height;\n        else starData.end.y -= height;\n    },\n    addStarRows (lodLevel, startY, newStars) {\n        const starData = this.getStarLOD(lodLevel);\n        const columnHeight = starData.height();\n        let height = newStars.length / starData.width();\n        // MUST BE IN REVERSE\n        let index = starData.width();\n        while(index--){\n            const sliceStart = index * height;\n            const sliceEnd = sliceStart + height;\n            this.spliceStars(lodLevel, index * columnHeight + startY, 0, newStars.slice(sliceStart, sliceEnd));\n        }\n        height /= starData.starsPerGrid;\n        if (startY === 0) starData.start.y -= height;\n        else starData.end.y += height;\n    },\n    removeStarColumns (lodLevel, startX, width) {\n        const starData = this.getStarLOD(lodLevel);\n        const columnHeight = starData.height();\n        this.spliceStars(lodLevel, startX * columnHeight, width * columnHeight);\n        if (startX === 0) starData.start.x += width;\n        else starData.end.x -= width;\n    },\n    addStarColumns (lodLevel, startX, newStars) {\n        const starData = this.getStarLOD(lodLevel);\n        const columnHeight = starData.height();\n        this.spliceStars(lodLevel, startX * columnHeight, 0, newStars);\n        const width = newStars.length / columnHeight / starData.starsPerGrid;\n        if (startX === 0) starData.start.x -= width;\n        else starData.end.x += width;\n    },\n    // -------\n    getStarLOD (lodLevel) {\n        return $7b2427e92e113e6f$var$data.stars[lodLevel];\n    },\n    setLodLevel (lodLevel) {\n        $7b2427e92e113e6f$var$data.lodLevel = lodLevel;\n    },\n    MAX_LOD: $7b2427e92e113e6f$var$MAX_LOD,\n    data: $7b2427e92e113e6f$var$data\n};\n$7b2427e92e113e6f$exports = $7b2427e92e113e6f$var$mod;\n\n\nvar $60944aa7cd7b3b7f$exports = {};\n\nvar $20c26a4462377769$exports = {};\nfunction $20c26a4462377769$var$random(seed) {\n    function _seed(s) {\n        if ((seed = (s | 0) % 2147483647) <= 0) seed += 2147483646;\n    }\n    function _nextInt() {\n        return seed = seed * 48271 % 2147483647;\n    }\n    function _nextFloat() {\n        return (_nextInt() - 1) / 2147483646;\n    }\n    _seed(seed);\n    return {\n        seed: _seed,\n        nextInt: _nextInt,\n        nextFloat: _nextFloat\n    };\n}\n$20c26a4462377769$exports = $20c26a4462377769$var$random;\n\n\nconst $60944aa7cd7b3b7f$var$MAX_LOD = $7b2427e92e113e6f$exports.MAX_LOD;\nconst $60944aa7cd7b3b7f$var$MIN_SIZE_EXP = 8;\nlet $60944aa7cd7b3b7f$var$iter = 0;\nconst $60944aa7cd7b3b7f$var$mod = {\n    generateViewportStars (camera) {\n        let exactLodLevel = Math.max(0, Math.log2(camera.z / 10));\n        let minLodLevel = Math.max(0, Math.floor(exactLodLevel));\n        $7b2427e92e113e6f$exports.setLodLevel(exactLodLevel);\n        for(let lodLevel = 0; lodLevel < $60944aa7cd7b3b7f$var$MAX_LOD; ++lodLevel)if (lodLevel < $60944aa7cd7b3b7f$var$MAX_LOD - minLodLevel) this.generateViewportStarsLOD(camera, lodLevel);\n        else {\n            // If outside of LOD then delete all\n            const starData = $7b2427e92e113e6f$exports.getStarLOD(lodLevel);\n            $7b2427e92e113e6f$exports.spliceStars(lodLevel, 0, starData.width() * starData.height());\n            starData.start.x = 0;\n            starData.start.y = 0;\n            starData.end.x = 0;\n            starData.end.y = 0;\n        }\n    },\n    generateViewportStarsLOD (camera, lodLevel) {\n        const gridSize = 2 ** ($60944aa7cd7b3b7f$var$MAX_LOD - lodLevel + $60944aa7cd7b3b7f$var$MIN_SIZE_EXP);\n        const starData = $7b2427e92e113e6f$exports.getStarLOD(lodLevel);\n        const { x: minX, y: minY } = camera.screenSpaceToCoord(0, 0);\n        const { x: maxX, y: maxY } = camera.screenSpaceToCoord(innerWidth, innerHeight);\n        const left = Math.floor(minX / gridSize);\n        const right = Math.ceil(maxX / gridSize);\n        const top = Math.ceil(maxY / gridSize);\n        const bottom = Math.floor(minY / gridSize);\n        const start = starData.start;\n        const end = starData.end;\n        if (top < start.y || bottom > end.y || left > end.x || right < start.x || starData.width() === 0 || starData.height() === 0) {\n            const newStars = this.generateGrid(lodLevel, left, right, bottom, top);\n            $7b2427e92e113e6f$exports.spliceStars(lodLevel, 0, starData.width() * starData.height(), newStars);\n            start.x = left;\n            start.y = bottom;\n            end.x = right;\n            end.y = top;\n            return;\n        }\n        if (top < end.y) // If top is under old top, then shave off those rows\n        $7b2427e92e113e6f$exports.removeStarRows(lodLevel, starData.height() - (end.y - top), end.y - top);\n        else if (top > end.y) {\n            const newStars = this.generateGrid(lodLevel, start.x, end.x, end.y, top);\n            $7b2427e92e113e6f$exports.addStarRows(lodLevel, starData.height(), newStars);\n        }\n        end.y = top;\n        if (bottom > start.y) // If bottom is over old bottom, then shave off those rows\n        $7b2427e92e113e6f$exports.removeStarRows(lodLevel, 0, bottom - start.y);\n        else if (bottom < start.y) {\n            const newStars = this.generateGrid(lodLevel, start.x, end.x, bottom, start.y);\n            $7b2427e92e113e6f$exports.addStarRows(lodLevel, 0, newStars);\n        }\n        start.y = bottom;\n        if (left > start.x) $7b2427e92e113e6f$exports.removeStarColumns(lodLevel, 0, left - start.x);\n        else if (left < start.x) {\n            const newStars = this.generateGrid(lodLevel, left, start.x, start.y, end.y);\n            $7b2427e92e113e6f$exports.addStarColumns(lodLevel, 0, newStars);\n        }\n        start.x = left;\n        if (right < end.x) $7b2427e92e113e6f$exports.removeStarColumns(lodLevel, starData.width() - (end.x - right), end.x - right);\n        else if (right > end.x) {\n            const newStars = this.generateGrid(lodLevel, end.x, right, start.y, end.y);\n            $7b2427e92e113e6f$exports.addStarColumns(lodLevel, starData.width(), newStars);\n        }\n        end.x = right;\n    },\n    generateGrid (lodLevel, startX, endX, startY, endY) {\n        const size = (endX - startX) * (endY - startY) * lodLevel * 2;\n        let newStars = new Array(size);\n        let index = 0;\n        for(let x = startX; x < endX; ++x)for(let y = startY; y < endY; ++y){\n            const stars = this.generateStarsInGrid(lodLevel, x, y);\n            for(let i = 0; i < stars.length; ++i)newStars[index++] = stars[i];\n        }\n        return newStars;\n    },\n    generateStarsInGrid (lodLevel, x, y) {\n        const size = lodLevel * 2;\n        const gridSize = 2 ** ($60944aa7cd7b3b7f$var$MAX_LOD - lodLevel + $60944aa7cd7b3b7f$var$MIN_SIZE_EXP);\n        const stars = new Array(size);\n        const seed = gridSize + (y * 999 + x);\n        const rng = $20c26a4462377769$exports(seed);\n        for(let i = 0; i < size; ++i){\n            const starX = (rng.nextFloat() + x) * gridSize;\n            const starY = (rng.nextFloat() + y) * gridSize;\n            const starSize = (rng.nextFloat() * gridSize + gridSize) / 2 ** $60944aa7cd7b3b7f$var$MIN_SIZE_EXP;\n            stars[i] = {\n                position: [\n                    starX,\n                    starY\n                ],\n                size: starSize\n            };\n        }\n        return stars;\n    },\n    getStarAtCoord (x, y) {\n        const positions = $7b2427e92e113e6f$exports.data.starRenderData.position.data;\n        const sizes = $7b2427e92e113e6f$exports.data.starRenderData.size.data;\n        for(let i = 0; i < sizes.length; ++i){\n            const star = {\n                x: positions[i * 2],\n                y: positions[i * 2 + 1],\n                size: sizes[i]\n            };\n            const distance = Math.sqrt((x - star.x) ** 2 + (y - star.y) ** 2);\n            if (distance < star.size) return star;\n        }\n        return null;\n    },\n    coordToId (x, y) {\n        x = Number((x / 100).toFixed(1));\n        y = Number((y / 100).toFixed(1));\n        console.log(x, y);\n        // Apply Cantor pairing function to x and y\n        let uniqueInt = (x + y) * (x + y + 1) / 2 + y;\n        // Convert the unique integer to base-36 (or any base)\n        return uniqueInt.toString(36).replace(\".\", \"-\") // Converts to base-36 string (0-9, a-z)\n        ;\n    },\n    IdToCoord (id) {\n        const n = parseInt(id.replace(\"-\", \".\"), 36);\n        let t = Math.floor((Math.sqrt(1 + 8 * n) - 1) / 2);\n        let y = (n - t * (t + 1) / 2) * 100;\n        let x = (t - y) * 100;\n        return {\n            x: x,\n            y: y\n        };\n    }\n};\n$60944aa7cd7b3b7f$exports = $60944aa7cd7b3b7f$var$mod;\n\n\nvar $c6d648ceeedc004f$exports = {};\nconst $c6d648ceeedc004f$var$mod = {\n    setStat (name, value) {\n        $(`.${name}`).text(value);\n    }\n};\n$c6d648ceeedc004f$exports = $c6d648ceeedc004f$var$mod;\n\n\nvar $5bf5133f24e781dc$exports = {};\nclass $5bf5133f24e781dc$var$Timer {\n    constructor(){\n        this.start();\n    }\n    start() {\n        this.startTime = performance.now();\n    }\n    stop() {\n        return this.lap();\n    }\n    lapse() {\n        const time = this.lap();\n        this.startTime = performance.now();\n        return time;\n    }\n    lap() {\n        return Number((performance.now() - this.startTime).toFixed(1));\n    }\n}\n$5bf5133f24e781dc$exports = $5bf5133f24e781dc$var$Timer;\n\n\nconst $28f79cfcdf8afeb9$var$canvas = document.querySelector(\".viewport\");\nconst $28f79cfcdf8afeb9$var$camera = new $80a75ef059e5aa8e$exports($28f79cfcdf8afeb9$var$canvas);\nconst $28f79cfcdf8afeb9$var$renderer = new $a1e98a181f2c075d$exports($28f79cfcdf8afeb9$var$canvas);\n$28f79cfcdf8afeb9$var$renderer.bindCamera($28f79cfcdf8afeb9$var$camera);\nlet $28f79cfcdf8afeb9$var$tick = 0;\nlet $28f79cfcdf8afeb9$var$processTimeAvg = [];\nlet $28f79cfcdf8afeb9$var$renderTimeAvg = [];\nfunction $28f79cfcdf8afeb9$var$update() {\n    ++$28f79cfcdf8afeb9$var$tick;\n    const timer = new $5bf5133f24e781dc$exports();\n    $60944aa7cd7b3b7f$exports.generateViewportStars($28f79cfcdf8afeb9$var$camera);\n    $28f79cfcdf8afeb9$var$processTimeAvg.push(timer.lapse());\n    //data.update()\n    $28f79cfcdf8afeb9$var$renderer.bindData($7b2427e92e113e6f$exports.getData());\n    $28f79cfcdf8afeb9$var$renderer.bindInfo($7b2427e92e113e6f$exports.getInfo());\n    $28f79cfcdf8afeb9$var$renderer.render();\n    $28f79cfcdf8afeb9$var$renderTimeAvg.push(timer.lapse());\n    if ($28f79cfcdf8afeb9$var$tick % 10 == 0) {\n        const processTime = $28f79cfcdf8afeb9$var$processTimeAvg.reduce((sum, val)=>sum + val, 0) / $28f79cfcdf8afeb9$var$processTimeAvg.length;\n        $28f79cfcdf8afeb9$var$processTimeAvg = [];\n        const renderTime = $28f79cfcdf8afeb9$var$renderTimeAvg.reduce((sum, val)=>sum + val, 0) / $28f79cfcdf8afeb9$var$renderTimeAvg.length;\n        $28f79cfcdf8afeb9$var$renderTimeAvg = [];\n        $c6d648ceeedc004f$exports.setStat(\"process-time\", Number(processTime.toFixed(1)));\n        $c6d648ceeedc004f$exports.setStat(\"render-time\", Number(renderTime.toFixed(1)));\n        $c6d648ceeedc004f$exports.setStat(\"total-time\", Number((processTime + renderTime).toFixed(1)));\n        $c6d648ceeedc004f$exports.setStat(\"fps\", Number((1000 / (processTime + renderTime)).toFixed(1)));\n        $c6d648ceeedc004f$exports.setStat(\"lod\", Math.floor($7b2427e92e113e6f$exports.data.lodLevel));\n    }\n    /*if (tick % 600 == 0) {\r\n        console.log(data.data)\r\n    }*/ requestAnimationFrame($28f79cfcdf8afeb9$var$update);\n}\nrequestAnimationFrame($28f79cfcdf8afeb9$var$update);\n$(\".viewport\").on(\"mousemove\", function(event) {\n    const { x: x, y: y } = $28f79cfcdf8afeb9$var$camera.screenSpaceToCoord(event.pageX, event.pageY);\n    $c6d648ceeedc004f$exports.setStat(\"mouse-x\", (x / 100).toFixed($7b2427e92e113e6f$exports.data.lodLevel <= 2));\n    $c6d648ceeedc004f$exports.setStat(\"mouse-y\", (-y / 100).toFixed($7b2427e92e113e6f$exports.data.lodLevel <= 2));\n});\n$(\".viewport\").on(\"click\", function(event) {\n    const { x: x, y: y } = $28f79cfcdf8afeb9$var$camera.screenSpaceToCoord(event.pageX, event.pageY);\n    const star = $60944aa7cd7b3b7f$exports.getStarAtCoord(x, y);\n    if (star) {\n        const id = $60944aa7cd7b3b7f$exports.coordToId(star.x, star.y);\n        $c6d648ceeedc004f$exports.setStat(\"last-clicked-id\", id);\n    }\n});\n$(\"#find-input\").on(\"input\", function() {\n    console.log(\"input\");\n    if ($(this).val() == \"\") return;\n    const { x: x, y: y } = $60944aa7cd7b3b7f$exports.IdToCoord($(this).val());\n    $28f79cfcdf8afeb9$var$camera.x = x;\n    $28f79cfcdf8afeb9$var$camera.y = y;\n});\n\n\n//# sourceMappingURL=index.478aeb03.js.map\n","const Camera = require(\"jscam\")\r\n\r\nconst Renderer = require(\"./renderer/renderer.cjs\")\r\nconst data = require(\"./star-data/data.cjs\")\r\nconst starGrid = require(\"./star-data/star-grid.cjs\")\r\nconst stat = require(\"./util/stat.cjs\")\r\nconst Timer = require(\"./util/timer.cjs\")\r\n\r\nconst canvas = document.querySelector(\".viewport\")\r\n\r\nconst camera = new Camera(canvas)\r\n\r\nconst renderer = new Renderer(canvas)\r\n\r\nrenderer.bindCamera(camera)\r\n\r\nlet tick = 0\r\n\r\nlet processTimeAvg = []\r\nlet renderTimeAvg = []\r\n\r\nfunction update() {\r\n    ++tick\r\n\r\n    const timer = new Timer()\r\n\r\n    starGrid.generateViewportStars(camera)\r\n\r\n    processTimeAvg.push(timer.lapse())\r\n\r\n    //data.update()\r\n\r\n    renderer.bindData(data.getData())\r\n    renderer.bindInfo(data.getInfo())\r\n    renderer.render()\r\n\r\n    renderTimeAvg.push(timer.lapse())\r\n\r\n    if (tick % 10 == 0) {\r\n        const processTime = processTimeAvg.reduce((sum, val) => sum + val, 0) / processTimeAvg.length\r\n        processTimeAvg = []\r\n\r\n        const renderTime = renderTimeAvg.reduce((sum, val) => sum + val, 0) / renderTimeAvg.length\r\n        renderTimeAvg = []\r\n\r\n        stat.setStat(\"process-time\", Number(processTime.toFixed(1)))\r\n        stat.setStat(\"render-time\", Number(renderTime.toFixed(1)))\r\n        stat.setStat(\"total-time\", Number((processTime + renderTime).toFixed(1)))\r\n        stat.setStat(\"fps\", Number((1000 / (processTime + renderTime)).toFixed(1)))\r\n        stat.setStat(\"lod\", Math.floor(data.data.lodLevel))\r\n    }\r\n\r\n    /*if (tick % 600 == 0) {\r\n        console.log(data.data)\r\n    }*/\r\n\r\n    requestAnimationFrame(update)\r\n}\r\nrequestAnimationFrame(update)\r\n\r\n$(\".viewport\").on(\"mousemove\", function(event) {\r\n    const { x, y } = camera.screenSpaceToCoord(event.pageX, event.pageY)\r\n \r\n    stat.setStat(\"mouse-x\", (x / 100).toFixed(data.data.lodLevel <= 2))\r\n    stat.setStat(\"mouse-y\", (-y / 100).toFixed(data.data.lodLevel <= 2))\r\n})\r\n\r\n$(\".viewport\").on(\"click\", function(event) {\r\n    const { x, y } = camera.screenSpaceToCoord(event.pageX, event.pageY)\r\n\r\n    const star = starGrid.getStarAtCoord(x, y)\r\n\r\n    if (star) {\r\n        const id = starGrid.coordToId(star.x, star.y)\r\n\r\n        stat.setStat(\"last-clicked-id\", id)\r\n    }\r\n})\r\n\r\n$(\"#find-input\").on(\"input\", function() {\r\n    console.log(\"input\")\r\n\r\n    if ($(this).val() == \"\") {\r\n        return\r\n    }\r\n\r\n    const { x, y } = starGrid.IdToCoord($(this).val())\r\n\r\n    camera.x = x\r\n    camera.y = y\r\n})","module.exports = class {\r\n    constructor(target, opts) {\r\n        this.target = target\r\n\r\n        this.x = 0\r\n        this.y = 0\r\n        this.z = 1\r\n\r\n        this.down = false\r\n        this.offsetX = 0\r\n        this.offsetY = 0\r\n        this.startX = 0\r\n        this.startY = 0\r\n        this.movedX = 0\r\n        this.movedY = 0\r\n\r\n        this.active = false\r\n        this.button = 0\r\n        this.minZ = 0\r\n        this.maxZ = Infinity\r\n\r\n        if (typeof opts === \"object\") {\r\n            if (opts.hasOwnProperty(\"button\")) {\r\n                if (typeof opts.button === \"number\" && opts.button >= 0) {\r\n                    this.button = opts.button\r\n                } else {\r\n                    throw new TypeError(\"Button property must be a number and above or equal to 0\")\r\n                }\r\n            }\r\n\r\n            if (opts.hasOwnProperty(\"minZ\")) {\r\n                if (typeof opts.minZ === \"number\" && opts.minZ >= 0) {\r\n                    this.minZ = opts.minZ\r\n                } else {\r\n                    throw new TypeError(\"minZ property must be a number and above or equal to 0\")\r\n                }\r\n            }\r\n\r\n            if (opts.hasOwnProperty(\"maxZ\")) {\r\n                if (typeof opts.maxZ === \"number\" && opts.maxZ >= this.minZ) {\r\n                    this.maxZ = opts.maxZ\r\n                } else {\r\n                    throw new TypeError(`MaxZ property must be a number and above or equal to minZ (= ${this.minZ})`)\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onMouseDown = e => {\r\n            if (e.button === this.button) {\r\n                this.down = true\r\n    \r\n                this.startX = e.clientX\r\n                this.startY = e.clientY\r\n    \r\n                this.offsetX = this.x\r\n                this.offsetY = this.y\r\n            }\r\n        }\r\n\r\n        this.onMouseMove = e => {\r\n            if (this.down) {\r\n                e.preventDefault()\r\n    \r\n                this.x = this.offsetX + (this.startX - e.clientX) * this.z\r\n                this.y = this.offsetY + (this.startY - e.clientY) * this.z\r\n            }\r\n        }\r\n    \r\n        this.onMouseUp = e => {\r\n            if (this.down && e.button === this.button) {\r\n                e.preventDefault()\r\n                this.down = false\r\n            }\r\n        }\r\n    \r\n        this.onScroll = e => {\r\n            let oldX = (e.clientX - innerWidth / 2) * this.z\r\n            let oldY = (e.clientY - innerHeight / 2) * this.z\r\n        \r\n            let z = e.deltaY / 1250 * this.z\r\n            this.z = Math.min(Math.max(this.z + z, this.minZ), this.maxZ)\r\n        \r\n            let newX = (e.clientX - innerWidth / 2) * this.z\r\n            let newY = (e.clientY - innerHeight / 2) * this.z\r\n        \r\n            this.x += oldX - newX\r\n            this.y += oldY - newY\r\n        }\r\n    \r\n        if (this.button === 2) {\r\n            this.onContextMenu = e => {\r\n                e.preventDefault()\r\n            }\r\n        }\r\n\r\n        this.begin()\r\n    }\r\n\r\n    begin() {\r\n        this.active = true\r\n\r\n        this.target.addEventListener(\"mousedown\", this.onMouseDown)\r\n        this.target.addEventListener(\"contextmenu\", this.onContextMenu)\r\n        this.target.addEventListener(\"wheel\", this.onScroll)\r\n        \r\n        window.addEventListener(\"mousemove\", this.onMouseMove)\r\n        window.addEventListener(\"mouseup\", this.onMouseUp)\r\n    }\r\n\r\n    end() {\r\n        this.active = false\r\n\r\n        this.target.removeEventListener(\"mousedown\", this.onMouseDown)\r\n        this.target.removeEventListener(\"contextmenu\", this.onContextMenu)\r\n        this.target.removeEventListener(\"wheel\", this.onScroll)\r\n        \r\n        window.removeEventListener(\"mousemove\", this.onMouseMove)\r\n        window.removeEventListener(\"mouseup\", this.onMouseUp)\r\n    }\r\n\r\n    coordToScreenSpace(x, y) {\r\n        const { x: x2, y: y2 } = destruct(x, y)\r\n\r\n        return {\r\n            x: (x2 - this.x) / this.z + innerWidth / 2,\r\n            y: (y2 - this.y) / this.z + innerHeight / 2,\r\n        }\r\n    }\r\n\r\n    coordToClipSpace(x, y) {\r\n        return this.screenSpaceToClipSpace(this.coordToScreenSpace(destruct(x, y)))\r\n    }\r\n\r\n    screenSpaceToCoord(x, y) {\r\n        const { x: x2, y: y2 } = destruct(x, y)\r\n\r\n        return {\r\n            x: (x2 - innerWidth / 2) * this.z + this.x,\r\n            y: (y2 - innerHeight / 2) * this.z + this.y,\r\n        }\r\n    }\r\n\r\n    screenSpaceToClipSpace(x, y) {\r\n        const { x: x2, y: y2 } = destruct(x, y)\r\n\r\n        return {\r\n            x: x2 / innerWidth * 2 - 1,\r\n            y: y2 / innerHeight * 2 - 1,\r\n        }\r\n    }\r\n\r\n    clipSpaceToCoord(x, y) {\r\n        return this.screenSpaceToCoord(this.clipSpaceToScreenSpace(destruct(x, y)))\r\n    }\r\n\r\n    clipSpaceToScreenSpace(x, y) {\r\n        const { x: x2, y: y2 } = destruct(x, y)\r\n\r\n        return {\r\n            x: (x2 + 1) / 2 * innerWidth,\r\n            y: (y2 + 1) / 2 * innerHeight,\r\n        }\r\n    }\r\n}\r\n\r\nfunction destruct(x, y) {\r\n    if (typeof x === \"object\") {\r\n        return x\r\n    }\r\n\r\n    return {\r\n        x,\r\n        y,\r\n    }\r\n}","const Mesh = require(\"./mesh.cjs\")\r\nconst twgl = require(\"twgl.js\")\r\nconst util = require(\"../util/util.cjs\")\r\n\r\nimport VERT_SHADER from \"./glsl/vert.glsl\"\r\nimport FRAG_SHADER from \"./glsl/frag.glsl\"\r\n\r\nimport BG_VERT_SHADER from \"./glsl/bg-vert.glsl\"\r\nimport BG_FRAG_SHADER from \"./glsl/bg-frag.glsl\"\r\n\r\nclass Renderer {\r\n    constructor(canvas) {\r\n        this.gl = canvas.getContext(\"webgl\") || canvas.getContext(\"expiremental-webgl\")\r\n        \r\n        twgl.addExtensionsToContext(this.gl)\r\n        this.ext = this.gl.getExtension('ANGLE_instanced_arrays');\r\n        if (!this.ext) {\r\n            throw new Error('ANGLE_instanced_arrays not supported');\r\n        }\r\n\r\n        this.programInfo = twgl.createProgramInfo(this.gl, [VERT_SHADER, FRAG_SHADER])\r\n        this.bgProgramInfo = twgl.createProgramInfo(this.gl, [BG_VERT_SHADER, BG_FRAG_SHADER])\r\n\r\n        this.data = []\r\n    }\r\n\r\n    bindCamera(camera) {\r\n        this.camera = camera\r\n    }\r\n\r\n    bindData(data) {\r\n        this.data = data\r\n    }\r\n\r\n    bindBgData() {\r\n        const { x: left, y: top } = this.camera.screenSpaceToCoord(0, 0)\r\n        const { x: right, y: bottom } = this.camera.screenSpaceToCoord(innerWidth, innerHeight)\r\n\r\n        this.bgData = {\r\n            position: {\r\n                numComponents: 2,\r\n                data: [\r\n                    left, top,\r\n                    left, bottom,\r\n                    right, bottom,\r\n\r\n                    right, bottom,\r\n                    right, top,\r\n                    left, top,\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    bindInfo(info) {\r\n        this.info = info\r\n    }\r\n\r\n    getShaderType() {\r\n        const shaderType = util.getShaderType()\r\n\r\n        switch (shaderType) {\r\n            case \"realistic\":\r\n                return 1\r\n            case \"black-white\":\r\n                return 2\r\n            case \"xy\":\r\n                return 3\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.gl.canvas.width = innerWidth\r\n        this.gl.canvas.height = innerHeight\r\n\r\n        //twgl.resizeCanvasToDisplaySize(this.gl.canvas)\r\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height)\r\n\r\n        this.gl.enable(this.gl.DEPTH_TEST)\r\n        this.gl.enable(this.gl.CULL_FACE)\r\n        this.gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\r\n\r\n        this.renderStars()\r\n\r\n        if (this.info.lod > 1) {\r\n            this.bindBgData()\r\n            this.renderBg()\r\n        }\r\n    }\r\n\r\n    renderStars() {\r\n        const shaderType = this.getShaderType()\r\n\r\n        const uniforms = {\r\n            resolution: [innerWidth, innerHeight],\r\n            camera: [this.camera.x, this.camera.y, this.camera.z],\r\n            shaderType,\r\n        }\r\n\r\n        this.bufferInfo = twgl.createBufferInfoFromArrays(this.gl, this.data)\r\n        this.vertexArrayInfo = twgl.createVertexArrayInfo(this.gl, this.programInfo, this.bufferInfo)\r\n\r\n        this.gl.useProgram(this.programInfo.program)\r\n        twgl.setBuffersAndAttributes(this.gl, this.programInfo, this.vertexArrayInfo)\r\n        twgl.setUniforms(this.programInfo, uniforms)\r\n        this.ext.drawArraysInstancedANGLE(this.gl.TRIANGLES, 0, this.data.points.data.length / 2, this.data.size.data.length)\r\n    }\r\n\r\n    renderBg() {\r\n        const shaderType = this.getShaderType()\r\n\r\n        const uniforms = {\r\n            resolution: [innerWidth, innerHeight],\r\n            camera: [this.camera.x, this.camera.y, this.camera.z],\r\n            shaderType,\r\n            lod: this.info.lod,\r\n        }\r\n\r\n        this.bgBufferInfo = twgl.createBufferInfoFromArrays(this.gl, this.bgData)\r\n\r\n        this.gl.useProgram(this.bgProgramInfo.program);\r\n        twgl.setBuffersAndAttributes(this.gl, this.bgProgramInfo, this.bgBufferInfo);\r\n        twgl.setUniforms(this.bgProgramInfo, uniforms);\r\n        twgl.drawBufferInfo(this.gl, this.bgBufferInfo);\r\n    }\r\n}\r\n\r\nmodule.exports = Renderer","precision mediump float;\r\n\r\nattribute vec2 points;\r\nattribute vec2 position;\r\nattribute float size;\r\n\r\nuniform vec2 resolution;\r\nuniform vec3 camera;\r\n\r\nvarying float mass;\r\nvarying vec2 fragPos;\r\n\r\nvoid main() {\r\n    vec2 transform = points * size + position;\r\n\r\n    vec2 cameraSpace = (transform - camera.xy) / camera.z;\r\n\r\n    vec2 clipSpace = cameraSpace / resolution;\r\n\r\n    vec2 screenSpace = clipSpace * vec2(2.0, -2.0);\r\n\r\n    mass = size / 128.0;\r\n\r\n    fragPos = transform;\r\n\r\n    gl_Position = vec4(screenSpace, 0.0, 1.0);\r\n}","precision mediump float;\r\n\r\nuniform float shaderType;\r\n\r\nvarying float mass;\r\nvarying vec2 fragPos;\r\n\r\nfloat rand(vec2 co) {\r\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvec3 getColorOf(float mass) {\r\n    vec3 color = vec3(1.0, 1.0, 1.0); \r\n\r\n    vec3 red = vec3(1.0, 0.5, 0.2);\r\n    vec3 yellow = vec3(1.0, 1.0, 0.6);\r\n    vec3 white = vec3(1.0, 1.0, 1.0);\r\n    vec3 blue = vec3(0.5, 0.7, 1.0);\r\n\r\n    float RED_LIM = 0.05;\r\n    float YELLOW_LIM = 0.075;\r\n    float WHITE_LIM = 0.2;\r\n    float BLUE_LIM = 0.4;\r\n\r\n    if (mass <= RED_LIM) {\r\n        color = red;\r\n    } else if (mass <= YELLOW_LIM) {\r\n        color = mix(red, yellow, (mass - RED_LIM) / (YELLOW_LIM - RED_LIM));\r\n    } else if (mass <= WHITE_LIM) {\r\n        color = mix(yellow, white, (mass - YELLOW_LIM) / (WHITE_LIM - YELLOW_LIM));\r\n    } else if (mass <= BLUE_LIM) {\r\n        color = mix(white, blue, (mass - WHITE_LIM) / (BLUE_LIM - WHITE_LIM));\r\n    } else {\r\n        color = blue;\r\n    }\r\n\r\n    //color += vec3((rand(fragPos) - 0.5) / 4.0);\r\n\r\n    return color;\r\n}\r\n \r\nvoid main() {\r\n    vec3 color = vec3(0.0, 0.0, 0.0);\r\n\r\n    if (shaderType == 1.0) {\r\n        color = getColorOf(mass);\r\n    } else if (shaderType == 2.0) {\r\n        color = vec3(1.0, 1.0, 1.0);\r\n    } else if (shaderType == 3.0) {\r\n        color = vec3(fragPos.x / 999999.0, 1.0 - fragPos.x / 999999.0, 0.5 + fragPos.y / 999999.0);\r\n    }\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n}","precision mediump float;\r\n\r\nattribute vec2 position;\r\n\r\nuniform vec2 resolution;\r\nuniform vec3 camera;\r\n\r\nvarying vec2 fragPos;\r\n\r\nvoid main() {\r\n    vec2 cameraSpace = (position - camera.xy) / camera.z;\r\n\r\n    vec2 clipSpace = cameraSpace / resolution;\r\n\r\n    vec2 screenSpace = clipSpace * vec2(2.0, -2.0);\r\n\r\n    fragPos = position;\r\n\r\n    gl_Position = vec4(screenSpace, 0.0, 1.0);\r\n}","precision mediump float;\r\n\r\nuniform float shaderType;\r\nuniform float lod;\r\n\r\nvarying vec2 fragPos;\r\n\r\nfloat round(float n) {\r\n    return floor(n + 0.5);\r\n}\r\n\r\nvec2 round(vec2 n) {\r\n    return vec2(round(n.x), round(n.y));\r\n}\r\n\r\nfloat rand(vec2 co) {\r\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvec3 getColorOf(float mass) {\r\n    vec3 color = vec3(1.0, 1.0, 1.0); \r\n\r\n    vec3 red = vec3(1.0, 0.5, 0.2);\r\n    vec3 yellow = vec3(1.0, 1.0, 0.6);\r\n    vec3 white = vec3(1.0, 1.0, 1.0);\r\n    vec3 blue = vec3(0.5, 0.7, 1.0);\r\n\r\n    float RED_LIM = 0.05;\r\n    float YELLOW_LIM = 0.075;\r\n    float WHITE_LIM = 0.2;\r\n    float BLUE_LIM = 0.4;\r\n\r\n    if (mass <= RED_LIM) {\r\n        color = red;\r\n    } else if (mass <= YELLOW_LIM) {\r\n        color = mix(red, yellow, (mass - RED_LIM) / (YELLOW_LIM - RED_LIM));\r\n    } else if (mass <= WHITE_LIM) {\r\n        color = mix(yellow, white, (mass - YELLOW_LIM) / (WHITE_LIM - YELLOW_LIM));\r\n    } else if (mass <= BLUE_LIM) {\r\n        color = mix(white, blue, (mass - WHITE_LIM) / (BLUE_LIM - WHITE_LIM));\r\n    } else {\r\n        color = blue;\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nvoid main() {\r\n    vec2 seed = mod(round(fragPos), 1000.0);\r\n\r\n    float value = (rand(seed) + rand(seed.yx)) / 2.0;\r\n\r\n    float brightness = pow(value, 5.0 - lod / 2.0);\r\n\r\n    float LOD_MIN = 0.75;\r\n    float LOD_MAX = 2.0;\r\n\r\n    if (lod < LOD_MIN) {\r\n        brightness = 0.0;\r\n    }\r\n\r\n    if (lod >= LOD_MIN && lod < LOD_MAX) {\r\n        brightness = mix(0.0, brightness, (lod - LOD_MIN) / (LOD_MAX - LOD_MIN));\r\n    }\r\n\r\n    if (brightness < 0.5) {\r\n        brightness /= 1.5;\r\n    }\r\n\r\n    if (brightness > 0.9 && lod >= 3.0) {\r\n        brightness = brightness * 2.0;\r\n    }\r\n\r\n    vec3 color = vec3(0.0, 0.0, 0.0);\r\n\r\n    if (shaderType == 1.0) {\r\n        color = getColorOf(brightness / 4.0) * brightness / 4.0;\r\n    } else if (shaderType == 2.0) {\r\n        color = vec3(brightness / 4.0);\r\n    } else if (shaderType == 3.0) {\r\n        color = vec3(fragPos.x / 999999.0, 1.0 - fragPos.x / 999999.0, 0.5 + fragPos.y / 999999.0);\r\n        color *= brightness / 4.0;\r\n    }\r\n \r\n    gl_FragColor = vec4(color, 1.0);\r\n}","class Mesh {\r\n    constructor(points = []) {\r\n        this.points = points\r\n    }\r\n\r\n    push(...data) {\r\n        this.points.push(...data)\r\n    }\r\n}\r\n\r\nMesh.from = function(points) {\r\n    return new Mesh(points)\r\n}\r\n\r\nMesh.circleWithSides = function(sides) {\r\n    const mesh = new Mesh()\r\n\r\n    // Generate array of sin - cos pairs\r\n    for (let i = 0; i < sides; ++i) {\r\n        const theta = i / sides * 2 * Math.PI\r\n        const x = Math.sin(theta)\r\n        const y = Math.cos(theta)\r\n\r\n        const theta2 = (i + 1) / sides * 2 * Math.PI\r\n        const x2 = Math.sin(theta2)\r\n        const y2 = Math.cos(theta2)\r\n        \r\n        mesh.push(x, y, x2, y2, 0, 0)\r\n    }\r\n\r\n    return mesh\r\n}\r\n\r\nmodule.exports = Mesh","/* @license twgl.js 5.5.4 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create$1(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy$1,\n  create: create$1,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply$1,\n  negate: negate$1,\n  normalize: normalize,\n  setDefaultType: setDefaultType$1,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */\nfunction create() {\n  return new MatType(16).fill(0);\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create$1();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create$1();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create$1();\n  yAxis = yAxis || create$1();\n  zAxis = zAxis || create$1();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create$1();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal$1(m, v, dst) {\n  dst = dst || create$1();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy,\n  create: create,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply,\n  negate: negate,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal$1,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE$2                           = 0x1400;\nconst UNSIGNED_BYTE$3                  = 0x1401;\nconst SHORT$2                          = 0x1402;\nconst UNSIGNED_SHORT$3                 = 0x1403;\nconst INT$3                            = 0x1404;\nconst UNSIGNED_INT$3                   = 0x1405;\nconst FLOAT$3                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE$2]                           = Int8Array;\n  tt[UNSIGNED_BYTE$3]                  = Uint8Array;\n  tt[SHORT$2]                          = Int16Array;\n  tt[UNSIGNED_SHORT$3]                 = Uint16Array;\n  tt[INT$3]                            = Int32Array;\n  tt[UNSIGNED_INT$3]                   = Uint32Array;\n  tt[FLOAT$3]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5$1]           = Uint16Array;\n  tt[HALF_FLOAT$1]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV$1]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV$1]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV$1]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV$1] = Uint32Array;\n  tt[UNSIGNED_INT_24_8$1]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer$1 = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error$1(...args) {\n  console.error(...args);\n}\n\nfunction warn$1(...args) {\n  console.warn(...args);\n}\n\nconst isTypeWeakMaps = new Map();\n\nfunction isType(object, type) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  let weakMap = isTypeWeakMaps.get(type);\n  if (!weakMap) {\n    weakMap = new WeakMap();\n    isTypeWeakMaps.set(type, weakMap);\n  }\n  let isOfType = weakMap.get(object);\n  if (isOfType === undefined) {\n    const s = Object.prototype.toString.call(object);\n    isOfType = s.substring(8, s.length - 1) === type;\n    weakMap.set(object, isOfType);\n  }\n  return isOfType;\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER$1                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$2         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst defaults$2 = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults$2.attribPrefix = prefix;\n}\n\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER$1;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray$1(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents$1(array, arrayName, numValues) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues || getArray$1(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer$1(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer$1(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type ? typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\nfunction glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? glTypeOrTypedArrayCtor\n      : glTypeOrTypedArrayCtor ? getGLTypeForTypedArrayType(glTypeOrTypedArrayCtor) : FLOAT$2;\n}\n\nfunction typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? getTypedArrayTypeForGLType(glTypeOrTypedArrayCtor)\n      : glTypeOrTypedArrayCtor || Float32Array;\n}\n\nfunction attribBufferFromBuffer(gl, array/*, arrayName */) {\n  return {\n    buffer: array.buffer,\n    numValues: 2 * 3 * 4,  // safely divided by 2, 3, 4\n    type: glTypeFromGLTypeOrTypedArrayType(array.type),\n    arrayType: typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type),\n  };\n}\n\nfunction attribBufferFromSize(gl, array/*, arrayName*/) {\n  const numValues = array.data || array;\n  const arrayType = typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\n  const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(ARRAY_BUFFER$1, buffer);\n  gl.bufferData(ARRAY_BUFFER$1, numBytes, array.drawType || STATIC_DRAW);\n  return {\n    buffer,\n    numValues,\n    type: getGLTypeForTypedArrayType(arrayType),\n    arrayType,\n  };\n}\n\nfunction attribBufferFromArrayLike(gl, array, arrayName) {\n  const typedArray = makeTypedArray(array, arrayName);\n  return {\n    arrayType: typedArray.constructor,\n    buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\n    type: getGLTypeForTypedArray(typedArray),\n    numValues: 0,\n  };\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults$2.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer$1(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let fn;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          fn = attribBufferFromBuffer;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          fn = attribBufferFromSize;\n        } else {\n          fn = attribBufferFromArrayLike;\n        }\n        const {buffer, type, numValues, arrayType} = fn(gl, array, arrayName);\n        const normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n        const numComponents = getNumComponents$1(array, arrayName, numValues);\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER$1, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER$1, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER$1, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$2)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$2) return 2;  // eslint-disable-line\n  if (type === INT$2)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$2)   return 4;  // eslint-disable-line\n  if (type === FLOAT$2)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray$1(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents$1(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults$2.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER$1, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER$1, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER$2);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER$2 : ARRAY_BUFFER$1;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults$2,\n  getNumComponents_: getNumComponents$1,\n  getArray_: getArray$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray = getArray$1;  // eslint-disable-line\nconst getNumComponents = getNumComponents$1;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer$1(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal(mi, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply$1([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents(arrayInfo, name);\n      const array = getArray(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = isArrayBuffer$1;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA$1                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst DEPTH_STENCIL$1                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE$1                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR$1                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D$2                     = 0x0de1;\nconst TEXTURE_CUBE_MAP$1               = 0x8513;\nconst TEXTURE_3D$1                     = 0x806f;\nconst TEXTURE_2D_ARRAY$1               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\nconst TEXTURE_COMPARE_MODE           = 0x884C;\nconst TEXTURE_COMPARE_FUNC           = 0x884D;\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565$1                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1$1                      = 0x8057;\nconst RGBA4$1                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16$1            = 0x81A5;\nconst DEPTH_COMPONENT24$1            = 0x81A6;\nconst DEPTH_COMPONENT32F$1           = 0x8CAC;\nconst DEPTH32F_STENCIL8$1            = 0x8CAD;\nconst DEPTH24_STENCIL8$1             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT$1] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL$1]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA$1]               = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n    t[DEPTH_COMPONENT$1]    = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$1, UNSIGNED_SHORT$1], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$1, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$1], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$1], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$1, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$1], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$1], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$1], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$1], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB565$1]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$1], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$1], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$1], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$1], };\n    t[RGBA8]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1$1]            = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4$1]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$1], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$1], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$1], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$1], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$1, UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT24$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT32F$1] = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[DEPTH24_STENCIL8$1]   = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8$1]  = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$1;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP$1 ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [compareFunc] TEXTURE_COMPARE_FUNC setting\n * @property {number} [compareMode] TEXTURE_COMPARE_MODE setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D$1 || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n  if (options.compareFunc !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_FUNC, options.compareFunc);\n  }\n  if (options.compareMode !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_MODE, options.compareMode);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA$1;\n  const target = options.target || TEXTURE_2D$2;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR$1 : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error$1(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, 0, RGBA$1, 1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D$2;\n  if (target !== TEXTURE_CUBE_MAP$1) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D_ARRAY$1;\n  if (target !== TEXTURE_3D$1 && target !== TEXTURE_2D_ARRAY$1) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D$2;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA$1;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP$1) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = error$1;\nconst warn = warn$1;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (!textureOrPair || isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (!textureOrPair || isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {string} errors or empty string\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    const error = `${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`;\n    errFn(error);\n    return error;\n  }\n  return '';\n}\n\n/**\n * @typedef {Object} FullProgramSpec\n * @property {string[]} shaders the shader source or element ids.\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs || {};\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteProgramAndShaders(gl, program, notThese) {\n  const shaders = gl.getAttachedShaders(program);\n  for (const shader of shaders) {\n    if (notThese.has(shader)) {\n      gl.deleteShader(shader);\n    }\n  }\n  gl.deleteProgram(program);\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction createProgramNoCheck(gl, shaders, programOptions) {\n  const program = gl.createProgram();\n  const {\n    attribLocations,\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n  } = getProgramOptions(programOptions);\n\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof shader === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = gl.createShader(type);\n      gl.shaderSource(shader, prepShaderSource(src).shaderSource);\n      gl.compileShader(shader);\n      gl.attachShader(program, shader);\n    }\n  }\n\n  Object.entries(attribLocations).forEach(([attrib, loc]) => gl.bindAttribLocation(program, loc, attrib));\n\n  {\n    let varyings = transformFeedbackVaryings;\n    if (varyings) {\n      if (varyings.attribs) {\n        varyings = varyings.attribs;\n      }\n      if (!Array.isArray(varyings)) {\n        varyings = Object.keys(varyings);\n      }\n      gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || SEPARATE_ATTRIBS);\n    }\n  }\n\n  gl.linkProgram(program);\n  return program;\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaderSet = new Set(shaders);\n  const program = createProgramNoCheck(gl, shaders, progOptions);\n\n  function hasErrors(gl, program) {\n    const errors = getProgramErrors(gl, program, progOptions.errorCallback);\n    if (errors) {\n      deleteProgramAndShaders(gl, program, shaderSet);\n    }\n    return errors;\n  }\n\n  if (progOptions.callback) {\n    waitForProgramLinkCompletionAsync(gl, program).then(() => {\n      const errors = hasErrors(gl, program);\n      progOptions.callback(errors, errors ? undefined : program);\n    });\n    return undefined;\n  }\n\n  return hasErrors(gl, program) ? undefined : program;\n}\n\n/**\n * This only works because the functions it wraps the first 2 arguments\n * are gl and any, followed by things that become programOptions\n * @private\n */\nfunction wrapCallbackFnToAsyncFn(fn) {\n  return function(gl, arg1, ...args) {\n    return new Promise((resolve, reject) => {\n      const programOptions = getProgramOptions(...args);\n      programOptions.callback = (err, program) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(program);\n        }\n      };\n      fn(gl, arg1, programOptions);\n    });\n  };\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nconst createProgramAsync = wrapCallbackFnToAsyncFn(createProgram);\n\n/**\n * Same as createProgramInfo but returns a promise\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nconst createProgramInfoAsync = wrapCallbackFnToAsyncFn(createProgramInfo);\n\nasync function waitForProgramLinkCompletionAsync(gl, program) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n}\n\nasync function waitForAllProgramsLinkCompletionAsync(gl, programs) {\n  for (const program of Object.values(programs)) {\n    await waitForProgramLinkCompletionAsync(gl, program);\n  }\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {string?} errors if program is failed, else undefined\n * @private\n */\nfunction getProgramErrors(gl, program, errFn) {\n  errFn = errFn || error;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n    // print any errors from these shaders\n    const shaders = gl.getAttachedShaders(program);\n    const errors = shaders.map(shader => checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\n    return `${lastError}\\n${errors.filter(_ => _).join('\\n')}`;\n  }\n  return undefined;\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (const scriptId of shaderScriptIds) {\n    const shaderScript = getElementById(scriptId);\n    if (!shaderScript) {\n      return reportError(progOptions, `unknown script element: ${scriptId}`);\n    }\n    shaders.push(shaderScript.text);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  return createProgram(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      origCallback(err, err ? undefined : createProgramInfoFromProgram(gl, program));\n    };\n  }\n\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\nfunction checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\n  // check errors for everything.\n  for (const [name, program] of Object.entries(programs)) {\n    const options = {...programOptions};\n    const spec = programSpecs[name];\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    const errors = getProgramErrors(gl, program, options.errorCallback);\n    if (errors) {\n      // delete everything we created\n      for (const program of Object.values(programs)) {\n        const shaders = gl.getAttachedShaders(program);\n        gl.deleteProgram(program);\n        for (const shader of shaders) {\n          // Don't delete it if we didn't create it.\n          if (!noDeleteShadersSet.has(shader)) {\n            gl.deleteShader(shader);\n          }\n        }\n      }\n      return errors;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Creates multiple programs\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgram}\n *\n * Example:\n *\n *     const programs = twgl.createPrograms(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nfunction createPrograms(gl, programSpecs, programOptions = {}) {\n  // Remember existing shaders so that if there is an error we don't delete them\n  const noDeleteShadersSet = new Set();\n\n  // compile and link everything\n  const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec]) => {\n    const options = {...programOptions};\n    const shaders = Array.isArray(spec) ? spec : spec.shaders;\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\n    return [name, createProgramNoCheck(gl, shaders, options)];\n  }));\n\n  if (programOptions.callback) {\n    waitForAllProgramsLinkCompletionAsync(gl, programs).then(() => {\n      const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n      programOptions.callback(errors, errors ? undefined : programs);\n    });\n    return undefined;\n  }\n\n  const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n  return errors ? undefined : programs;\n}\n\n/**\n * Creates multiple programInfos\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgramInfo}\n *\n * Examples:\n *\n *     const programInfos = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * or\n *\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\n */\nfunction createProgramInfos(gl, programSpecs, programOptions) {\n  programOptions = getProgramOptions(programOptions);\n\n  function createProgramInfosForPrograms(gl, programs) {\n    return Object.fromEntries(Object.entries(programs).map(([name, program]) =>\n      [name, createProgramInfoFromProgram(gl, program)]\n    ));\n  }\n\n  const origCallback = programOptions.callback;\n  if (origCallback) {\n    programOptions.callback = (err, programs) => {\n      origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\n    };\n  }\n\n  const programs = createPrograms(gl, programSpecs, programOptions);\n  if (origCallback || !programs) {\n    return undefined;\n  }\n\n  return createProgramInfosForPrograms(gl, programs);\n}\n\n/**\n * Creates multiple programs asynchronously\n *\n * @see {@link module:twgl.createProgramAsync}\n *\n * Example:\n *\n *     const programs = await twgl.createProgramsAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nconst createProgramsAsync = wrapCallbackFnToAsyncFn(createPrograms);\n\n/**\n * Creates multiple programInfos asynchronously\n *\n * @see {@link module:twgl.createProgramInfoAsync}\n *\n * Example:\n *\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\n */\nconst createProgramInfosAsync = wrapCallbackFnToAsyncFn(createProgramInfos);\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramAsync: createProgramAsync,\n  createPrograms: createPrograms,\n  createProgramsAsync: createProgramsAsync,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoAsync: createProgramInfoAsync,\n  createProgramInfos: createProgramInfos,\n  createProgramInfosAsync: createProgramInfosAsync,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\nconst DEPTH_COMPONENT24              = 0x81a6;\nconst DEPTH_COMPONENT32F             = 0x8cac;\nconst DEPTH24_STENCIL8               = 0x88f0;\nconst DEPTH32F_STENCIL8              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n  setDefaults$2(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn$1(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createProgramInfos, createProgramInfosAsync, createPrograms, createProgramsAsync, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray$1 as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents$1 as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer$1 as isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults$2 as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n","const mod = {\r\n    getShaderType() {\r\n        return $(\".shader-options > input:checked\").attr(\"id\")\r\n    },\r\n}\r\n\r\nmodule.exports = mod","const Mesh = require(\"../renderer/mesh.cjs\")\r\n\r\nconst CIRCLE_MESH = Mesh.circleWithSides(16)\r\n\r\nconst MAX_LOD = 8\r\n\r\nconst data = {\r\n    lodLevel: 0,\r\n\r\n    stars: [],\r\n\r\n    starRenderData: {\r\n        points: {\r\n            numComponents: 2,\r\n            data: CIRCLE_MESH.points,\r\n        },\r\n        position: {\r\n            numComponents: 2,\r\n            data: [],\r\n            divisor: 1,\r\n        },\r\n        size: {\r\n            numComponents: 1,\r\n            data: [],\r\n            divisor: 1,\r\n        },\r\n    },\r\n\r\n    starRenderDataTyped: {\r\n        points: {\r\n            numComponents: 2,\r\n            data: CIRCLE_MESH.points,\r\n        },\r\n        position: {\r\n            numComponents: 2,\r\n            data: new Float32Array(0),\r\n            divisor: 1,\r\n        },\r\n        size: {\r\n            numComponents: 1,\r\n            data: new Float32Array(0),\r\n            divisor: 1,\r\n        },\r\n    }\r\n}\r\n\r\nfor (let i = 0; i < MAX_LOD; ++i) {\r\n    data.stars.push({\r\n        start: {\r\n            x: 0,\r\n            y: 0,\r\n        },\r\n        end: {\r\n            x: 0,\r\n            y: 0,\r\n        },\r\n\r\n        starsPerGrid: i * 2,\r\n\r\n        width() {\r\n            return this.end.x - this.start.x\r\n        },\r\n\r\n        height() {\r\n            return this.end.y - this.start.y\r\n        },\r\n    })\r\n}\r\n\r\nconst mod = {\r\n    update() {\r\n        if (data.requestUpdate) {\r\n            data.starRenderDataTyped.position.data = new Float32Array(data.starRenderData.position.data)\r\n            data.starRenderDataTyped.size.data = new Float32Array(data.starRenderData.size.data)\r\n\r\n            data.requestUpdate = false\r\n        }\r\n    },\r\n\r\n    getData() {\r\n        //return data.starRenderDataTyped\r\n        return data.starRenderData\r\n    },\r\n\r\n    getInfo() {\r\n        return {\r\n            lod: data.lodLevel\r\n        }\r\n    },\r\n\r\n    spliceStars(lodLevel, start, width, newStars = []) {\r\n        data.requestUpdate = true\r\n\r\n        let offset = 0\r\n\r\n        for (let lod = 0; lod < lodLevel; ++lod) {\r\n            const starData = this.getStarLOD(lod)\r\n\r\n            offset += (starData.width() * starData.height()) * starData.starsPerGrid\r\n        }\r\n\r\n        const starData = this.getStarLOD(lodLevel)\r\n\r\n        width *= starData.starsPerGrid\r\n        start *= starData.starsPerGrid\r\n        start += offset\r\n\r\n        const positionData = data.starRenderData.position.data\r\n        const sizeData = data.starRenderData.size.data\r\n\r\n        if (newStars.length === 0) {\r\n            positionData.splice(start * 2, width * 2)\r\n            sizeData.splice(start, width)\r\n\r\n            return\r\n        }\r\n\r\n        const positions = new Array(newStars.length * 2)\r\n        const sizes = new Array(newStars.length)\r\n\r\n        for (let i = 0; i < newStars.length; ++i) {\r\n            const [x, y] = newStars[i].position\r\n            const size = newStars[i].size\r\n\r\n            positions[i * 2] = x\r\n            positions[i * 2 + 1] = y\r\n            sizes[i] = (size)\r\n        }\r\n\r\n        positionData.splice(start * 2, width * 2, ...positions)\r\n        sizeData.splice(start, width, ...sizes)\r\n    },\r\n\r\n    removeStarRows(lodLevel, startY, height) {\r\n        const starData = this.getStarLOD(lodLevel)\r\n\r\n        const columnHeight = starData.height()\r\n\r\n        // MUST BE IN REVERSE\r\n        let index = starData.width()\r\n        while (index--) {\r\n            this.spliceStars(lodLevel, index * columnHeight + startY, height)   \r\n        }\r\n\r\n        if (startY === 0) {\r\n            starData.start.y += height\r\n        } else {\r\n            starData.end.y -= height\r\n        }\r\n    },\r\n\r\n    addStarRows(lodLevel, startY, newStars) {\r\n        const starData = this.getStarLOD(lodLevel)\r\n\r\n        const columnHeight = starData.height()\r\n\r\n        let height = newStars.length / starData.width()\r\n\r\n        // MUST BE IN REVERSE\r\n        let index = starData.width()\r\n        while (index--) {\r\n            const sliceStart = index * height\r\n            const sliceEnd = sliceStart + height\r\n\r\n            this.spliceStars(lodLevel, index * columnHeight + startY, 0, newStars.slice(sliceStart, sliceEnd))\r\n        }\r\n\r\n        height /= starData.starsPerGrid\r\n\r\n        if (startY === 0) {\r\n            starData.start.y -= height\r\n        } else {\r\n            starData.end.y += height\r\n        }\r\n    },\r\n\r\n    removeStarColumns(lodLevel, startX, width) {\r\n        const starData = this.getStarLOD(lodLevel)\r\n\r\n        const columnHeight = starData.height()\r\n\r\n        this.spliceStars(lodLevel, startX * columnHeight, width * columnHeight)\r\n\r\n        if (startX === 0) {\r\n            starData.start.x += width\r\n        } else {\r\n            starData.end.x -= width\r\n        }\r\n    },\r\n\r\n    addStarColumns(lodLevel, startX, newStars) {\r\n        const starData = this.getStarLOD(lodLevel)\r\n\r\n        const columnHeight = starData.height()\r\n\r\n        this.spliceStars(lodLevel, startX * columnHeight, 0, newStars)\r\n\r\n        const width = newStars.length / columnHeight / starData.starsPerGrid\r\n\r\n        if (startX === 0) {\r\n            starData.start.x -= width\r\n        } else {\r\n            starData.end.x += width\r\n        }\r\n    },\r\n\r\n    // -------\r\n\r\n    getStarLOD(lodLevel) {\r\n        return data.stars[lodLevel]\r\n    },\r\n\r\n    setLodLevel(lodLevel) {\r\n        data.lodLevel = lodLevel\r\n    },\r\n\r\n    MAX_LOD,\r\n\r\n    data\r\n}\r\n\r\nmodule.exports = mod","const data = require(\"./data.cjs\")\r\nconst FastRandom = require('fast-random');\r\n\r\nconst MAX_LOD = data.MAX_LOD\r\nconst MIN_SIZE_EXP = 8\r\n\r\nlet iter = 0\r\n\r\nconst mod = {\r\n    generateViewportStars(camera) {\r\n        let exactLodLevel = Math.max(0, Math.log2(camera.z / 10))\r\n\r\n        let minLodLevel = Math.max(0, Math.floor(exactLodLevel))\r\n\r\n        data.setLodLevel(exactLodLevel)\r\n\r\n        for (let lodLevel = 0; lodLevel < MAX_LOD; ++lodLevel) {\r\n            if (lodLevel < MAX_LOD - minLodLevel) {\r\n                this.generateViewportStarsLOD(camera, lodLevel)\r\n            } else {\r\n                // If outside of LOD then delete all\r\n                const starData = data.getStarLOD(lodLevel)\r\n\r\n                data.spliceStars(lodLevel, 0, starData.width() * starData.height())\r\n\r\n                starData.start.x = 0\r\n                starData.start.y = 0\r\n                starData.end.x = 0\r\n                starData.end.y = 0\r\n            }\r\n        }\r\n    },\r\n\r\n    generateViewportStarsLOD(camera, lodLevel) {\r\n        const gridSize = 2 ** (MAX_LOD - lodLevel + MIN_SIZE_EXP)\r\n        const starData = data.getStarLOD(lodLevel)\r\n\r\n        const { x: minX, y: minY } = camera.screenSpaceToCoord(0, 0)\r\n        const { x: maxX, y: maxY } = camera.screenSpaceToCoord(innerWidth, innerHeight)\r\n\r\n        const left = Math.floor(minX / gridSize)\r\n        const right = Math.ceil(maxX / gridSize)\r\n        const top = Math.ceil(maxY / gridSize)\r\n        const bottom = Math.floor(minY / gridSize)\r\n\r\n        const start = starData.start\r\n        const end = starData.end\r\n\r\n        if (top < start.y || bottom > end.y || left > end.x || right < start.x || starData.width() === 0 || starData.height() === 0) {\r\n            const newStars = this.generateGrid(lodLevel, left, right, bottom, top)\r\n\r\n            data.spliceStars(lodLevel, 0, starData.width() * starData.height(), newStars)\r\n\r\n            start.x = left\r\n            start.y = bottom\r\n\r\n            end.x = right\r\n            end.y = top\r\n\r\n            return\r\n        }\r\n\r\n        if (top < end.y) {\r\n            // If top is under old top, then shave off those rows\r\n            data.removeStarRows(lodLevel, starData.height() - (end.y - top), end.y - top)\r\n        } else if (top > end.y) {\r\n            const newStars = this.generateGrid(lodLevel, start.x, end.x, end.y, top)\r\n\r\n            data.addStarRows(lodLevel, starData.height(), newStars)\r\n        }\r\n        end.y = top\r\n\r\n        if (bottom > start.y) {\r\n            // If bottom is over old bottom, then shave off those rows\r\n            data.removeStarRows(lodLevel, 0, bottom - start.y)\r\n        } else if (bottom < start.y) {\r\n            const newStars = this.generateGrid(lodLevel, start.x, end.x, bottom, start.y)\r\n\r\n            data.addStarRows(lodLevel, 0, newStars)\r\n        }\r\n        start.y = bottom\r\n        \r\n\r\n\r\n        if (left > start.x) {\r\n            data.removeStarColumns(lodLevel, 0, left - start.x)\r\n        } else if (left < start.x) {\r\n            const newStars = this.generateGrid(lodLevel, left, start.x, start.y, end.y)\r\n\r\n            data.addStarColumns(lodLevel, 0, newStars)\r\n        }\r\n        start.x = left\r\n\r\n        if (right < end.x) {\r\n            data.removeStarColumns(lodLevel, starData.width() - (end.x - right), end.x - right)\r\n        } else if (right > end.x) {\r\n            const newStars = this.generateGrid(lodLevel, end.x, right, start.y, end.y)\r\n\r\n            data.addStarColumns(lodLevel, starData.width(), newStars)\r\n        }\r\n        end.x = right\r\n    },\r\n\r\n    generateGrid(lodLevel, startX, endX, startY, endY) {\r\n        const size = (endX - startX) * (endY - startY) * lodLevel * 2\r\n\r\n        let newStars = new Array(size)\r\n\r\n        let index = 0\r\n        for (let x = startX; x < endX; ++x) {\r\n            for (let y = startY; y < endY; ++y) {\r\n                const stars = this.generateStarsInGrid(lodLevel, x, y)\r\n\r\n                for (let i = 0; i < stars.length; ++i) {\r\n                    newStars[index++] = stars[i]\r\n                }\r\n            }\r\n        }\r\n\r\n        return newStars\r\n    },\r\n\r\n    generateStarsInGrid(lodLevel, x, y) {\r\n        const size = lodLevel * 2\r\n\r\n        const gridSize = 2 ** (MAX_LOD - lodLevel + MIN_SIZE_EXP)\r\n        const stars = new Array(size)\r\n\r\n        const seed = gridSize + (y * 999 + x)\r\n        const rng = FastRandom(seed)\r\n\r\n        for (let i = 0; i < size; ++i) {\r\n            const starX = (rng.nextFloat() + x) * gridSize\r\n            const starY = (rng.nextFloat() + y) * gridSize\r\n            const starSize = (rng.nextFloat() * gridSize + gridSize) / 2 ** MIN_SIZE_EXP\r\n\r\n            stars[i] = {\r\n                position: [starX, starY],\r\n                size: starSize\r\n            }\r\n        }\r\n\r\n        return stars\r\n    },\r\n\r\n    getStarAtCoord(x, y) {\r\n        const positions = data.data.starRenderData.position.data\r\n        const sizes = data.data.starRenderData.size.data\r\n\r\n        for (let i = 0; i < sizes.length; ++i) {\r\n            const star = {\r\n                x: positions[i * 2],\r\n                y: positions[i * 2 + 1],\r\n                size: sizes[i],\r\n            }\r\n\r\n            const distance = Math.sqrt((x - star.x) ** 2 + (y - star.y) ** 2)\r\n\r\n            if (distance < star.size) {\r\n                return star\r\n            }\r\n        }\r\n\r\n        return null\r\n    },\r\n\r\n    coordToId(x, y) {\r\n        x = Number((x / 100).toFixed(1))\r\n        y = Number((y / 100).toFixed(1))\r\n\r\n        console.log(x, y)\r\n\r\n        // Apply Cantor pairing function to x and y\r\n        let uniqueInt = ((x + y) * (x + y + 1)) / 2 + y\r\n        \r\n        // Convert the unique integer to base-36 (or any base)\r\n        return uniqueInt.toString(36).replace(\".\", \"-\") // Converts to base-36 string (0-9, a-z)\r\n    },\r\n\r\n    IdToCoord(id) {\r\n        const n = parseInt(id.replace(\"-\", \".\"), 36)\r\n\r\n        let t = Math.floor((Math.sqrt(1 + 8 * n) - 1) / 2);\r\n      \r\n        let y = (n - (t * (t + 1)) / 2) * 100;\r\n      \r\n        let x = (t - y) * 100;\r\n      \r\n        return { x, y };\r\n    },\r\n}\r\n\r\nmodule.exports = mod","function random(seed) {\n\tfunction _seed(s) {\n\t\tif ((seed = (s|0) % 2147483647) <= 0) {\n\t\t\tseed += 2147483646;\n\t\t}\n\t}\n\n\tfunction _nextInt() {\n\t\treturn seed = seed * 48271 % 2147483647;\n\t}\n\n\tfunction _nextFloat() {\n\t\treturn (_nextInt() - 1) / 2147483646;\n\t}\n\n\t_seed(seed);\n\n\treturn {\n\t\tseed: _seed,\n\t\tnextInt: _nextInt,\n\t\tnextFloat: _nextFloat\n\t};\n}\n\nmodule.exports = random;\n","const mod = {\r\n    setStat(name, value) {\r\n        $(`.${name}`).text(value)\r\n    },\r\n}\r\n\r\nmodule.exports = mod","class Timer {\r\n    constructor() {\r\n        this.start()\r\n    }\r\n\r\n    start() {\r\n        this.startTime = performance.now()\r\n    }\r\n\r\n    stop() {\r\n        return this.lap()\r\n    }\r\n\r\n    lapse() {\r\n        const time = this.lap()\r\n        this.startTime = performance.now()\r\n        \r\n        return time\r\n    }\r\n\r\n    lap() {\r\n        return Number((performance.now() - this.startTime).toFixed(1))\r\n    }\r\n}\r\n\r\nmodule.exports = Timer"],"names":["$065afaecc735fbee$var$s_textureInternalFormatInfo","s_ctx","$parcel$interopDefault","a","__esModule","default","$80a75ef059e5aa8e$exports","$80a75ef059e5aa8e$var$destruct","x","y","constructor","target","opts","z","down","offsetX","offsetY","startX","startY","movedX","movedY","active","button","minZ","maxZ","Infinity","hasOwnProperty","TypeError","onMouseDown","e","clientX","clientY","onMouseMove","preventDefault","onMouseUp","onScroll","oldX","innerWidth","oldY","innerHeight","deltaY","Math","min","max","newX","newY","onContextMenu","begin","addEventListener","window","end","removeEventListener","coordToScreenSpace","x2","y2","coordToClipSpace","screenSpaceToClipSpace","screenSpaceToCoord","clipSpaceToCoord","clipSpaceToScreenSpace","$a1e98a181f2c075d$exports","$a24fb1ef4a1781b4$exports","$4b46d1b7227c6e88$exports","$c89e750638e63481$exports","$ed69c28b53996f4b$exports","$381ef7b8281eb407$exports","$381ef7b8281eb407$var$Mesh","points","push","data","from","circleWithSides","sides","mesh","i","theta","PI","sin","cos","theta2","$065afaecc735fbee$var$VecType","Float32Array","$065afaecc735fbee$var$create$1","dst","$065afaecc735fbee$var$MatType","$065afaecc735fbee$var$transformPoint","m","v","v0","v1","v2","d","$065afaecc735fbee$var$transformDirection","$065afaecc735fbee$var$glTypeToTypedArray","$065afaecc735fbee$export$bddf845047a0e959","typedArray","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","$065afaecc735fbee$export$9546290c15d36fce","typedArrayType","tt","$065afaecc735fbee$export$9dd3754ae86f0017","SharedArrayBuffer","buffer","ArrayBuffer","$065afaecc735fbee$var$error$1","args","console","error","$065afaecc735fbee$var$isTypeWeakMaps","Map","$065afaecc735fbee$var$isType","object","type","weakMap","get","WeakMap","set","isOfType","undefined","s","Object","prototype","toString","call","substring","length","$065afaecc735fbee$var$isTexture","gl","t","WebGLTexture","$065afaecc735fbee$var$defaults$2","attribPrefix","$065afaecc735fbee$export$6ea00fe9d038b3f9","drawType","WebGLBuffer","createBuffer","bindBuffer","bufferData","$065afaecc735fbee$var$isIndices","name","$065afaecc735fbee$export$251e3bdee27f62a4","array","$065afaecc735fbee$var$texcoordRE","$065afaecc735fbee$var$colorRE","$065afaecc735fbee$export$bfceede8dab24cbd","arrayName","numValues","numComponents","size","$065afaecc735fbee$var$guessNumComponentsFromName","length1","test","$065afaecc735fbee$var$makeTypedArray","Array","isArray","Type","$065afaecc735fbee$var$typedArrayTypeFromGLTypeOrTypedArrayCtor","glTypeOrTypedArrayCtor","$065afaecc735fbee$export$3dc63662699923fc","CTOR","$065afaecc735fbee$var$attribBufferFromBuffer","arrayType","$065afaecc735fbee$var$attribBufferFromSize","numBytes","BYTES_PER_ELEMENT","$065afaecc735fbee$var$attribBufferFromArrayLike","$065afaecc735fbee$var$positionKeys","$065afaecc735fbee$export$140f5b0225138840","arrays","srcBufferInfo","newAttribs","$065afaecc735fbee$export$df835e2df67be3fe","attribs","keys","forEach","attribName","attrib","value","fn","normalization","normalize","stride","offset","divisor","bufferInfo","assign","indices","newIndices","numElements","elementType","$065afaecc735fbee$var$getNumElementsFromAttributes","key","ii","getBufferParameter","bytesPerValue","totalElements","$065afaecc735fbee$var$createAugmentedTypedArray","opt_type","cursor","arguments","jj","reset","opt_index","defineProperty","$065afaecc735fbee$var$applyFuncToV3Array","matrix","len","tmp","$065afaecc735fbee$var$transformNormal","mi","$065afaecc735fbee$var$createXYQuadVertices","xOffset","yOffset","position","normal","texcoord","$065afaecc735fbee$var$createPlaneVertices","width","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","normals","texcoords","u","numVertsAcross","indexOf","$065afaecc735fbee$var$inverse","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","$065afaecc735fbee$var$createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uz","numVertsAround","$065afaecc735fbee$var$CUBE_FACE_INDICES","$065afaecc735fbee$var$createCubeVertices","k","cornerVertices","faceNormals","uvCoords","f","faceIndices","uv","$065afaecc735fbee$var$createTruncatedConeVertices","bottomRadius","topRadius","height","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","start","yy","ringRadius","$065afaecc735fbee$var$expandRLEData","rleData","padding","runLength","element","slice","apply","$065afaecc735fbee$var$create3DFVertices","colors","numVerts","color","$065afaecc735fbee$var$createCrescentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","subdivisionsThick","xBack","angle","c","b","px","py","pz","n","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","$065afaecc735fbee$var$createCylinderVertices","$065afaecc735fbee$var$createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","nextRingIndex","nextSliceIndex","$065afaecc735fbee$var$createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","$065afaecc735fbee$var$createBufferFunc","$065afaecc735fbee$export$69d8acce17089372","buffers","$065afaecc735fbee$export$2750db2b7c74f6a0","$065afaecc735fbee$var$getNumElementsFromNonIndexedArrays","$065afaecc735fbee$var$createBufferInfoFunc","$065afaecc735fbee$export$e3518b1ac7891039","texStorage2D","$065afaecc735fbee$export$e97753eae63e4e62","haveEnumsForType","enums","addEnums","existing","$065afaecc735fbee$var$defaults$1","textureColor","textureOptions","crossOrigin","$065afaecc735fbee$var$formatInfo","$065afaecc735fbee$var$getTextureInternalFormatInfo","internalFormat","textureFormat","colorRenderable","textureFilterable","bytesPerElement","info","bytesPerElementMap","ndx","numColorComponents","$065afaecc735fbee$var$setPackState","options","colorspaceConversion","pixelStorei","premultiplyAlpha","flipY","$065afaecc735fbee$export$494a924bf2d77d9a","tex","bindTexture","$065afaecc735fbee$export$2058af87f75a4771","$065afaecc735fbee$var$isPowerOf2","generateMipmap","filtering","$065afaecc735fbee$export$586e511f2aeecefd","texParameteri","$065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize","auto","level","$065afaecc735fbee$var$getCubeFacesWithNdx","faces","cubeFaceOrder","facesWithNdx","map","face","sort","$065afaecc735fbee$var$noop","$065afaecc735fbee$var$getElementById","id","document","getElementById","$065afaecc735fbee$var$typeMap","$065afaecc735fbee$var$getBindPointForSamplerType","bindPoint","$065afaecc735fbee$var$intSetter","location1","uniform1i","$065afaecc735fbee$var$intArraySetter","uniform1iv","$065afaecc735fbee$var$intVec2Setter","uniform2iv","$065afaecc735fbee$var$intVec3Setter","uniform3iv","$065afaecc735fbee$var$intVec4Setter","uniform4iv","$065afaecc735fbee$var$samplerSetter","unit","textureOrPair","texture","sampler","activeTexture","$065afaecc735fbee$var$TEXTURE0","bindSampler","$065afaecc735fbee$var$samplerArraySetter","units","textures","index","$065afaecc735fbee$var$floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","$065afaecc735fbee$var$intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","$065afaecc735fbee$var$uintAttribSetter","vertexAttrib4uiv","$065afaecc735fbee$var$matAttribSetter","typeInfo","defaultSize","count","rowOffset","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","$065afaecc735fbee$var$attrTypeMap","$065afaecc735fbee$var$errorRE","$065afaecc735fbee$var$spaceRE","$065afaecc735fbee$var$prepShaderSource","shaderSource","lineOffset","replace","$065afaecc735fbee$var$getProgramOptions","opt_attribs","opt_locations","opt_errorCallback","transformFeedbackVaryings","transformFeedbackMode","callback","opt","errorCallback","attribLocations","errors","msg","$065afaecc735fbee$var$defaultShaderType","$065afaecc735fbee$var$wait","ms","Promise","resolve","setTimeout","$065afaecc735fbee$var$createProgramNoCheck","shaders","programOptions","program","createProgram","shader","elem","src","text","scriptType","createShader","compileShader","attachShader","entries","loc","bindAttribLocation","varyings","linkProgram","$065afaecc735fbee$export$327d24a04cd0dc17","progOptions","shaderSet","Set","hasErrors","$065afaecc735fbee$var$getProgramErrors","$065afaecc735fbee$var$deleteProgramAndShaders","notThese","getAttachedShaders","has","deleteShader","deleteProgram","$065afaecc735fbee$var$waitForProgramLinkCompletionAsync","then","$065afaecc735fbee$var$wrapCallbackFnToAsyncFn","arg1","reject","err","ext","getExtension","checkFn","getProgramParameter","COMPLETION_STATUS_KHR","waitTime","$065afaecc735fbee$var$waitForAllProgramsLinkCompletionAsync","programs","values","errFn","linked","lastError","getProgramInfoLog","$065afaecc735fbee$var$checkShaderStatus","shaderType","compiled","getShaderParameter","getShaderInfoLog","getShaderSource","$065afaecc735fbee$var$addLineNumbersWithError","log","matches","matchAll","lineNoToErrorMap","lineNo","parseInt","next","split","line","join","SHADER_TYPE","filter","_","$065afaecc735fbee$var$isBuiltIn","startsWith","$065afaecc735fbee$export$2965a73560492a94","$065afaecc735fbee$var$tokenRE","$065afaecc735fbee$var$isDigit","$065afaecc735fbee$export$1fa517b18dd66830","setters","actualSetters","uniformSetters","numArgs","aNdx","$065afaecc735fbee$export$186607e23079b9e5","programInfo","vertexArrayObject","bindVertexArray","$065afaecc735fbee$export$74da2cba014bdc09","attribSetters","$065afaecc735fbee$export$9d683a1d425bd0b2","$065afaecc735fbee$export$fe2460765a628597","textureUnit","uniformTree","numUniforms","uniformInfo","getActiveUniform","endsWith","substr","getUniformLocation","createUniformSetter","location","$065afaecc735fbee$var$addSetterToUniformTree","fullPath","node","tokens","tokenNdx","path","token","isArrayIndex","accessor","isLastToken","child","$065afaecc735fbee$var$setUniformTree","tree","prop","$065afaecc735fbee$export$ca2da2c8098eca9b","numAttribs","attribInfo","getActiveAttrib","getAttribLocation","uniformBlockSpec","$065afaecc735fbee$export$7b680ab060795ae5","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","transformFeedbackInfo","$065afaecc735fbee$export$ca1b1131a9f3199c","numVaryings","varying","getTransformFeedbackVarying","$065afaecc735fbee$var$notIdRE","shaderSources","source","script","origCallback","$065afaecc735fbee$var$checkAllPrograms","programSpecs","noDeleteShadersSet","spec","$065afaecc735fbee$export$b61153735437f1bf","fromEntries","add","createProgramInfosForPrograms","$065afaecc735fbee$var$attachmentsByFormat","$065afaecc735fbee$var$renderbufferFormats","$065afaecc735fbee$var$prefixRE","$065afaecc735fbee$var$supportedExtensions","$0b52c0d9f08e3032$exports","getShaderType","$","attr","canvas","getContext","$065afaecc735fbee$export$ef86202f9bca6ee5","$065afaecc735fbee$var$addExtensionToContext","extensionName","fnSuffix","exec","enumSuffix","isFunc","suffix","$065afaecc735fbee$var$warn$1","warn","origFn","bgProgramInfo","bindCamera","camera","bindData","bindBgData","left","top","right","bottom","bgData","bindInfo","render","viewport","enable","DEPTH_TEST","CULL_FACE","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","renderStars","lod","renderBg","uniforms","resolution","vertexArrayInfo","$065afaecc735fbee$export$3a550f69329a008c","programInfos","vao","createVertexArray","useProgram","drawArraysInstancedANGLE","TRIANGLES","bgBufferInfo","$065afaecc735fbee$export$459017ad3380cbb9","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","$7b2427e92e113e6f$exports","$7b2427e92e113e6f$var$CIRCLE_MESH","$7b2427e92e113e6f$var$data","lodLevel","stars","starRenderData","starRenderDataTyped","starsPerGrid","update","requestUpdate","getData","getInfo","spliceStars","newStars","starData","getStarLOD","positionData","sizeData","splice","sizes","removeStarRows","columnHeight","addStarRows","sliceStart","sliceEnd","removeStarColumns","addStarColumns","setLodLevel","MAX_LOD","$60944aa7cd7b3b7f$exports","$20c26a4462377769$exports","seed","_seed","_nextInt","nextInt","nextFloat","$60944aa7cd7b3b7f$var$MAX_LOD","generateViewportStars","exactLodLevel","log2","minLodLevel","floor","generateViewportStarsLOD","gridSize","minX","minY","maxX","maxY","ceil","generateGrid","endX","endY","generateStarsInGrid","rng","starX","starY","starSize","getStarAtCoord","star","distance","sqrt","coordToId","Number","toFixed","uniqueInt","IdToCoord","$c6d648ceeedc004f$exports","setStat","$5bf5133f24e781dc$exports","startTime","performance","now","stop","lap","lapse","time","$28f79cfcdf8afeb9$var$canvas","querySelector","$28f79cfcdf8afeb9$var$camera","$28f79cfcdf8afeb9$var$renderer","$28f79cfcdf8afeb9$var$tick","$28f79cfcdf8afeb9$var$processTimeAvg","$28f79cfcdf8afeb9$var$renderTimeAvg","requestAnimationFrame","$28f79cfcdf8afeb9$var$update","timer","processTime","reduce","sum","val","renderTime","on","event","pageX","pageY"],"version":3,"file":"index.478aeb03.js.map"}